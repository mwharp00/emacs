;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(read-expression-history imenu--history-list gnus-group-history org-capture-template-prompt-history::amount history regexp-history muse-project-page-history minibuffer-history-search-history regexp-search-ring dired-shell-command-history locate-history-list org-tags-history search-ring gnus-method-history w3m-input-url-history tmphist org-refile-history org-capture-template-prompt-history:: org-capture-template-prompt-history::Payee org-remember-template-prompt-history:: org-remember-template-prompt-history::Payee org-read-date-history planner-history-list coding-system-history yes-or-no-p-history query-replace-history input-method-history read-envvar-name-history extended-command-history minibuffer-history ido-file-history ido-buffer-history file-name-history shell-command-history buffer-name-history))
(setq imenu--history-list '("Machines" "ac'tivAid" "Programs"))
(setq gnus-group-history '("gwene.com.reddit.r.linux4noobs"))
(setq org-capture-template-prompt-history::amount '("256.35" "12.16" "256.35" "131.14" "265.45" "38.85" "56.78" "182.32" "2018.75" "256.24" "48.53" "test amount"))
(setq regexp-history '(";;" " ; "))
(setq muse-project-page-history '("InboundSweden"))
(setq regexp-search-ring '("SKD [0-9][0-9]" "S" "SKD [0-9][0-9]" "music" "SKD [0-9][0-9]"))
(setq dired-shell-command-history '("nohup evince ? &" "nohup sumatra ? &" "xpdf"))
(setq locate-history-list '("tree-widget" "xscheme.el" "newsticker.el"))
(setq org-tags-history '("got"))
(setq search-ring '("git" "org-mode" "kill" "kb" "dired" "'cl" "ucid" "kbd" "requir" "auto-i" "cyg" "set-b" "/" "(t " "backg" "green"))
(setq gnus-method-history '("nntp"))
(setq w3m-input-url-history '("file:///F:/Documentation/Lisp/emacs-lisp-intro.html" "file:///F:/Documentation/Emacs/emacs.html" "/cygdrive/f\\Documentation\\Emacs\\emacs.html" "F:\\Documentation\\Emacs\\emacs.html" "http://stackoverflow.com/questions/2177687/open-file-via-ssh-and-sudo-with-emacs" "file:///F:/Documentation/diyplanner2/handbook.html" "http://mobileorg.ncogni.to/doc/getting-started/using-dropbox/" "file:///F:/Documentation/w3m/MANUAL.htm" "file://///hda/Docs/dragnatspkdoc.txt" "E:\\Documentation\\Lisp\\emacs-lisp-intro.html" "http://hyperpolyglot.org/text-mode-editors" "file:///F:/dl/delicious.html" "http://www.makeuseof.com/tag/how-to-authenticate-over-ssh-with-keys-instead-of-passwords/" "http://www.yahoo.com/food/11-trader-joes-products-we-cant-live-without-72001464598.html" "https://github.com/skeeto/.emacs.d#readme" "http://net.tutsplus.com/tutorials/tools-and-tips/git-on-windows-for-newbs/" "http://orgmode.org/worg/org-tutorials/org-vcs.html" "about:" "alliedpilots.org" "///F:/dl/delicious.html" "https://login.alliedpilots.org/default.aspx?ReturnUrl=https://public.alliedpilots.org/APA/Default.aspx?TabId=840" "http://m00natic.github.com/emacs/emacs-wiki.html" "http://quoreddit.quora.com/The-Best-Online-Learning-Centers" "file:///cygdrive/f/dl/delicious.html" "http://www.howtogeek.com/136959/how-to-switch-to-voip-and-ditch-your-home-phone-bill-forever/" "http://www.virtualization.info/" "http://www.tradebit.com/filedetail.php/820269" "file:///F:/Documentation/Emacs/gnus/big-gnus.html" "file:///F:/Documentation/Planner/planner-el.html" "file:///C:/Users/mharp/Downloads/planner-el.html" "http://alexott.net/en/writings/emacs-vcs/EmacsGit.html" "file:///C:/Documentation/Emacs/gnus/big-gnus.html" "file:///C:/Documentation/Emacs/MIT%20tut/introemacstut.html"))
(setq org-refile-history '(#("Notes/FuMed" 0 5 (org-category "refile" face org-level-1 fontified t) 6 11 (org-category "refile" face org-level-3 fontified t)) #("Notes/FuMed/" 0 5 (fontified t face org-level-1 org-category "refile") 6 11 (fontified t face org-level-3 org-category "refile")) #("Notes/Contacts" 0 5 (org-category "refile" face org-level-1 fontified t) 6 14 (org-category "refile" face org-level-3 fontified t)) #("Notes/Contacts/" 0 5 (fontified t face org-level-1 org-category "refile") 6 14 (fontified t face org-level-3 org-category "refile")) #("Notes/FuMed" 0 5 (org-category "refile" face org-level-1 fontified t) 6 11 (org-category "refile" face org-level-3 fontified t)) #("Notes/FuMed/" 0 5 (fontified t face org-level-1 org-category "refile") 6 11 (fontified t face org-level-3 org-category "refile")) #("Notes/Contacts" 0 5 (org-category "refile" face org-level-1 fontified t) 6 14 (org-category "refile" face org-level-3 fontified t)) #("Notes/Contacts/" 0 5 (fontified t face org-level-1 org-category "refile") 6 14 (fontified t face org-level-3 org-category "refile")) #("Notes/programs" 0 5 (fontified t face org-level-1 org-category "refile") 6 14 (fontified t face org-level-3 org-category "refile")) #("Notes/programs/" 0 5 (org-category "refile" face org-level-1 fontified t) 6 14 (org-category "refile" face org-level-3 fontified t)) #("Notes/Corre" 0 5 (fontified t face org-level-1 org-category "refile") 6 11 (fontified t face org-level-3 org-category "refile")) #("Notes/Corre/" 0 5 (org-category "refile" face org-level-1 fontified t) 6 11 (org-category "refile" face org-level-3 fontified t)) #("programs/emacs/gnus" 0 8 (fontified t face org-level-1) 9 14 (fontified t face org-level-2) 15 19 (fontified t face org-level-3)) #("programs/emacs/gnus/" 0 8 (face org-level-1 fontified t) 9 14 (face org-level-2 fontified t) 15 19 (face org-level-3 fontified t)) #("programs/auto-complete" 0 8 (fontified t face org-level-1) 9 22 (fontified t face org-level-2)) #("programs/auto-complete/" 0 8 (face org-level-1 fontified t) 9 22 (face org-level-2 fontified t)) #("Notes/Next.Job/" 0 5 (fontified t face org-level-1) 6 14 (fontified t face org-level-3)) #("Notes/" 0 5 (fontified t face org-level-1)) #("Notes/emacs/" 0 5 (fontified t face org-level-1) 6 11 (fontified t face org-level-3)) #("Notes/FuMed/" 0 5 (fontified t face org-level-1) 6 11 (fontified t face org-level-3)) #("Notes/Next.Job/" 0 5 (fontified t face org-level-1) 6 14 (fontified t face org-level-3)) #("Notes/FuMed/" 0 5 (fontified t face org-level-1) 6 11 (fontified t face org-level-3)) #("programs/cygwin/" 0 8 (fontified t face org-level-1) 9 15 (fontified t face org-level-2)) #("programs/python/" 0 8 (org-category "bookmarks" face org-level-1 fontified t) 9 15 (face org-level-2 fontified t)) #("programs/emacs/bookmarks/" 0 8 (org-category "bookmarks" face org-level-1 fontified t) 9 14 (face org-level-2 org-category "bookmarks" fontified t) 15 24 (face org-level-3 org-category "bookmarks" fontified nil)) #("programs/emacs/git/" 0 8 (org-category "bookmarks" face org-level-1 fontified t) 9 14 (face org-level-2 org-category "bookmarks" fontified t) 15 18 (org-category "bookmarks" face org-level-3 fontified t)) #("programs/shell/" 0 8 (org-category "bookmarks" face org-level-1 fontified t) 9 14 (face org-level-2 fontified t)) #("programs/outlook\\onenote/" 0 8 (org-category "bookmarks" face org-level-1 fontified t) 9 16 (face org-level-2 org-category "bookmarks" fontified t) 17 24 (face org-level-2 org-category "bookmarks" fontified t)) #("programs/emacs/git/" 0 8 (org-category "bookmarks" face org-level-1 fontified t) 9 14 (face org-level-2 org-category "bookmarks" fontified t) 15 18 (org-category "bookmarks" face org-level-3 fontified t)) #("programs/emacs/basic and customize/" 0 8 (org-category "bookmarks" face org-level-1 fontified t) 9 14 (face org-level-2 org-category "bookmarks" fontified t) 15 34 (face org-level-3 org-category "bookmarks" fontified t)) #("video/roku/" 0 5 (org-category "bookmarks" face org-level-1 fontified t) 6 10 (face org-level-2 fontified t))))
(setq org-capture-template-prompt-history:: '("test" "ten"))
(setq org-capture-template-prompt-history::Payee '("tmob"))
(setq org-remember-template-prompt-history:: '("368.92" "2Oct" "44.16 + 133.46 overdue" "13 may" "179.75" "14Mar" "1550" "now" "3896.89" "10dec" "970.30" "2dec" " " "10:00" "lawyer 10am" "76.60" "27Jul" "65.00" "now" "298.20" "15May" "79.02" "27Mar" "141.71" "19Mar" "41.99" "6Mar" "121.48" "27feb" "121.48"))
(setq org-remember-template-prompt-history::Payee '("citi card" "msd" "PG&E" "K" "b of a cc" "citi" "GT att" "13506" "amex" "GT ATT" "laclede" "NID" "tmob" "t-mob"))
(setq org-read-date-history '("   " "3    " "   " "16    " "   " "20    " "3    " "   " "16    " "11    " "   " "10    " "25    " "   " "24    " "   " "21    " "   " "3    " "   " "28    " "4    " "24    " "9    " "   " "15    " "   " "14    " "   " "7    "))
(setq planner-history-list '("AA" "StL" "MiaFlop" "StL" "FinPlan" "CorreSpondense" "FourS" "XTwo20" "CorreSpondense" "FinPlan" "CorreSpondense" "FinPlan" "CorreSpondense" "AA" "CorreSpondense" "TaskPool" "PayBills" "CorreSpondense" "SevenLinden" "FinPlan" "XTwo20" "SevenLinden" "AA" "InboundSweden" "AA" "corre" "web" "TaskPool" "EMail" "SevenLinden" "EMail"))
(setq coding-system-history '("utf-8" "utf-8-emacs" "chinese-iso-8bit" "utf-8" "chinese-iso-8bit" "utf-8" "chinese-iso-8bit" "utf-8" "raw-text" "utf-8-emacs"))
(setq yes-or-no-p-history '("yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "YES" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes"))
(setq query-replace-history '("+" "." "/" "//" "/" "////" "/" " " "/" "//" "/" "////" "/" " " " /" "" ">" "" ":" "" ":" " " "," "/"))
(setq read-envvar-name-history '("PATH" "Home" "HOMEPATH" "HOMEDRIVE" "Home" "EMACSPATH" "HOMEDRIVE" "Home" "HOMEPATH" "PATH" "EMACSLOADPATH" "APPDATA" "USERPROFILE" "SHELL" "PATH" "EMACSLOADPATH" "Home" "PATH" "EMACSDATA" "Home" "HOMEPATH" "EMACSLOADPATH" "EMACSPATH" "HOMEDRIVE"))
(setq extended-command-history '("shell" "shell" "gnus" "org-reload" "list-packages" "plan" "list-packages" "eshell" "eval-region" "org-reload" "w3m" "w3m-session-select" "plan" "list-packages" "eshell" "plan" "load-theme" "load-theme" "list-packages" "eshell" "load-theme" "load-theme" "list-packages" "eshell" "list-packages" "eshell" "ansi-term" "ansi-term" "package-refresh-contents" "package-refresh-contents" "org-add-planning-info" "org-insert-link" "just-one-space" "eldoc-mode" "ielm" "occur" "columnify" "columnify" "indent-region" "load-theme"))
(setq minibuffer-history '("3000" "76 program from notes" "schedule Maplewood plumber" "Lisa agent" "c:/Users/mharp/.emacs.d/m" "c:/Users/mharp/move.out.da.way/.em" "w" "c:/Users/mharp/move.out.da.way/.e" "c:/Users/mharp/scriptin/9832.2jul.txt" "wo" "c:/Users/mharp/.emacs.d/mh" "c:/Users/mharp/" "c:/Users/mharp/.emacs.d/in" "c:/Users/mharp/org/sync/fu" "c:/Users/mharp/org/sync/re" "c:/Users/mharp/org" "c:/Users/mharp/org/sync/to" "c:/Users/mharp/move.out.da.way/so" "bash" "evaluate" "evaluate-region" "C:/emacs/emacs-24.3/bin/cmdproxy.exe" "c:/Users/mharp/org/boo" "c:/Users/mharp/org/sync/tod" "c:/Users/mharp/.ema" "c:/Users/mharp/move.out.da.way/fromsacha.org" "c:/Users/mharp/.em" "c:/Users/mharp/.ea" "c:/Users/mharp/mo" "c:/bid" "c:/Users/mharp/o" "Is it a good time to buy a house in San Francisco? | Rahul Bhandari" "Qudoku - BlackBerry World" "Document Scanner - BlackBerry World" "Philips Dictation Recorder for BlackBerry 10 - BlackBerry World" "Endomondo Sports Tracker for BlackBerry 10 - BlackBerry World" "Kobo - BlackBerry World" "Kindle for BlackBerry 10 - BlackBerry World" "PDF Scanner - BlackBerry World" "Translate for BlackBerry 10 - BlackBerry World" "http://appworld.blackberry.com/webstore/content/52429887/?lang=en&countrycode=US" "Translate for BlackBerry 10 - BlackBerry World" "Wikipedia for BlackBerry 10 - BlackBerry World" "just-one-space" "message" "find-file" "find-function" "eldoc" "package-list-packages" "list-packages" "989" "2200" "123" "fill-column" "wombat" "mccarthy" "Window Blinds & Shades: Shop Bamboo Blinds & Roman Shades - JCPenney" "1400" "May Miriani" "Lawn cut"))
(setq ido-file-history '("mharp.org" "init.el" "imenu-anywhere.el" "." "mharp.org" "Sacha.org" "." "withcask.org" "bid.txt" "wocask.org" "." "barb.letter.org" "sacha.org" "setup.log.full" "2012rent.org" "BIDS2.DOC" "bud.letter.org" "14marfly.txt" "+Rtoday.org" "test" "testOLcsv.org" "learn.elisp.el" "76checklist.org" "letter.Len.org" "76checklist.org" "w3m.el" ".emacs.mini" ".emacs-w3m" "FutureMedia.org" "."))
(setq ido-buffer-history '(".emacs" "Sacha.org" "letter.Len.org" "imenu-anywhere.el" ".emacs" "letter.Len.org" "Plans" "Sacha.org" "bookmarks.org" "refile.org" "todo.index.org" "w3m.el" "*w3m*<4>" "Plans" "bookmarks.org" "refile.org" "todo.index.org" "FutureMedia.org" "*Ibuffer*" "*Help*" ".emacs" "letter.Len.org" "Plans" "bookmarks.org" "refile.org" "todo.index.org" "letter.Len.org" ".emacs" "*Messages*" ".emacs"))
(setq file-name-history '("~/move.out.da.way/.emacs" "c:/Users/mharp/.emacs.d/elpa/alert-20140506.2032/alert.el" "c:/Users/mharp/move.out.da.way/fromsacha.org" "~/.emacs.d/mharp.org" "f:/dl/mharp.org" "c:/Users/mharp/.emacs.d/init.el" "f:/dl/beginner-2-understand-emacs-lisp.txt" "c:/Users/mharp/.emacs.d/elpa/imenu-anywhere-20131210.1130/imenu-anywhere.el" "f:/dl/mharp.org" "c:/Users/mharp/Desktop/.emacs.d/Sacha.org" "c:/Users/mharp/14marfly.txt" "c:/Users/mharp/org/sync/+Rtoday.org" "c:/Users/mharp/org/test" "c:/Users/mharp/org/testOLcsv.org" "c:/Users/mharp/org/learn.elisp.el" "c:/Users/mharp/Desktop/emacs.d/emacs-init.org" "f:/dl/Bids.txt" "f:/dl/76checklist.org" "f:/dl/letter.Len.org" "f:/dl/680672_training(1).vcs" "f:/dl/680672_training(1).csv" "f:/dl/#680672_training(1).csv#" "c:/Users/mharp/.emacs.d/elpa/w3m-20140213.1557/w3m.el" "c:/Users/mharp/.emacs.mini" "c:/Users/mharp/.emacs-w3m" "c:/Users/mharp/org/xy.commands.org" "c:/Users/mharp/org/FutureMedia.org" "c:/Users/mharp/Feb14" "f:/dl/grey.paper.file.list.txt" "c:/cygwin/home/mharp/.reminders" "c:/cygwin/home/mharp/Scriptin/remindoutput" "c:/Users/mharp/.emacs.d/elpa/ido-vertical-mode-readme.txt" "c:/cygwin/home/mharp/.reminders" "c:/Users/mharp/.emacs.d/elpa/ido-vertical-mode-20131209.938/ido-vertical-mode.el"))
(setq shell-command-history '("pwd" "ls" "./skdleg" "./getskd" "bash skdleg" "bash getskd" "/home/mharp/Scriptin/getskd" "./getskd" "cd /" "./getskd" "./skdleg" "cat ~/Downloads/what-is-your-favorite-deep-elegant-or-beautiful-explanation.htm | w3m -T text/html" "cat ~/Downloads/what-is-your-favorite-deep-elegant-or-beautiful-explanation.htm | w3m -T" "./skdleg" "w3m EshellNavigation.htm " "w3m EshellMultipleEshellBuffers.htm " "w3m EshellWThirtyTwo.htm " "w3m ElDoc.htm " "./skdleg" "cat ~/Downloads/what-is-your-favorite-deep-elegant-or-beautiful-explanation.htm | w3m -T text/html" "./skdleg" "chmod u+x ical2org" "./skdleg" "cd c:/Users/mharp/" "cd c/"))
(setq buffer-name-history '("Plans" "bookmarks.org" "refile.org" "todo.index.org" "*eshell*" "*Calendar*" "FutureMedia.org" "*Messages*" "mharp.org" ".reminders" "2014.07.05.muse" ".emacs" "ref.index.org" "grey.paper.file.list.txt" "sigfile.org" "*Escreen List*" "letter.Len.org" "leg" "*Warnings*" "mharp.el" "*Help*" "*Packages*" "2C/*eshell*" "Sacha.org" "imenu-anywhere.el" "Sacha.org" "w3m.el" "*w3m*<4>" "*Ibuffer*"))
(setq kill-ring '("http://www.whiteoliphaunt.com/duckofminerva/2014/07/the-collapse-of-the-status-quo-in-israel.html
http://nplusonemag.com/online-only/online-only/under-color-of-statute/
http://www.the-tls.co.uk/tls/public/article1431987.ece
http://irreal.org/blog/?p=2804
https://github.com/grettke/home
http://www.realtor.com/realestateandhomes-detail/1235-Mariposa-Ave-Apt-2_Coral-Gables_FL_33146_M57655-93791?row=1
https://www.google.com/maps/dir/1235+Mariposa+Ave+%232,+Coral+Gables,+FL+33146/University+Station+Rail+Southbound/@25.7135496,-80.2805102,17z/data=!3m1!4b1!4m16!4m15!1m5!1m1!1s0x88d9c7fe2a92e5d9:0x8c705b7522fdab5b!2m2!1d-80.276813!2d25.712785!1m5!1m1!1s0x88d9c7ffe39234bf:0xf689436a623426e1!2m2!1d-80.277027!2d25.714868!2m1!6e4!3e2
http://www.realtor.com/realestateandhomes-detail/2952-Sw-27th-Ter_Miami_FL_33133_M60525-32805?row=1
http://www.chow.com/recipes/29589-carrot-chips
http://food52.com/recipes/9957-grilled-tarragon-carrots
" "https://bitbucket.org/eeeickythump/org-gamify
https://draftin.com/
http://www.onetask.com/
http://lifehacker.com/5646560/the-one-task-at-a-time-method-increased-efficiency-in-a-multitasking-world
http://www.dictate-connect.com/
http://nzbdrone.com/#support
http://locometric.com/
http://rakkoentertainment.com/fastever/
https://github.com/untitaker/vdirsyncer
https://github.com/jsks/zsh-plugins
http://flavio.tordini.org/minitube
https://babun.github.io/
https://github.com/mikegrb/App-otfile
https://github.com/emre/storm?2014
http://singularlabs.com/software/metrotextual/transformers-plugins/
http://herelookapp.com/
http://www.funtoo.org/Keychain
http://nulana.com/flexiglass/
https://github.com/idibidiart/AllSeeingEye
http://www.shellcheck.net/#
http://stackp.online.fr/?p=28
http://www.techkings.org/general-pc-chat/34104-droopy-tutorial.html
http://www.hide-folder.com/overview/hf_7.html
http://www.masteringemacs.org/articles/2014/07/08/displaying-interacting-processes-proced/
http://www.thingiverse.com/thing:305639
http://www.nytimes.com/2014/07/08/science/a-billionaire-mathematicians-life-of-ferocious-curiosity.html?ref=science&_r=1
http://www.zillow.com/digs/eclectic/?search=kitchen%20flooring
http://www.cancer.gov/cancertopics/pdq/genetics/prostate/HealthProfessional/page4
http://www.finegardening.com/six-tips-effective-weed-control
http://www.amazon.com/Easy-Gardener-702-WeedBlock-Biodegradable/dp/B001E08OTY/ref=cm_cr_pr_product_top
http://www.colorenrichedmulch.com/where-to-buy-mulch.php
http://orgmode.org/worg/org-faq.html
http://www.masteringemacs.org/articles/2013/12/29/whats-new-in-emacs-24-4/
" "http://www.ighome.com/
http://workawesome.com/productivity/the-to-do-list/
http://www.3quarksdaily.com/3quarksdaily/2014/07/by-emrys-westacott-what-is-it-about-the-apple-common-easily-grown-and-cheap-to-buy-yet-when-you-think-about-it-the-apple.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+3quarksdaily+%283quarksdaily%29
http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html
http://hardware.slashdot.org/story/14/07/05/011250/in-dsseldorf-a-robot-valet-will-park-your-car?utm_source=rss1.0mainlinkanon&utm_medium=feed
http://www.viemu.com/a-why-vi-vim.html
http://endlessparentheses.com/Meta-Binds-Part-1%253A-Drunk-in-the-Dark.html
http://stackoverflow.com/questions/1101487/setting-up-a-working-common-lisp-environment-for-the-aspiring-lisp-newbie/1101605#1101605
http://tuhdo.github.io/emacs-tutor3.html
http://tuhdo.github.io/helm-intro.html
http://www.passwordstore.org/
http://www.lunaryorn.com/2014/07/02/autoloads-in-emacs-lisp.html
https://flattr.com/login?redir=%2Fsettings
http://beyondgrep.com/why-ack/
http://geoff.greer.fm/2011/12/27/the-silver-searcher-better-than-ack/
http://orgmode.org/worg/org-tools/index.html
http://www.youtube.com/watch?v=gAWiXbT599E
http://www.youtube.com/watch?v=LXoWxrTdXkM
https://help.github.com/articles/create-a-repo
http://readwrite.com/2013/10/02/github-for-beginners-part-2
" "Using Org's git repository

You can clone Org's repository and install Org like this:

     $ cd ~/src/
     $ git clone git://orgmode.org/org-mode.git
     $ make autoloads

Note that in this case, make autoloads is mandatory: it defines Org's version in org-version.el and Org's autoloads in org-loaddefs.el.

Remember to add the correct load-path as described in the method above. " "" "file:///F:/Documentation/Lisp/emacs-lisp-intro.html" #("* Tasks" 0 7 (face muse-header-1 fontified t)) "http://news.slashdot.org/story/14/07/03/2028224/duolingo-is-a-free-crowdsourced-language-learning-app-video?utm_source=rss1.0mainlinkanon&utm_medium=feed
http://www.forbes.com/sites/trulia/2014/07/03/how-to-tell-the-fixers-upper-homes-from-the-flops/
http://theappwhisperer.com/2014/06/27/olloclip-wide-angle-panoramic-iphone-photography-tutorial/
http://jaredcosulich.wordpress.com/2014/06/27/five-techniques-to-help-you-think-more-deeply/
http://www.harvardmagazine.com/2014/07/disruptive-genius
http://www.surlatable.com/product/PRO-1040567/Sur+La+Table+Bamboo+Barbecue+Cutting+Board+with+Grooves;jsessionid=B0564C771783477BBA1D9835B6EE84B7.slt-app-01-p-app2#
https://github.com/Fuco1/dired-hacks
http://www.masteringemacs.org/articles/2014/04/10/dired-shell-commands-find-xargs-replacement/
http://www.masteringemacs.org/articles/2011/03/25/working-multiple-files-dired/
http://www.masteringemacs.org/articles/2013/10/10/wdired-editable-dired-buffers/
http://endlessparentheses.com/
http://endlessparentheses.com/init-org-Without-org-mode.html
http://emacslife.com/how-to-read-emacs-lisp.html#sec-3-2-3
http://cs.mcgill.ca/~vfoley1/posts/2014-06-10-why-emacs.html
http://www.realtor.com/realestateandhomes-search/33140/beds-2/baths-1h/price-210000-400000?nzp=33239,33141,33119,33139&disp=2#/lat-25.8172613160258/lng--80.14912/zl-11
http://www.realtor.com/realestateandhomes-detail/1620-Pennsylvania-Ave-Apt-104_Miami-Beach_FL_33139_M69275-99438?row=1
http://www.realtor.com/realestateandhomes-detail/1342-Drexel-Ave-Apt-105_Miami-Beach_FL_33139_M51662-33776?row=1
http://www.realtor.com/realestateandhomes-detail/1342-Drexel-Ave-Apt-204_Miami-Beach_FL_33139_M57422-91417?row=1
http://www.realtor.com/realestateandhomes-detail/1218-Drexel-Ave-Apt-103_Miami-Beach_FL_33139_M55566-69056?row=1
http://www.realtor.com/realestateandhomes-detail/644-13Th-St-Apt-1_Miami-Beach_FL_33139_M53042-66828?row=1
http://www.realtor.com/realestateandhomes-detail/1218-Drexel-Ave-Apt-203_Miami-Beach_FL_33139_M50927-94465?row=1
http://www.realtor.com/realestateandhomes-detail/Miami-Beach_FL_33139_M51283-46174?row=1
http://www.realtor.com/realestateandhomes-detail/1027-Euclid-Ave-Apt-1_Miami-Beach_FL_33139_M63602-48484?row=1
http://www.realtor.com/realestateandhomes-detail/2850-Pine-Tree-Dr-Apt-8_Miami-Beach_FL_33140_M50039-32984?row=1
http://www.realtor.com/realestateandhomes-detail/2850-Pine-Tree-Dr-Apt-1_Miami-Beach_FL_33140_M69555-99031?row=1
http://www.zillow.com/homes/for_sale/fsba,fsbo,fore,cmsn_lt/house,condo,apartment,duplex,townhouse_type/2-_beds/1.5-_baths/210000-360000_price/810-1388_mp/days_sort/25.798317,-80.124342,25.789468,-80.139728_rect/15_zm/
https://www.google.com/maps/dir/2850+Pine+Tree+Dr+%238,+Miami+Beach,+FL+33140//@25.8057513,-80.1263407,18z/data=!4m9!4m8!1m5!1m1!1s0x88d9b3647a733dc7:0xb19eee406bc81432!2m2!1d-80.128232!2d25.805817!1m0!3e2
http://www.miamidade.gov/transit/library/routes/150.pdf
http://www.bbc.com/sport/football/world-cup/2014/schedule/knockout-stage
http://onethingwell.org/post/11320444350/offlineimap
http://onethingwell.org/search/sync
http://www.thessdreview.com/ssd-guides/optimization-guides/the-ssd-optimization-guide-2/4/
http://www.tomshardware.com/forum/15101-63-pagefile-hiberfil-gigantic-filling
http://www.vistax64.com/tutorials/132201-virtual-memory-paging-file-change.html
http://www.yelp.com/search?find_desc=alfa+romeo&find_loc=San+Francisco%2C+CA
http://www.mygooglest.com/fni/dot-emacs.html
http://www.outwit.com/products/hub/
https://www.zotero.org/
https://www.linkedin.com/profile/view?id=77413839&authType=NAME_SEARCH&authToken=6sPl&locale=en_US&srchid=1841426791404475171334&srchindex=1&srchtotal=1&trk=vsrp_people_res_name&trkInfo=VSRPsearchId%3A1841426791404475171334%2CVSRPtargetId%3A77413839%2CVSRPcmpt%3Aprimary
" #("
" 0 1 (face nil font-lock-multiline t font-lock-fontified t fontified t)) #("(add-to-list 'load-path \"~/elisp/planner-3.42\")
(add-to-list 'load-path \"~/elisp/planner-3.42/contrib\")
" 0 24 (fontified t) 24 46 (face font-lock-string-face fontified t) 46 72 (fontified t) 72 102 (face font-lock-string-face fontified t) 102 104 (fontified t)) #("*** http://www.3quarksdaily.com/3quarksdaily/2013/07/twelve-tones.html
" 0 2 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 2 4 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 4 69 (fontified t face org-link mouse-face highlight htmlize-link (:uri "http://www.3quarksdaily.com/3quarksdaily/2013/07/twelve-tones.html") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 69 70 (fontified t face org-link mouse-face highlight htmlize-link (:uri "http://www.3quarksdaily.com/3quarksdaily/2013/07/twelve-tones.html") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 70 71 (fontified t)) #("http://www.bbc.com/sport/football/world-cup/2014/schedule/group-stage
" 0 68 (fontified t mouse-face highlight face org-link htmlize-link (:uri "http://www.bbc.com/sport/football/world-cup/2014/schedule/group-stage") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 68 69 (fontified t mouse-face highlight face org-link htmlize-link (:uri "http://www.bbc.com/sport/football/world-cup/2014/schedule/group-stage") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 69 70 (fontified t)) #("(planner-diary-insinuate)
;;  (setq mark-diary-entries-in-calendar t)
;;  (add-hook 'diary-display-hook 'fancy-diary-display)
;;  (planner-insinuate-calendar)
;;  (setq remember-handler-functions '(remember-planner-append))
;;  (setq remember-annotation-functions planner-annotation-functions)
(setq planner-carry-tasks-forward 0)
" 0 26 (fontified t) 26 30 (face font-lock-comment-delimiter-face fontified t) 30 70 (face font-lock-comment-face fontified t) 70 74 (face font-lock-comment-delimiter-face fontified t) 74 126 (face font-lock-comment-face fontified t) 126 130 (face font-lock-comment-delimiter-face fontified t) 130 159 (face font-lock-comment-face fontified t) 159 163 (face font-lock-comment-delimiter-face fontified t) 163 224 (face font-lock-comment-face fontified t) 224 228 (face font-lock-comment-delimiter-face fontified t) 228 294 (face font-lock-comment-face fontified t) 294 331 (fontified t)) #("(if (not (fboundp 'orig-require))
    (fset 'orig-require (symbol-function 'require))
  (message \"The code to redefine `require' should not be loaded twice\"))
 
(defvar my/require-depth 0)
 
(defun require (feature &optional filename noerror)
  \"Leave a trace of packages being loaded.\"
  (cond ((member feature features)
 	 (message \"%sRequiring `%s' (already loaded)\"
 		  (concat (make-string (* 2 my/require-depth) ? ) \"+-> \")
 		  feature))))
 	(t
 	 (message \"%sRequiring `%s'\"
 		  (concat (make-string (* 2 my/require-depth) ? )
 			  \"+-> \")
 		  feature)
 	 (let ((my/require-depth (+ 1 my/require-depth)))
 	   (orig-require feature filename noerror))
 	 (message \"%sRequiring `%s'...done\")
 		  (concat (make-string (* 2 my/require-depth) ? )
 			  \"+-> \"))" 0 1 (fontified t) 1 3 (face font-lock-keyword-face fontified t) 3 97 (fontified t) 97 120 (face font-lock-string-face fontified t) 120 127 (face (font-lock-constant-face font-lock-string-face) fontified t) 127 156 (face font-lock-string-face fontified t) 156 162 (fontified t) 162 168 (face font-lock-keyword-face fontified t) 168 169 (fontified t) 169 185 (face font-lock-variable-name-face fontified t) 185 192 (fontified t) 192 197 (face font-lock-keyword-face fontified t) 197 198 (fontified t) 198 205 (face font-lock-function-name-face fontified t) 205 215 (fontified t) 215 224 (face font-lock-type-face fontified t) 224 245 (fontified t) 245 286 (face font-lock-doc-face fontified t) 286 290 (fontified t) 290 294 (face font-lock-keyword-face fontified t) 294 334 (fontified t) 334 348 (face font-lock-string-face fontified t) 348 350 (face (font-lock-constant-face font-lock-string-face) fontified t) 350 369 (face font-lock-string-face fontified t) 369 423 (fontified t) 423 429 (face font-lock-string-face fontified t) 429 465 (fontified t) 465 479 (face font-lock-string-face fontified t) 479 481 (face (font-lock-constant-face font-lock-string-face) fontified t) 481 483 (face font-lock-string-face fontified t) 483 537 (fontified t) 537 543 (fontified t) 543 549 (face font-lock-string-face fontified t) 549 569 (fontified t) 569 572 (face font-lock-keyword-face fontified t) 572 675 (fontified t) 675 689 (face font-lock-string-face fontified t) 689 691 (face (font-lock-constant-face font-lock-string-face) fontified t) 691 700 (face font-lock-string-face fontified t) 700 761 (fontified t) 761 767 (face font-lock-string-face fontified t) 767 769 (fontified t)) #("
" 0 1 (font-lock-multiline t font-lock-fontified t org-category "mharp" fontified t)) #("(require 'muse)
(require 'muse-mode)
(require 'muse-colors)
(require 'muse-wiki)
(setq muse-wiki-allow-nonexistent-wikiword t)
(require 'muse-publish)
(require 'muse-html) ;;; allow derive style from \"html\" and \"xhtml\"
(require 'muse-xml)  ;;; allow derive style from \"xml\"
(require 'muse-latex)
(require 'muse-journal)
(require 'muse-project)  ;; publish files in projects
(setq muse-project-alist
      '((\"WikiPlanner\"
	 (\"~/Plans/\"           ;; where your Planner pages are located
	  :default \"TaskPool\" ;; use value of `planner-default-page'
	  :major-mode planner-mode
	  :visit-link planner-visit-link)
	 
	 ;; This next part is for specifying where Planner pages
	 ;; should be published and what Muse publishing style to
	 ;; use.  In this example, we will use the XHTML publishing
	 ;; style.
	 
	 (:base \"planner-xhtml\"
		;; where files are published to
		;; (the value of `planner-publishing-directory', if
		;;  you have a configuration for an older version
		;;  of Planner)
		:path \"~/public_html/Plans\"))))


(require 'planner)

;;  (require 'planner)
;;  (require 'remember)
;;  (require 'remind)
;;  (require 'planner-id)
(require 'planner-diary)
(require 'org-journal)
" 0 1 (fontified t) 1 8 (face font-lock-keyword-face fontified t) 8 10 (fontified t) 10 14 (face font-lock-constant-face fontified t) 14 17 (fontified t) 17 24 (face font-lock-keyword-face fontified t) 24 26 (fontified t) 26 35 (face font-lock-constant-face fontified t) 35 38 (fontified t) 38 45 (face font-lock-keyword-face fontified t) 45 47 (fontified t) 47 58 (face font-lock-constant-face fontified t) 58 61 (fontified t) 61 68 (face font-lock-keyword-face fontified t) 68 70 (fontified t) 70 79 (face font-lock-constant-face fontified t) 79 81 (fontified t) 81 128 (fontified t) 128 135 (face font-lock-keyword-face fontified t) 135 137 (fontified t) 137 149 (face font-lock-constant-face fontified t) 149 152 (fontified t) 152 159 (face font-lock-keyword-face fontified t) 159 161 (fontified t) 161 170 (face font-lock-constant-face fontified t) 170 172 (fontified t) 172 176 (face font-lock-comment-delimiter-face fontified t) 176 219 (face font-lock-comment-face fontified t) 219 220 (fontified t) 220 227 (face font-lock-keyword-face fontified t) 227 229 (fontified t) 229 237 (face font-lock-constant-face fontified t) 237 240 (fontified t) 240 244 (face font-lock-comment-delimiter-face fontified t) 244 274 (face font-lock-comment-face fontified t) 274 275 (fontified t) 275 282 (face font-lock-keyword-face fontified t) 282 284 (fontified t) 284 294 (face font-lock-constant-face fontified t) 294 297 (fontified t) 297 304 (face font-lock-keyword-face fontified t) 304 306 (fontified t) 306 318 (face font-lock-constant-face fontified t) 318 321 (fontified t) 321 328 (face font-lock-keyword-face fontified t) 328 330 (fontified t) 330 342 (face font-lock-constant-face fontified t) 342 345 (fontified t) 345 348 (face font-lock-comment-delimiter-face fontified t) 348 374 (face font-lock-comment-face fontified t) 374 408 (fontified t) 408 421 (face font-lock-string-face fontified t) 421 425 (fontified t) 425 435 (face font-lock-string-face fontified t) 435 446 (fontified t) 446 449 (face font-lock-comment-delimiter-face fontified t) 449 486 (face font-lock-comment-face fontified t) 486 489 (fontified t) 489 497 (face font-lock-builtin-face fontified t) 497 498 (fontified t) 498 508 (face font-lock-string-face fontified t) 508 509 (fontified t) 509 512 (face font-lock-comment-delimiter-face fontified t) 512 526 (face font-lock-comment-face fontified t) 526 546 (face (font-lock-constant-face font-lock-comment-face) fontified t) 546 548 (face font-lock-comment-face fontified t) 548 551 (fontified t) 551 562 (face font-lock-builtin-face fontified t) 562 579 (fontified t) 579 590 (face font-lock-builtin-face fontified t) 590 611 (fontified t) 611 616 (fontified t) 616 619 (face font-lock-comment-delimiter-face fontified t) 619 672 (face font-lock-comment-face fontified t) 672 674 (fontified t) 674 677 (face font-lock-comment-delimiter-face fontified t) 677 731 (face font-lock-comment-face fontified t) 731 733 (fontified t) 733 736 (face font-lock-comment-delimiter-face fontified t) 736 792 (face font-lock-comment-face fontified t) 792 794 (fontified t) 794 797 (face font-lock-comment-delimiter-face fontified t) 797 804 (face font-lock-comment-face fontified t) 804 810 (fontified t) 810 815 (face font-lock-builtin-face fontified t) 815 816 (fontified t) 816 831 (face font-lock-string-face fontified t) 831 834 (fontified t) 834 837 (face font-lock-comment-delimiter-face fontified t) 837 866 (face font-lock-comment-face fontified t) 866 868 (fontified t) 868 871 (face font-lock-comment-delimiter-face fontified t) 871 886 (face font-lock-comment-face fontified t) 886 914 (face (font-lock-constant-face font-lock-comment-face) fontified t) 914 920 (face font-lock-comment-face fontified t) 920 922 (fontified t) 922 926 (face font-lock-comment-delimiter-face fontified t) 926 972 (face font-lock-comment-face fontified t) 972 974 (fontified t) 974 978 (face font-lock-comment-delimiter-face fontified t) 978 990 (face font-lock-comment-face fontified t) 990 992 (fontified t) 992 997 (face font-lock-builtin-face fontified t) 997 998 (fontified t) 998 1019 (face font-lock-string-face fontified t) 1019 1027 (fontified t) 1027 1034 (face font-lock-keyword-face fontified t) 1034 1036 (fontified t) 1036 1043 (face font-lock-constant-face fontified t) 1043 1046 (fontified t) 1046 1050 (face font-lock-comment-delimiter-face fontified t) 1050 1069 (face font-lock-comment-face fontified t) 1069 1073 (face font-lock-comment-delimiter-face fontified t) 1073 1093 (face font-lock-comment-face fontified t) 1093 1097 (face font-lock-comment-delimiter-face fontified t) 1097 1115 (face font-lock-comment-face fontified t) 1115 1119 (face font-lock-comment-delimiter-face fontified t) 1119 1141 (face font-lock-comment-face fontified t) 1141 1142 (fontified t) 1142 1149 (face font-lock-keyword-face fontified t) 1149 1151 (fontified t) 1151 1164 (face font-lock-constant-face fontified t) 1164 1167 (fontified t) 1167 1174 (face font-lock-keyword-face fontified t) 1174 1176 (fontified t) 1176 1187 (face font-lock-constant-face fontified t) 1187 1189 (fontified t)) #("#+end_src" 0 9 (face org-block-end-line font-lock-multiline t org-category "mharp" font-lock-fontified t fontified t)) #("#+begin_src emacs-lisp" 0 22 (face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t)) #("
" 0 1 (font-lock-multiline t font-lock-fontified t fontified t)) #("(require 'calfw)
(require 'calfw-org)
" 0 1 (fontified t) 1 8 (face font-lock-keyword-face fontified t) 8 10 (fontified t) 10 15 (face font-lock-constant-face fontified t) 15 18 (fontified t) 18 25 (face font-lock-keyword-face fontified t) 25 27 (fontified t) 27 36 (face font-lock-constant-face fontified t) 36 38 (fontified t)) #("(global-set-key (kbd \"C-c f\") 'iy-go-to-char)
(global-set-key (kbd \"C-c b\") 'iy-go-to-char-backward)
(global-set-key (kbd \"C-c ;\") 'iy-go-to-char-continue)
(global-set-key (kbd \"C-c ,\") 'iy-go-to-char-continue-backward)
(global-set-key (kbd \"C-c j\") 'ace-jump-mode)
" 0 21 (fontified t) 21 28 (face font-lock-string-face fontified t) 28 67 (fontified t) 67 74 (face font-lock-string-face fontified t) 74 122 (fontified t) 122 129 (face font-lock-string-face fontified t) 129 177 (fontified t) 177 184 (face font-lock-string-face fontified t) 184 241 (fontified t) 241 248 (face font-lock-string-face fontified t) 248 266 (fontified t)) #("
" 0 1 (font-lock-multiline t font-lock-fontified t org-category "mharp" fontified t)) #("(require 'xml-rpc)
(require 'dired+)
" 0 1 (fontified t) 1 8 (face font-lock-keyword-face fontified t) 8 10 (fontified t) 10 17 (face font-lock-constant-face fontified t) 17 20 (fontified t) 20 27 (face font-lock-keyword-face fontified t) 27 29 (fontified t) 29 35 (face font-lock-constant-face fontified t) 35 37 (fontified t)) #(");; in mharp" 0 1 (fontified t) 1 4 (face font-lock-comment-delimiter-face fontified t) 4 12 (face font-lock-comment-face fontified t)) #("(require 'iy-go-to-char)
(require 'ace-jump-mode)
" 0 1 (fontified t) 1 8 (face font-lock-keyword-face fontified t) 8 10 (fontified t) 10 23 (face font-lock-constant-face fontified t) 23 26 (fontified t) 26 33 (face font-lock-keyword-face fontified t) 33 35 (fontified t) 35 48 (face font-lock-constant-face fontified t) 48 50 (fontified t)) #("(require 'auto-install)" 0 1 (fontified t) 1 8 (face font-lock-keyword-face fontified t) 8 10 (fontified t) 10 22 (face font-lock-constant-face fontified t) 22 23 (fontified t)) #("#+end_src" 0 9 (font-lock-multiline t face org-block-end-line org-category "mharp" font-lock-fontified t fontified t)) #("#+begin_src emacs-lisp" 0 22 (org-category "mharp" face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t)) "
    9832 02-05Jul
   Sholes Meade 691917
======================
 231 MIA LAX 1810 2030	5+20	   D D0	     
======================
   12+35
======================
2474 LAX DFW 0950 1455	3+05AA	     49	      
======================
   19+50
======================
1688 DFW LAS 1200 1245	2+45 0+55  L 49	      
1688 LAS DFW 1340 1825	2+45	     49	      
======================
   11+55
======================
1674 DFW MIA 0735 1125	2+50	   B 34 
======================
   13+40 6+20" "
" " 9832 02-05Jul" "======================" "SKD 05 34 1674 DFW 0735 B MIA 1125    2.50 " "SKD 04 49 1688 DFW 1200 L LAS 1245    2.45        0.55          
SKD 04 49 1688 LAS 1340   DFW 1825    2.45                      
" "SKD 03 49 2474 LAX 0950   DFW 1455 RA 3.05AA                    " "RSK 02 D0  231 MIA 1810 D LAX 2030    5.20                      " "SKD/04/34/ 27/MIA/1530/D/LAX/1810/5.40
SKD/05/49/200/LAX/0800/B/MIA/1555/4.55
" "FDPT  3.50         START  0735  END  1125  ACC STA  MIA       ¥ " "FDPT  7.25         START  1200  END  1925  ACC STA  MIA         " "HALF DAY COUNT DFW  2                                           " "FDPT  6.20         START  1710  END  2330  ACC STA  MIA         " "SKD 02 34  231 MIA 1810 D LAX 2030    5.20                      
" "CAPT HARPSTER M             EMP NBR 680672                      
    DT EQ  FLT STA DEP  M STA ARR  AC FLY    GTR  GRD     ACT   " "      BASE MIA  SEL 1812         DOM 767 R/A  29      " "SEQ" "HI5«                                                            " "HI5«                                                            
SEQ  9832       BASE MIA  SEL 1812         DOM 767 R/A  29      
CAPT HARPSTER M             EMP NBR 680672                      
    DT EQ  FLT STA DEP  M STA ARR  AC FLY    GTR  GRD     ACT   
SKD 02 34  231 MIA 1810 D LAX 2030    5.20                      
RSK 02 D0  231 MIA 1810 D LAX 2030    5.20                      
D/P SKD  5.20        P/C  0.00  TL  5.20                        
HALF DAY COUNT LAX  2                                           
SKD ONDUTY  6.35 ODL  12.35                                     
FDPT  6.20         START  1710  END  2330  ACC STA  MIA         
SKD 03 49 2474 LAX 0950   DFW 1455 RA 3.05AA                    
D/P SKD  0.00        P/C  3.05D TL  3.05                        
HALF DAY COUNT DFW  2                                           
SKD ONDUTY  3.50 ODL  19.50                                     
SKD 04 49 1688 DFW 1200 L LAS 1245    2.45        0.55          
SKD 04 49 1688 LAS 1340   DFW 1825    2.45                      
D/P SKD  5.30        P/C  0.00  TL  5.30                        
HALF DAY COUNT DFW  2                                           
SKD ONDUTY  7.40 ODL  11.55                                     
FDPT  7.25         START  1200  END  1925  ACC STA  MIA         
SKD 05 34 1674 DFW 0735 B MIA 1125    2.50                      
D/P SKD  2.50        P/C  3.15G TL  6.05                        
SKD ONDUTY  4.05                                                
FDPT  3.50         START  0735  END  1125  ACC STA  MIA       ¥ 
                                                                
" #("*** Navigation

From http://stackoverflow.com/questions/15011703/is-there-an-emacs-org-mode-command-to-jump-to-an-org-heading
#+begin_src emacs-lisp
  (setq org-goto-interface 'outline
        org-goto-max-level 10)
  (require 'imenu)
  (bind-key \"M-o\" 'imenu)
  (bind-key \"C-c j\" 'org-clock-goto) ;; jump to current task from anywhere
  (setq org-cycle-include-plain-lists 'integrate)
#+end_src

*** Link Org subtrees and navigate between them
The following code makes it easier for me to link trees with entries, as in http://sachachua.com/evil-plans

#+begin_src emacs-lisp
;;(defun sacha/org-follow-entry-link ()
;;  \"Follow the defined link for this entry.\"
;;  (interactive)
;;  (if (org-entry-get (point) \"LINK\")
;;      (org-open-link-from-string (org-entry-get (point) \"LINK\"))
;;    (org-open-at-point)))

;;(bind-key \"C-c o\" 'sacha/org-follow-entry-link org-mode-map)

(defun sacha/org-link-projects (location)
  \"Add link properties between the current subtree and the one specified by LOCATION.\"
  (interactive
   (list (let ((org-refile-use-cache nil))
     (org-refile-get-location \"Location\"))))
  (let ((link1 (org-store-link nil)) link2)
    (save-window-excursion
      (org-refile 4 nil location)
      (setq link2 (org-store-link nil))
      (org-set-property \"LINK\" link1))
    (org-set-property \"LINK\" link2)))
#+end_src

*** Taking notes

    My org files are in my =personal= directory, which is actually a
    symlink to a directory in my Dropbox. That way, I can update my
    Org files from multiple computers.
    
#+begin_src emacs-lisp
  (setq org-directory \"~/personal\")
  (setq org-default-notes-file \"~/personal/organizer.org\")
#+end_src

This makes it easier to add links from outside.

#+begin_src emacs-lisp
(defun sacha/yank-more ()
  (interactive)
  (insert \"[[\")
  (yank)
  (insert \"][more]]\"))
(global-set-key (kbd \"<f6>\") 'sacha/yank-more)
#+end_src

**** Templates

     I use =org-capture= templates to quickly jot down tasks, ledger
     entries, notes, and other semi-structured pieces of information.
#+begin_src emacs-lisp     
  (defvar sacha/org-basic-task-template \"* TODO %^{Task}    
  SCHEDULED: %^t
  %?
  :PROPERTIES:
  :Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}
  :END:\" \"Basic task data\")
  (setq org-capture-templates
        `((\"t\" \"Tasks\" entry 
           (file+headline \"~/personal/organizer.org\" \"Tasks\")
           ,sacha/org-basic-task-template)
          (\"b\" \"Business task\" entry
           (file+headline \"~/personal/business.org\" \"Tasks\")
           ,sacha/org-basic-task-template)
          (\"p\" \"People task\" entry
           (file+headline \"~/personal/people.org\" \"Tasks\")
           ,sacha/org-basic-task-template)
          (\"db\" \"Done - Business\" entry
           (file+headline \"~/personal/business.org\" \"Tasks\")
           \"* DONE %^{Task}\\nSCHEDULED: %^t\\n%?\")
          (\"dp\" \"Done - People\" entry
           (file+headline \"~/personal/people.org\" \"Tasks\")
           \"* DONE %^{Task}\\nSCHEDULED: %^t\\n%?\")
          (\"dt\" \"Done - Task\" entry
           (file+headline \"~/personal/organizer.org\" \"Tasks\")
           \"* DONE %^{Task}\\nSCHEDULED: %^t\\n%?\")
          (\"q\" \"Quick note\" item
           (file+headline \"~/personal/organizer.org\" \"Quick notes\"))
          (\"l\" \"Ledger entries\")
          (\"lm\" \"MBNA\" plain
           (file \"~/personal/ledger\")
           \"%(org-read-date) %^{Payee}
    Liabilities:MBNA  
    Expenses:%^{Account}  $%^{Amount}
  \" :immediate-finish)
          (\"ln\" \"No Frills\" plain
           (file \"~/personal/ledger\")
           \"%(let ((org-read-date-prefer-future nil)) (org-read-date)) * No Frills
    Liabilities:MBNA  
    Assets:Wayne:Groceries  $%^{Amount}
  \" :immediate-finish)    
          (\"lc\" \"Cash\" plain
           (file \"~/personal/ledger\")
           \"%(org-read-date) * %^{Payee}
    Expenses:Cash 
    Expenses:%^{Account}  %^{Amount}
  \")             
          (\"b\" \"Book\" entry
           (file+datetree \"~/personal/books.org\" \"Inbox\")
           \"* %^{Title}  %^g
  %i
  ,*Author(s):* %^{Author} \\\\\\\\
  ,*ISBN:* %^{ISBN}

  %?

  ,*Review on:* %^t \\\\
  %a
  %U\"
           :clock-in :clock-resume)
           (\"c\" \"Contact\" entry (file \"~/personal/contacts.org\")
            \"* %(org-contacts-template-name)
  :PROPERTIES:
  :EMAIL: %(org-contacts-template-email)
  :END:\")
           (\"n\" \"Daily note\" table-line (file+olp \"~/personal/organizer.org\" \"Daily notes\")
            \"| %u | %^{Note} |\"
            :immediate-finish)
           (\"r\" \"Notes\" entry
            (file+datetree \"~/personal/organizer.org\")
            \"* %?\\n\\n%i\\n\"
            )))
  (bind-key \"C-M-r\" 'org-capture)
#+end_src
***** Allow refiling in the middle(ish) of a capture

This lets me use =C-c C-r= to refile a capture and then jump to the
new location. I wanted to be able to file tasks under projects so that
they could inherit the QUANTIFIED property that I use to track time
(and any Beeminder-related properties too), but I also wanted to be
able to clock in on them.

#+begin_src emacs-lisp
  (defun sacha/org-capture-refile-and-jump ()
    (interactive)
    (org-capture-refile)
    (org-refile-goto-last-stored))
  (require 'org-capture)
  (bind-key \"C-c C-r\" 'sacha/org-capture-refile-and-jump org-capture-mode-map)
#+end_src

**** Refiling

=org-refile= lets you organize notes by typing in the headline to file them under.

    #+begin_src emacs-lisp
      (setq org-reverse-note-order t)
      (setq org-refile-use-outline-path nil)
      (setq org-refile-allow-creating-parent-nodes 'confirm)
      (setq org-refile-use-cache nil)
      (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
      (setq org-blank-before-new-entry nil)
    #+end_src
    
**** Estimating WPM

     I'm curious about how fast I type some things.
#+begin_src emacs-lisp
;;(require 'org-clock)
;;(defun sacha/org-entry-wpm ()
;;  (interactive)
;;  (save-restriction
;;    (save-excursion
;;      (org-narrow-to-subtree)
;;      (goto-char (point-min))
;;      (let* ((words (count-words-region (point-min) (point-max)))
;;	     (minutes (org-clock-sum-current-item))
;;	     (wpm (/ words minutes)))
;;	(message \"WPM: %d (words: %d, minutes: %d)\" wpm words minutes)
;;	(kill-new (number-to-string wpm))))))
#+end_src

*** Managing tasks
**** Track TODO state
<<todo-keywords>>

The parentheses indicate keyboard shortcuts that I can use to set the task state. @ and ! toggle logging.

#+begin_src emacs-lisp
       (setq org-todo-keywords
        '((sequence
           \"TODO(t)\"  ; next action
           \"TOBLOG(b)\"  ; next action
           \"STARTED(s)\"
           \"WAITING(w@/!)\"
           \"SOMEDAY(.)\" \"|\" \"DONE(x!)\" \"CANCELLED(c@)\")
          (sequence \"TODELEGATE(-)\" \"DELEGATED(d)\" \"COMPLETE(x)\")))
#+end_src

#+begin_src emacs-lisp
(setq org-todo-keyword-faces
      '((\"TODO\" . (:foreground \"green\" :weight bold))
        (\"DONE\" . (:foreground \"cyan\" :weight bold))
        (\"WAITING\" . (:foreground \"red\" :weight bold))
        (\"SOMEDAY\" . (:foreground \"gray\" :weight bold))))
#+end_src     

**** Projects

Projects are headings with the =:project:= tag, so we generally don't
want that tag inherited, except when we display unscheduled tasks that
don't belong to any projects.

     #+begin_src emacs-lisp
       (setq org-tags-exclude-from-inheritance '(\"project\"))
     #+end_src

This code makes it easy for me to focus on one project and its tasks.

#+begin_src emacs-lisp
  (add-to-list 'org-speed-commands-user '(\"N\" org-narrow-to-subtree))
  (add-to-list 'org-speed-commands-user '(\"W\" widen))
  (defun sacha/org-agenda-for-subtree ()
    (interactive)
    (if (derived-mode-p 'org-agenda-mode)
      (let* ((marker (or (org-get-at-bol 'org-marker)
                         (org-agenda-error)))
             (hdmarker (or (org-get-at-bol 'org-hd-marker) marker))
             (pos (marker-position marker))
             (col (current-column))
             newhead)
        (org-with-remote-undo (marker-buffer marker)
          (with-current-buffer (marker-buffer marker)
            (widen)
            (let ((org-agenda-view-columns-initially t))
              (org-agenda nil \"t\" 'subtree)))))
      (let ((org-agenda-view-columns-initially t))
        (org-agenda nil \"t\" 'subtree))))
  (add-to-list 'org-speed-commands-user '(\"T\" sacha/org-agenda-for-subtree))
#+end_src

There's probably a proper way to do this, maybe with =<=. Oh, that would work nicely. =< C-c a t= too.

**** Tag tasks with GTD-ish contexts

This defines keyboard shortcuts for those, too.

     #+begin_src emacs-lisp
              (setq org-tag-alist '((\"@work\" . ?b) 
                                    (\"@home\" . ?h) 
                                    (\"@writing\" . ?w)
                                    (\"@errands\" . ?e) 
                                    (\"@drawing\" . ?d)
                                    (\"@coding\" . ?c)
                                    (\"@phone\" . ?p)
                                    (\"@reading\" . ?r)
                                    (\"@computer\" . ?l)
                                    (\"quantified\" . ?q)
                                    (\"lowenergy\" . ?0)
                                    (\"highenergy\" . ?1)))
     #+end_src
**** Enable filtering by effort estimates

That way, it's easy to see short tasks that I can finish.

#+begin_src emacs-lisp
  (add-to-list 'org-global-properties
        '(\"Effort_ALL\". \"0:05 0:15 0:30 1:00 2:00 3:00 4:00\"))
#+end_src
     
**** Track time

#+begin_src emacs-lisp
  (setq org-clock-idle-time nil)
  (setq org-log-done 'time)
  (setq org-clock-persist t)
  (org-clock-persistence-insinuate)
  (setq org-clock-report-include-clocking-task t)
  (defadvice org-clock-in (after sacha activate)
    \"Mark STARTED when clocked in.\"
    (save-excursion
      (catch 'exit
        (cond
         ((derived-mode-p 'org-agenda-mode)
          (let* ((marker (or (org-get-at-bol 'org-marker)
                             (org-agenda-error)))
                 (hdmarker (or (org-get-at-bol 'org-hd-marker) marker))
                 (pos (marker-position marker))
                 (col (current-column))
                 newhead)
            (org-with-remote-undo (marker-buffer marker)
              (with-current-buffer (marker-buffer marker)
                (widen)
                (goto-char pos)
                (org-back-to-heading t)
                (if (org-get-todo-state)
                    (org-todo \"STARTED\"))))))
         (t (if (org-get-todo-state)
                    (org-todo \"STARTED\")))))))
#+end_src
     
Too many clock entries clutter up a heading.

#+begin_src emacs-lisp
(setq org-log-into-drawer \"LOGBOOK\")
(setq org-clock-into-drawer 1)
#+end_src

**** Habits

     I like using org-habits to track consistency. My task names tend
     to be a bit long, though, so I've configured the graph column to
     show a little bit more to the right.
     
#+begin_src emacs-lisp
(setq org-habit-graph-column 80)
(setq org-habit-show-habits-only-for-today nil)
#+end_src

If you want to use habits, be sure to schedule your tasks and add a STYLE property with the value of =habit= to the tasks you want displayed.

*** Estimating tasks

From \"Add an effort estimate on the fly when clocking in\" on the
[[http://orgmode.org/worg/org-hacks.html][Org Hacks]] page:

#+begin_src emacs-lisp
(add-hook 'org-clock-in-prepare-hook
          'sacha/org-mode-ask-effort)

(defun sacha/org-mode-ask-effort ()
  \"Ask for an effort estimate when clocking in.\"
  (unless (org-entry-get (point) \"Effort\")
    (let ((effort
           (completing-read
            \"Effort: \"
            (org-entry-get-multivalued-property (point) \"Effort\"))))
      (unless (equal effort \"\")
        (org-set-property \"Effort\" effort)))))
#+end_src

# <<subset>>
*** Modifying org agenda so that I can display a subset of tasks

I want to create an agenda command that displays a list of tasks by
context. That way, I can quickly preview a bunch of contexts and
decide what I feel like doing the most.

#+begin_src emacs-lisp
  (defvar sacha/org-agenda-limit-items nil \"Number of items to show in agenda to-do views; nil if unlimited.\")
  (defadvice org-agenda-finalize-entries (around sacha activate)
    (if sacha/org-agenda-limit-items
        (progn
          (setq list (mapcar 'org-agenda-highlight-todo list))
          (setq ad-return-value
                (subseq list 0 sacha/org-agenda-limit-items))
          (when org-agenda-before-sorting-filter-function
            (setq list (delq nil (mapcar org-agenda-before-sorting-filter-function list))))
          (setq ad-return-value
                (mapconcat 'identity
                           (delq nil 
                                 (subseq
                                  (sort list 'org-entries-lessp)
                                  0
                                  sacha/org-agenda-limit-items))
                           \"\\n\")))
      ad-do-it))
#+end_src

*** Flexible scheduling of tasks

I (theoretically) want to be able to schedule tasks for dates like the first Saturday
of every month. Fortunately, [[http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month][someone else has figured that out!]]

#+begin_src emacs-lisp
;; Get this from https://raw.github.com/chenfengyuan/elisp/master/next-spec-day.el
;(load-file \"~/elisp/next-spec-day.el\")
#+end_src

*** Org agenda
**** Basic configuration
I have quite a few Org files, but I keep my agenda items and TODOs in
only a few of them them for faster scanning.

#+begin_src emacs-lisp
;;  (setq org-agenda-files '(
;;                           \"~/personal/organizer.org\"
;;                           \"~/personal/people.org\"
;;                           \"~/personal/business.org\"
;;                           \"~/Dropbox/public/sharing/index.org\"
;;                           \"~/dropbox/public/learning.org\"
;;                           \"~/code/emacs-notes/tasks.org\"
;;                           \"~/sachac.github.io/evil-plans/index.org\"
;;                           \"~/personal/routines.org\"
;;                           ))
#+end_src

I like looking at two days at a time when I plan using the Org
agenda. I want to see my log entries, but I don't want to see
scheduled items that I've finished. I like seeing a time grid so that
I can get a sense of how appointments are spread out.

#+begin_src emacs-lisp
  (setq org-agenda-span 2)
  (setq org-agenda-sticky nil)
  (setq org-agenda-show-log t)
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-time-grid
        '((daily today require-timed)
         \"----------------\"
         (800 1000 1200 1400 1600 1800)))
  (setq org-columns-default-format \"%50ITEM %12SCHEDULED %TODO %3PRIORITY %Effort{:} %TAGS\")
#+end_src

Some other keyboard shortcuts:

#+begin_src emacs-lisp
(bind-key \"Y\" 'org-agenda-todo-yesterday org-agenda-mode-map)
#+end_src

# <<project_subtasks>>
**** Starting my weeks on Saturday

I like looking at weekends as [[http://sachachua.com/blog/2010/11/week-beginnings/][week beginnings]] instead, so I want the
Org agenda to start on Saturdays.

#+begin_src emacs-lisp
;;(setq org-agenda-start-on-weekday 6)
#+end_src

**** Display projects with associated subtasks

I wanted a view that showed projects with a few subtasks underneath
them. Here's a sample of the output:

#+begin_example
Headlines with TAGS match: +PROJECT
Press `C-u r' to search again with new search string
  organizer:  Set up communication processes for Awesome Foundation Toronto
  organizer:  TODO Announce the next pitch night
  organizer:  TODO Follow up with the winner of the previous pitch night for any news to include in the updates

  organizer:  Tidy up the house so that I can find things quickly
  organizer:  TODO Inventory all the things in closets and boxes         :@home:
  organizer:  TODO Drop things off for donation                       :@errands:

  organizer:  Learn how to develop for Android devices
#+end_example

#+begin_src emacs-lisp  
  (defun sacha/org-agenda-project-agenda ()
    \"Return the project headline and up to `sacha/org-agenda-limit-items' tasks.\"
    (save-excursion
      (let* ((marker (org-agenda-new-marker))
             (heading
              (org-agenda-format-item \"\" (org-get-heading) (org-get-category) nil))
             (org-agenda-restrict t)
             (org-agenda-restrict-begin (point))
             (org-agenda-restrict-end (org-end-of-subtree 'invisible))
             ;; Find the TODO items in this subtree
             (list (org-agenda-get-day-entries (buffer-file-name) (calendar-current-date) :todo)))
        (org-add-props heading
            (list 'face 'defaults
                  'done-face 'org-agenda-done
                  'undone-face 'default
                  'mouse-face 'highlight
                  'org-not-done-regexp org-not-done-regexp
                  'org-todo-regexp org-todo-regexp
                  'org-complex-heading-regexp org-complex-heading-regexp
                  'help-echo
                  (format \"mouse-2 or RET jump to org file %s\"
                          (abbreviate-file-name
                           (or (buffer-file-name (buffer-base-buffer))
                               (buffer-name (buffer-base-buffer))))))
          'org-marker marker
          'org-hd-marker marker
          'org-category (org-get-category)
          'type \"tagsmatch\")
        (concat heading \"\\n\"
                (org-agenda-finalize-entries list)))))
          
    (defun sacha/org-agenda-projects-and-tasks (match)
      \"Show TODOs for all `org-agenda-files' headlines matching MATCH.\"
      (interactive \"MString: \")
      (let ((todo-only nil))
        (if org-agenda-overriding-arguments
            (setq todo-only (car org-agenda-overriding-arguments)
                  match (nth 1 org-agenda-overriding-arguments)))
        (let* ((org-tags-match-list-sublevels
                org-tags-match-list-sublevels)
               (completion-ignore-case t)
               rtn rtnall files file pos matcher
               buffer)
          (when (and (stringp match) (not (string-match \"\\\\S-\" match)))
            (setq match nil))
          (setq matcher (org-make-tags-matcher match)
                match (car matcher) matcher (cdr matcher))
          (catch 'exit
            (if org-agenda-sticky
                (setq org-agenda-buffer-name
                      (if (stringp match)
                          (format \"*Org Agenda(%s:%s)*\"
                                  (or org-keys (or (and todo-only \"M\") \"m\")) match)
                        (format \"*Org Agenda(%s)*\" (or (and todo-only \"M\") \"m\")))))
            (org-agenda-prepare (concat \"TAGS \" match))
            (org-compile-prefix-format 'tags)
            (org-set-sorting-strategy 'tags)
            (setq org-agenda-query-string match)
            (setq org-agenda-redo-command
                  (list 'org-tags-view `(quote ,todo-only)
                        (list 'if 'current-prefix-arg nil `(quote ,org-agenda-query-string))))
            (setq files (org-agenda-files nil 'ifmode)
                  rtnall nil)
            (while (setq file (pop files))
              (catch 'nextfile
                (org-check-agenda-file file)
                (setq buffer (if (file-exists-p file)
                                 (org-get-agenda-file-buffer file)
                               (error \"No such file %s\" file)))
                (if (not buffer)
                    ;; If file does not exist, error message to agenda
                    (setq rtn (list
                               (format \"ORG-AGENDA-ERROR: No such org-file %s\" file))
                          rtnall (append rtnall rtn))
                  (with-current-buffer buffer
                    (unless (derived-mode-p 'org-mode)
                      (error \"Agenda file %s is not in `org-mode'\" file))
                    (save-excursion
                      (save-restriction
                        (if org-agenda-restrict
                            (narrow-to-region org-agenda-restrict-begin
                                              org-agenda-restrict-end)
                          (widen))
                        (setq rtn (org-scan-tags 'sacha/org-agenda-project-agenda matcher todo-only))
                        (setq rtnall (append rtnall rtn))))))))
            (if org-agenda-overriding-header
                (insert (org-add-props (copy-sequence org-agenda-overriding-header)
                            nil 'face 'org-agenda-structure) \"\\n\")
              (insert \"Headlines with TAGS match: \")
              (add-text-properties (point-min) (1- (point))
                                   (list 'face 'org-agenda-structure
                                         'short-heading
                                         (concat \"Match: \" match)))
              (setq pos (point))
              (insert match \"\\n\")
              (add-text-properties pos (1- (point)) (list 'face 'org-warning))
              (setq pos (point))
              (unless org-agenda-multi
                (insert \"Press `C-u r' to search again with new search string\\n\"))
              (add-text-properties pos (1- (point)) (list 'face 'org-agenda-structure)))
            (org-agenda-mark-header-line (point-min))
            (when rtnall
              (insert (mapconcat 'identity rtnall \"\\n\") \"\"))
            (goto-char (point-min))
            (or org-agenda-multi (org-agenda-fit-window-to-buffer))
            (add-text-properties (point-min) (point-max)
                                 `(org-agenda-type tags
                                                   org-last-args (,todo-only ,match)
                                                   org-redo-cmd ,org-agenda-redo-command
                                                   org-series-cmd ,org-cmd))
            (org-agenda-finalize)
            (setq buffer-read-only t)))))
#+end_src

# <<agenda_commands>>

**** Org agenda custom commands

There are quite a few custom commands here, and I often forget to use
them. =) But it's good to define them, and over time, I'll get the
hang of using these more!

| Key         | Description                                                                                    |
| .           | What am I waiting for?                                                                         |
| T           | Not really an agenda command - shows the to-do tree in the current file                        |
| b           | Shows business-related tasks                                                                   |
| o           | Shows personal tasks and miscellaneous tasks (o: organizer)                                    |
| w           | Show all tasks for the upcoming week                                                           |
| W           | Show all tasks for the upcoming week, aside from the routine ones                              |
| g ...       | Show tasks by context: b - business; c - coding; w - writing; p - phone; d - drawing, h - home |
| 0           | Show common contexts with up to 3 tasks each, so that I can choose what I feel like working on |
| ) (shift-0) | Show common contexts with all the tasks associated with them                                   |
| 9           | Show common contexts with up to 3 unscheduled tasks each                                       |
| ( (shift-9) | Show common contexts with all the unscheduled tasks associated with them                       |
| d           | Timeline for today (agenda, clock summary)                                                     |
| u           | Unscheduled tasks to do if I have free time                                                    |
| U           | Unscheduled tasks that are not part of projects                                                |
| P           | Tasks by priority                                                                              |
| p           | My projects                                                                                    |
| 2           | Projects with tasks                                                                            |

#+begin_src emacs-lisp
    (defvar sacha/org-agenda-contexts
      '((tags-todo \"+@phone\")
        (tags-todo \"+@work\")
        (tags-todo \"+@drawing\")
        (tags-todo \"+@coding\")
        (tags-todo \"+@writing\")
        (tags-todo \"+@computer\")
        (tags-todo \"+@home\")
        (tags-todo \"+@errands\"))
      \"Usual list of contexts.\")
    (defun sacha/org-agenda-skip-scheduled ()
      (org-agenda-skip-entry-if 'scheduled 'deadline 'regexp \"\\n]+>\"))
    (setq org-agenda-custom-commands
          `((\"T\" todo-tree \"TODO\")
            (\"b\" todo \"\"
             ((org-agenda-files '(\"~/personal/business.org\"))))
            (\"o\" todo \"\"
             ((org-agenda-files '(\"~/personal/organizer.org\"))))
            (\"c\" todo \"\"
             ((org-agenda-prefix-format \"\")
              (org-agenda-cmp-user-defined 'sacha/org-sort-agenda-items-todo)
              (org-agenda-view-columns-initially t)
              ))
            ;; Weekly review
            (\"w\" \"Weekly review\" agenda \"\"
             ((org-agenda-span 7)
              (org-agenda-log-mode 1)))
            (\"W\" \"Weekly review sans routines\" agenda \"\" 
             ((org-agenda-span 7) 
              (org-agenda-log-mode 1)
              (org-agenda-tag-filter-preset '(\"-routine\"))))
            (\"2\" \"Bi-weekly review\" agenda \"\" ((org-agenda-span 14) (org-agenda-log-mode 1)))
            (\"gb\" \"Business\" todo \"\"  
             ((org-agenda-files '(\"~/personal/business.org\"))
              (org-agenda-view-columns-initially t)))
            (\"gc\" \"Coding\" tags-todo \"@coding\" 
             ((org-agenda-view-columns-initially t)))
            (\"gw\" \"Writing\" tags-todo \"@writing\"
             ((org-agenda-view-columns-initially t)))
            (\"gp\" \"Phone\" tags-todo \"@phone\"
             ((org-agenda-view-columns-initially t)))
            (\"gd\" \"Drawing\" tags-todo \"@drawing\"
             ((org-agenda-view-columns-initially t)))
            (\"gh\" \"Home\" tags-todo \"@home\"
             ((org-agenda-view-columns-initially t)))
            (\"ge\" \"Errands\" tags-todo \"@errands\"
             ((org-agenda-view-columns-initially t)))
            (\"0\" \"Top 3 by context\"
             ,sacha/org-agenda-contexts
             ((org-agenda-sorting-strategy '(priority-up effort-down))
              (sacha/org-agenda-limit-items 3)))
            (\")\" \"All by context\"
             ,sacha/org-agenda-contexts
             ((org-agenda-sorting-strategy '(priority-down effort-down))
              (sacha/org-agenda-limit-items nil)))
            (\"9\" \"Unscheduled top 3 by context\"
             ,sacha/org-agenda-contexts
             ((org-agenda-skip-function 'sacha/org-agenda-skip-scheduled)
              (org-agenda-sorting-strategy '(priority-down effort-down))
              (sacha/org-agenda-limit-items 3)))
            (\"(\" \"All unscheduled by context\"
             ,sacha/org-agenda-contexts
             ((org-agenda-skip-function 'sacha/org-agenda-skip-scheduled)
              (org-agenda-sorting-strategy '(priority-down effort-down))
              ))
            (\"d\" \"Timeline for today\" ((agenda \"\" ))
             ((org-agenda-ndays 1)
              (org-agenda-show-log t)
              (org-agenda-log-mode-items '(clock closed))
              (org-agenda-clockreport-mode t)
              (org-agenda-entry-types '())))
            (\".\" \"Waiting for\" todo \"WAITING\")
            (\"u\" \"Unscheduled tasks\" tags-todo \"-someday-TODO=\\\"SOMEDAY\\\"-TODO=\\\"DELEGATED\\\"-TODO=\\\"WAITING\\\"-project\"
             ((org-agenda-skip-function 'sacha/org-agenda-skip-scheduled)
              (org-agenda-view-columns-initially t)
              (org-tags-exclude-from-inheritance '(\"project\"))
              (org-agenda-overriding-header \"Unscheduled TODO entries: \")
              (org-columns-default-format \"%50ITEM %TODO %3PRIORITY %Effort{:} %TAGS\")
              (org-agenda-sorting-strategy '(todo-state-up priority-down effort-up tag-up category-keep))))
            (\"U\" \"Unscheduled tasks outside projects\" tags-todo \"-project\"
             ((org-agenda-skip-function 'sacha/org-agenda-skip-scheduled)
              (org-tags-exclude-from-inheritance nil)
              (org-agenda-view-columns-initially t)
              (org-agenda-overriding-header \"Unscheduled TODO entries outside projects: \")
              (org-agenda-sorting-strategy '(todo-state-up priority-down tag-up category-keep effort-down))))
            (\"P\" \"By priority\"
             ((tags-todo \"+PRIORITY=\\\"A\\\"\")
              (tags-todo \"+PRIORITY=\\\"B\\\"\")
              (tags-todo \"+PRIORITY=\\\"\\\"\")
              (tags-todo \"+PRIORITY=\\\"C\\\"\"))
             ((org-agenda-prefix-format \"%-10c %-10T %e \")
              (org-agenda-sorting-strategy '(priority-down tag-up category-keep effort-down))))
            (\"pp\" tags \"+project-someday-TODO=\\\"DONE\\\"\"
             ((org-tags-exclude-from-inheritance '(\"project\"))
              (org-agenda-sorting-strategy '(priority-down tag-up category-keep effort-down))))
            (\"p.\" tags \"+project-TODO=\\\"DONE\\\"\"
             ((org-tags-exclude-from-inheritance '(\"project\"))
              (org-agenda-sorting-strategy '(priority-down tag-up category-keep effort-down))))
            (\"S\" tags-todo \"TODO=\\\"STARTED\\\"\")
            (\"2\" \"List projects with tasks\" sacha/org-agenda-projects-and-tasks
             \"+PROJECT\"
               ((sacha/org-agenda-limit-items 3)))))
  (bind-key \"<apps> a\" 'org-agenda)
#+end_src
**** Make it easy to mark a task as done

Great for quickly going through the to-do list. Gets rid of one
extra keystroke. ;)

#+begin_src emacs-lisp
(defun sacha/org-agenda-done (&optional arg)
  \"Mark current TODO as done.
This changes the line at point, all other lines in the agenda referring to
the same tree node, and the headline of the tree node in the Org-mode file.\"
  (interactive \"P\")
  (org-agenda-todo \"DONE\"))
;; Override the key definition for org-exit
(define-key org-agenda-mode-map \"x\" 'sacha/org-agenda-done)
#+end_src

**** Make it easy to mark a task as done and create a follow-up task

#+begin_src emacs-lisp
  (defun sacha/org-agenda-mark-done-and-add-followup ()
    \"Mark the current TODO as done and add another task after it.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings.\"
    (interactive)
    (org-agenda-todo \"DONE\")
    (org-agenda-switch-to)
    (org-capture 0 \"t\"))
;; Override the key definition
(define-key org-agenda-mode-map \"X\" 'sacha/org-agenda-mark-done-and-add-followup)
#+end_src

**** Capture something based on the agenda

#+begin_src emacs-lisp
(defun sacha/org-agenda-new ()
  \"Create a new note or task at the current agenda item.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings.\"
  (interactive)
  (org-agenda-switch-to)
  (org-capture 0))
;; New key assignment
(define-key org-agenda-mode-map \"N\" 'sacha/org-agenda-new)
#+end_src

**** Sorting by date and priority

#+begin_src emacs-lisp
  (setq org-agenda-sorting-strategy
        '((agenda time-up priority-down tag-up effort-up category-keep)
          (todo user-defined-up todo-state-up priority-down effort-up)
          (tags user-defined-up)
          (search category-keep)))
  (setq org-agenda-cmp-user-defined 'sacha/org-sort-agenda-items-user-defined)    
  (require 'cl)
  (defun sacha/org-get-context (txt)
    \"Find the context.\"
    (car (member-if
          (lambda (item) (string-match \"@\" item))
          (get-text-property 1 'tags txt))))
  
  (defun sacha/org-compare-dates (a b)
    \"Return 1 if A should go after B, -1 if B should go after A, or 0 if a = b.\"
    (cond
     ((and (= a 0) (= b 0)) nil)
     ((= a 0) 1)
     ((= b 0) -1)
     ((> a b) 1)
     ((< a b) -1)
     (t nil)))
  
  (defun sacha/org-complete-cmp (a b)
    (let* ((state-a (or (get-text-property 1 'todo-state a) \"\"))
           (state-b (or (get-text-property 1 'todo-state b) \"\")))
      (or
       (if (member state-a org-done-keywords-for-agenda) 1)
       (if (member state-b org-done-keywords-for-agenda) -1))))
  
  (defun sacha/org-date-cmp (a b)
    (let* ((sched-a (or (get-text-property 1 'org-scheduled a) 0))
           (sched-b (or (get-text-property 1 'org-scheduled b) 0))
           (deadline-a (or (get-text-property 1 'org-deadline a) 0))
           (deadline-b (or (get-text-property 1 'org-deadline b) 0)))
      (or
       (sacha/org-compare-dates
        (sacha/org-min-date sched-a deadline-a)
        (sacha/org-min-date sched-b deadline-b)))))
  
  (defun sacha/org-min-date (a b)
    \"Return the smaller of A or B, except for 0.\"
    (funcall (if (and (> a 0) (> b 0)) 'min 'max) a b))
  
  (defun sacha/org-sort-agenda-items-user-defined (a b)
    ;; compare by deadline, then scheduled date; done tasks are listed at the very bottom
    (or
     (sacha/org-complete-cmp a b)
     (sacha/org-date-cmp a b)))
  
  (defun sacha/org-context-cmp (a b)
    \"Compare CONTEXT-A and CONTEXT-B.\"
    (let ((context-a (sacha/org-get-context a))
          (context-b (sacha/org-get-context b)))
      (cond
       ((null context-a) +1)
       ((null context-b) -1)
       ((string< context-a context-b) -1)
       ((string< context-b context-a) +1)
       (t nil))))
  
  (defun sacha/org-sort-agenda-items-todo (a b)
    (or
     (org-cmp-time a b)
     (sacha/org-complete-cmp a b)
     (sacha/org-context-cmp a b)
     (sacha/org-date-cmp a b)
     (org-cmp-todo-state a b)
     (org-cmp-priority a b)
     (org-cmp-effort a b)))
#+end_src
     
**** Preventing things from falling through the cracks
This helps me keep track of unscheduled tasks, because I sometimes
forget to assign tasks a date. I also want to keep track of stuck projects.
#+begin_src emacs-lisp
(defun sacha/org-agenda-list-unscheduled (&rest ignore)
  \"Create agenda view for tasks that are unscheduled and not done.\"
  (let* ((org-agenda-todo-ignore-with-date t)
	 (org-agenda-overriding-header \"List of unscheduled tasks: \"))
    (org-agenda-get-todos)))
(setq org-stuck-projects
      '(\"+PROJECT-MAYBE-DONE\"
        (\"TODO\")
        nil
        \"\\\\<IGNORE\\\\>\"))
#+end_src

*** Weekly review

<<weekly-review>>

:PROPERTIES:
:CUSTOM_ID: weekly-review
:END:

I regularly post [[http://sachachua.com/blog/category/weekly][weekly reviews]] to keep track of what I'm done, remind me to plan for the upcoming week, and list blog posts, sketches, and links. I 


I want to try out grouping tasks by topic first, then breaking it
down into previous/next week.

#+begin_src emacs-lisp
  (defvar sacha/weekly-review-line-regexp 
    \"^  \\\\([^:]+\\\\): +\\\\(Sched[^:]+: +\\\\)?TODO \\\\(.*?\\\\)\\\\(?:[      ]+\\\\(:[[:alnum:]_@#%:]+:\\\\)\\\\)?[        ]*$\"
    \"Regular expression matching lines to include.\")
  (defvar sacha/weekly-done-line-regexp 
    \"^  \\\\([^:]+\\\\): +.*?\\\\(?:Clocked\\\\|Closed\\\\):.*?\\\\(?:TODO\\\\|DONE\\\\) \\\\(.*?\\\\)\\\\(?:[       ]+\\\\(:[[:alnum:]_@#%:]+:\\\\)\\\\)?[        ]*$\"
    \"Regular expression matching lines to include as completed tasks.\")

  (defun sacha/quantified-get-hours (category time-summary)
    \"Return the number of hours based on the time summary.\"
    (if (stringp category)
        (if (assoc category time-summary) (/ (cdr (assoc category time-summary)) 3600.0) 0)
      (apply '+ (mapcar (lambda (x) (sacha/quantified-get-hours x time-summary)) category))))

  (defun sacha/org-summarize-focus-areas ()
    \"Summarize previous and upcoming tasks as a list.\"
    (interactive)
    (let ((base-date (apply 'encode-time (org-read-date-analyze \"-fri\" nil '(0 0 0))))
          (line-re sacha/weekly-review-line-regexp)
          (done-re sacha/weekly-done-line-regexp)
          business relationships life business-next relationships-next life-next string 
          start end time-summary biz-time)
      (setq start (format-time-string \"%Y-%m-%d\" (days-to-time (- (time-to-number-of-days base-date) 6))))
      (setq end (format-time-string \"%Y-%m-%d\" (days-to-time (1+ (time-to-number-of-days base-date)))))
      (setq time-summary (quantified-summarize-time start end))
      (setq biz-time (sacha/quantified-get-hours \"Business\" time-summary))
      (save-window-excursion
        (org-agenda nil \"w\")
        (setq string (buffer-string))
        (with-temp-buffer
          (insert string)
          (goto-char (point-min))
          (while (re-search-forward line-re nil t)
            (cond
             ((string= (match-string 1) \"routines\") nil) ; skip routine tasks
             ((or (string= (match-string 1) \"business\") (string= (match-string 1) \"tasks\"))
              (add-to-list 'business-next (concat \"  - [ ] \" (match-string 3))))
             ((string= (match-string 1) \"people\")
              (add-to-list 'relationships-next (concat \"  - [ ] \" (match-string 3))))
             (t (add-to-list 'life-next (concat \"  - [ ] \" (match-string 3))))))))
      (save-window-excursion
        (org-agenda nil \"w\")
        (org-agenda-later -1)
        (org-agenda-log-mode 16)
        (setq string (buffer-string))
        ;; Get any completed tasks from the current week as well
        (org-agenda-later 1)
        (org-agenda-log-mode 16)
        (setq string (concat string \"\\n\" (buffer-string)))
        (with-temp-buffer
          (insert string)
          (goto-char (point-min))
          (while (re-search-forward done-re nil t)
            (cond
             ((string= (match-string 1) \"routines\") nil) ; skip routine tasks
             ((or (string= (match-string 1) \"business\") (string= (match-string 1) \"tasks\"))
              (add-to-list 'business (concat \"  - [X] \" (match-string 2))))
             ((string= (match-string 1) \"people\")
              (add-to-list 'relationships (concat \"  - [X] \" (match-string 2))))
             (t (add-to-list 'life (concat \"  - [X] \" (match-string 2))))))))
      (setq string
            (concat
             (format \"- *Business* (%.1fh - %d%%)\\n\" biz-time (/ biz-time 1.68))
             (mapconcat 'identity (sort business 'string<) \"\\n\") \"\\n\"
             (mapconcat 'identity (sort business-next 'string<) \"\\n\")
             \"\\n\"
             (format \"  - *Earn* (%.1fh - %d%% of Business)\\n\"
                     (sacha/quantified-get-hours \"Business - Earn\" time-summary)
                     (/ (sacha/quantified-get-hours \"Business - Earn\" time-summary) (* 0.01 biz-time)))
             (format \"  - *Build* (%.1fh - %d%% of Business)\\n\"
                     (sacha/quantified-get-hours \"Business - Build\" time-summary)
                     (/ (sacha/quantified-get-hours \"Business - Build\" time-summary) (* 0.01 biz-time)))
             (format \"    - *Drawing* (%.1fh)\\n\"
                     (sacha/quantified-get-hours '(\"Business - Build - Drawing\"
                                                   \"Business - Build - Book review\")  time-summary))
             (format \"    - *Delegation* (%.1fh)\\n\"
                     (sacha/quantified-get-hours \"Business - Build - Delegation\" time-summary))
             (format \"    - *Packaging* (%.1fh)\\n\"
                     (sacha/quantified-get-hours \"Business - Build - Packaging\" time-summary))
             (format \"    - *Paperwork* (%.1fh)\\n\"
                     (sacha/quantified-get-hours \"Business - Build - Paperwork\"  time-summary))
             (format \"  - *Connect* (%.1fh - %d%% of Business)\\n\"
                     (sacha/quantified-get-hours \"Business - Connect\" time-summary)
                     (/ (sacha/quantified-get-hours \"Business - Connect\" time-summary) (* 0.01 biz-time)))
             (format \"- *Relationships* (%.1fh - %d%%)\\n\"
                     (sacha/quantified-get-hours '(\"Discretionary - Social\"
                                                   \"Discretionary - Family\") time-summary)
                     (/ (sacha/quantified-get-hours '(\"Discretionary - Social\"
                                                      \"Discretionary - Family\") time-summary) 1.68))
             (mapconcat 'identity (sort relationships 'string<) \"\\n\") \"\\n\"
             (mapconcat 'identity (sort relationships-next 'string<) \"\\n\")
             \"\\n\"
             (format \"- *Discretionary - Productive* (%.1fh - %d%%)\\n\"
                     (sacha/quantified-get-hours \"Discretionary - Productive\" time-summary)
                     (/ (sacha/quantified-get-hours \"Discretionary - Productive\" time-summary) 1.68))
             (mapconcat 'identity (sort life 'string<) \"\\n\") \"\\n\"
             (mapconcat 'identity (sort life-next 'string<) \"\\n\") \"\\n\"
             (format \"  - *Writing* (%.1fh)\\n\"
                     (sacha/quantified-get-hours \"Discretionary - Productive - Writing\" time-summary))
             (format \"- *Discretionary - Play* (%.1fh - %d%%)\\n\"
                     (sacha/quantified-get-hours \"Discretionary - Play\" time-summary)
                     (/ (sacha/quantified-get-hours \"Discretionary - Play\" time-summary) 1.68))
                                          ;                 (format \"- *Discretionary - Travel* (%.1fh - %d%%)\\n\"
                                          ;                         (sacha/quantified-get-hours \"Discretionary - Travel\" time-summary)
                                          ;                         (/ (sacha/quantified-get-hours \"Discretionary - Travel\" time-summary) 1.68))
             (format \"- *Personal routines* (%.1fh - %d%%)\\n\"
                     (sacha/quantified-get-hours \"Personal\" time-summary)
                     (/ (sacha/quantified-get-hours \"Personal\" time-summary) 1.68))
             (format \"- *Unpaid work* (%.1fh - %d%%)\\n\"
                     (sacha/quantified-get-hours \"Unpaid work\" time-summary)
                     (/ (sacha/quantified-get-hours \"Unpaid work\" time-summary) 1.68))
             (format \"- *Sleep* (%.1fh - %d%% - average of %.1f per day)\\n\"
                     (sacha/quantified-get-hours \"Sleep\" time-summary)
                     (/ (sacha/quantified-get-hours \"Sleep\" time-summary) 1.68)
                     (/ (sacha/quantified-get-hours \"Sleep\" time-summary) 7)
                     )))
      (if (called-interactively-p 'any)
          (insert string)
        string)))
#+end_src

I use this to put together a quick summary of how I spent my time.

The following code makes it easy to add a line:

#+begin_src emacs-lisp
(defun sacha/org-add-line-item-task (task)
  (interactive \"MTask: \")
  (org-insert-heading)
  (insert \"[ ] \" task)
  (let ((org-capture-entry '(\"t\" \"Tasks\" entry
                             (file+headline \"~/personal/organizer.org\" \"Tasks\")
                             \"\")))
    (org-capture nil \"t\")
    (insert \"TODO \" task \"\\nSCHEDULED: <\" (org-read-date) \">\")))
(define-key org-mode-map (kbd \"C-c t\") 'sacha/org-add-line-item-task)
#+end_src

Now we put it all together...

#+begin_src emacs-lisp
;;  (defun sacha/org-prepare-weekly-review ()
;;    \"Prepare weekly review template.\"
;;    (interactive)
;;    (let ((base-date (apply 'encode-time (org-read-date-analyze \"-fri\" nil '(0 0 0))))
;;          start end)
;;      (setq start (format-time-string \"%Y-%m-%d\" (days-to-time (- (time-to-number-of-days base-date) 6))))
;;      (setq end (format-time-string \"%Y-%m-%d\" (days-to-time (1+ (time-to-number-of-days base-date)))))
;;        (insert
;;         (concat
;;          \"*** Weekly review: Week ending \" (format-time-string \"%B %e, %Y\" base-date) \"  :weekly:\\n\"
;;          \"*Blog posts*\\n\\n\"
;;          \"*Sketches*\\n\\n\" 
;;          (sacha/flickr-export-and-extract start end) \"\\n\"
;;          \"*Link round-up*\\n\\n\"
;;          (sacha/evernote-export-and-extract start end)
;;          \"\\n\\n*Focus areas and time review*\\n\\n\"
;;          (sacha/org-summarize-focus-areas)
;;          \"\\n\"))))
#+end_src
**** Flickr extract

#+begin_src emacs-lisp
;;  (defun sacha/flickr-extract-links-for-review (filename start end)
;;    \"Extract Flickr titles and URLs from FILENAME from START to END.
;;       The file should be a CSV downloaded by the Flickr metadata downloader.
;;       Start date and end date should be strings in the form yyyy-mm-dd.\"
;;    (interactive (list (read-file-name \"File: \")
;;                            (org-read-date)
;;                            (org-read-date)))
;;         (require 'csv)
;;         (let (list)
;;           (with-temp-buffer
;;             (insert-file-contents filename)
;;             (goto-char (point-min))
;;             (setq list
;;                   (mapconcat
;;                    (lambda (x) (concat \"- [[\" (car x) \"][\" (cdr x) \"]]\"))
;;                    (sort
;;                     (delq nil
;;                           (mapcar (lambda (x)
;;                                     (let ((title (cdr (assoc \"FileName\" x))))
;;                                       (if (and (not (string< title start))
;;                                                (string< title end))
;;                                           (cons (cdr (assoc \"URL\" x)) title))))
;;                                   (csv-parse-buffer t)))
;;                     (lambda (a b) (string<  (cdr a) (cdr b))))
;;                    \"\\n\"))
;;             (setq list
;;                   (replace-regexp-in-string \"\\\\([0-9]+\\\\)-\\\\([0-9]+\\\\)-\\\\([0-9]+\\\\)\"
;;                                             \"\\\\1.\\\\2.\\\\3\" list))
;;             (setq list
;;                   (replace-regexp-in-string \"\\\\[\\\"\" \"[\" list))
;;             (setq list
;;                   (replace-regexp-in-string \"\\\"
\\\\]\" \"]\" list)))
;;           (if (called-interactively-p 'any)
;;               (insert list)
;;             list)))
;;       
;;       (defun sacha/flickr-export-and-extract (start end)
;;         \"Download Flickr metadata and extract the relevant part.\"
;;         (shell-command \"c:/sacha/dropbox/bin/flickr.bat\")
;;         (sacha/flickr-extract-links-for-review \"c:/sacha/dropbox/bin/flickr_metadata.csv\" start end))
#+end_src

**** Link-related convenience functions

#+begin_src emacs-lisp
  (defun kensanata/resolve-redirect (url)
    \"Resolve shortened URL by launching `curl --head' and parsing the result.\"
    (let* ((curl (shell-command-to-string
                  (format \"curl --silent --head %s\" url)))
           (location (when (and (string-match \"^HTTP/1\\.1 301\" curl)
                                (string-match \"^Location: \\\\(.*\\\\)\" curl))
                       (match-string 1 curl))))
      (or location url)))
  
  (defun sacha/resolve-urls-in-region (beg end)
    \"Expand URLs between BEG and END.\"
    (interactive \"r\")
    (save-excursion
      (save-restriction
        (narrow-to-region beg end)
        (goto-char (point-min))
        (while (re-search-forward org-bracket-link-regexp nil t)
          (replace-match (save-match-data (kensanata/resolve-redirect
                                           (match-string 1))) t t nil 1))
        (goto-char (point-min))
        (while (re-search-forward org-link-re-with-space nil t)
          (replace-match (save-match-data (kensanata/resolve-redirect
                                           (match-string 0))) t t nil)))))
  
  (defun sacha/open-urls-in-region (beg end)
    \"Open URLs between BEG and END.\"
    (interactive \"r\")
    (save-excursion
      (save-restriction
        (narrow-to-region beg end)
        (goto-char (point-min))
        (while (re-search-forward org-plain-link-re nil t)
          (org-open-at-point)))))
#+end_src

**** Evernote-related extract
#+begin_src emacs-lisp
    (defun sacha/evernote-export-and-extract (start-date end-date)
      \"Extract notes created on or after START-DATE and before END-DATE.\"
      (let ((filename \"c:/sacha/tmp/Evernote.enex\"))
        (call-process 
         \"c:/Program Files (x86)/Evernote/Evernote/enscript.exe\"
         nil t t
         \"exportNotes\"
         \"/q\" (concat
               \" tag:roundup\"
               \" created:\" (replace-regexp-in-string \"-\" \"\" start-date)
               \" -created:\" (replace-regexp-in-string \"-\" \"\" end-date))
         \"/f\" filename)
        (sacha/evernote-extract-links-for-review filename)))
    
    (defun sacha/evernote-extract-links-for-review (filename)
      \"Extract note names and URLs from FILENAME.
         The file should be an ENEX export.\"
      (interactive (list (read-file-name \"File: \")
                         (org-read-date)
                         (org-read-date)))
      (let (list)
        (with-temp-buffer
          (insert-file-contents filename)
          (goto-char (point-min))
          (while (re-search-forward \"<title>\\\\(.+?\\\\)</title>\\\\(.*?\\n\\\\)*?.*?href=\\\"\\\\(.*?\\\\)\\\"\" nil t)
            (setq list
                  (cons
                   (cons
                    (match-string-no-properties 1)
                    (match-string-no-properties 3)) list))))
        (setq list
              (mapconcat (lambda (x)
                           (concat \"- [[\"
                                   (kensanata/resolve-redirect (cdr x))
                                   \"][\" (car x) \"]]: \")) list \"\\n\"))
              (if (called-interactively-p 'any)
                  (insert list)
                list)))
#+end_src
*** Moving lines around

This makes it easier to reorganize lines in my weekly review.
#+begin_src emacs-lisp
  (defun sacha/org-move-line-to-destination ()
    \"Moves the current list item to <<destination>> in the current buffer.\"
    (interactive)
    (save-window-excursion
      (save-excursion
        (let ((string
               (buffer-substring-no-properties
                (line-beginning-position) (line-end-position))))
          (delete-region (line-beginning-position) (1+ (line-end-position)))
          (goto-char (point-min))
          (re-search-forward \"<<destination>>\" nil t)
          (insert \"\\n\" (make-string (- (match-beginning 0) (line-beginning-position)) ?\\ ) (s-trim string))))))
  (bind-key \"C-c d\" 'sacha/org-move-line-to-destination org-mode-map)
#+end_src

*** Monthly reviews

<<monthly-reviews>>

I want to be able to see what I worked on in a month so that I can write my [[http://sachachua.com/blog/category/monthly][monthly reviews]]. This code makes it easy to display a month's clocked tasks and time. I haven't been particularly thorough in tracking time before, but now that I have a shortcut that logs in Quantified Awesome as well as in Org, I should end up clocking more.

#+begin_src emacs-lisp
  (defun sacha/org-review-month (start-date)
    \"Review the month's clocked tasks and time.\"
    (interactive (list (org-read-date)))
    ;; Set to the beginning of the month
    (setq start-date (concat (substring start-date 0 8) \"01\"))
    (let ((org-agenda-show-log t)
          (org-agenda-start-with-log-mode t)
          (org-agenda-start-with-clockreport-mode t)
          (org-agenda-clockreport-parameter-plist '(:link t :maxlevel 3)))
      (org-agenda-list nil start-date 'month)))
#+end_src

*** Viewing, navigating, and editing the Org tree

    I often cut and paste subtrees. This makes it easier to cut
    something and paste it elsewhere in the hierarchy.
    #+begin_src emacs-lisp
      (eval-after-load 'org
        '(progn
           (bind-key \"C-c k\" 'org-cut-subtree org-mode-map)
           (setq org-yank-adjusted-subtrees t)))
#+end_src
*** Fix timestamps in Flickr links

Photosync (for syncing with Flickr) can't deal with periods in filenames. Org gets confused with dashes in timestamps that are in link text. Solution? Save files with dashes, then use a little code to replace dashes in the region.

#+begin_src emacs-lisp
(defun sacha/fix-flickr-list (beg end)
  (interactive \"r\")
  (save-excursion (save-restriction
    (narrow-to-region beg end)
    (goto-char (point-min))
    (while (re-search-forward \"\\\\([0-9]+\\\\)-\\\\([0-9]+\\\\)-\\\\([0-9]+\\\\)\" nil t)
      (replace-match (concat (match-string 1) \".\" (match-string 2) \".\" (match-string 3)) nil t)))))
#+end_src
*** Organize my blog index

#+begin_src emacs-lisp
  (defun sacha/org-file-blog-index-entries (beg end location)
    \"Copy entries into blog.org.\"
    (interactive
     (list
      (if (region-active-p) (point) (line-beginning-position))
      (if (region-active-p) (mark) (1+ (line-end-position)))
      (let ((org-refile-targets
             '((\"~/Dropbox/Public/sharing/blog.org\" . (:maxlevel . 3)))))
        (org-refile-get-location \"Location\"))))
    (let ((s
           (replace-regexp-in-string
            \"^ +- \"
            \"- [X] \"
            (buffer-substring-no-properties beg end))))
      (save-window-excursion
        (save-excursion
          (find-file (nth 1 location))
          (save-excursion
            (save-restriction
              (widen)
              (goto-char (nth 3 location))
              (looking-at org-outline-regexp)
              (forward-line 1)
              (insert s)
              (org-update-statistics-cookies nil)))))))
  (bind-key \"C-c f\" 'sacha/org-file-blog-index-entries org-mode-map)
#+end_src

*** Publishing
Timestamps and section numbers make my published files look more
complicated than they are. Let's turn them off by default.

#+begin_src emacs-lisp
(setq org-export-with-section-numbers nil)
(setq org-html-include-timestamps nil)
#+end_src

Some code for Emacs chats:


This makes it easier to publish my public Dropbox files:

#+begin_src emacs-lisp
    (setq sacha/emacs-notes-directory \"c:/sacha/code/emacs-notes\")
    (setq org-publish-project-alist
          '((\"public\"
             :base-directory \"c:/sacha/Dropbox/public\"
             :publishing-directory \"c:/sacha/Dropbox/public\"
             :publishing-function sacha/org-html-publish-to-html-trustingly
             )
            (\"sharing\"
             :base-directory \"c:/sacha/Dropbox/public/sharing\"
             :publishing-directory \"c:/sacha/Dropbox/public/sharing\"
             :publishing-function sacha/org-html-publish-to-html-trustingly
             )
            (\"emacs-config\"
             :base-directory \"c:/sacha/.emacs.d\"
             :publishing-directory \"c:/sacha/.emacs.d\"
             :publishing-function sacha/org-html-publish-to-html-trustingly
             )))
#+end_src

I want to easily publish some files. If a file is in a publishing project, publish it.

#+begin_src emacs-lisp
  (defun sacha/org-publish-maybe ()
    (interactive)
    (save-excursion
      (when (org-publish-get-project-from-filename
             (buffer-file-name (buffer-base-buffer)) 'up)
        (org-publish-current-file))))
  (bind-key \"C-c C-p C-p\" 'sacha/org-publish-maybe org-mode-map)
#+end_src
**** Org2blog

I use org2blog to post to my blog, which is Wordpress-based. I used to
use punchagan's org2blog, but there's a completely different one in
ELPA, so I figured I'd give that a try.

#+begin_src emacs-lisp
(sacha/package-install 'org2blog)
(require 'org2blog-autoloads)
(setq org-export-with-toc nil)
(setq org-export-htmlize-output-type 'css)
(defadvice org2blog/wp-post-buffer (around sacha activate)
  (let ((org-confirm-babel-evaluate nil))
    ad-do-it))
#+end_src

**** Publish without prompting

I want to be able to export without having to say yes to code blocks all the time.

#+begin_src emacs-lisp
(defun sacha/org-html-export-trustingly ()
  (interactive)
  (let ((org-confirm-babel-evaluate nil))
    (org-html-export-to-html)))

(defun sacha/org-html-publish-to-html-trustingly (plist filename pub-dir)
  (let ((org-confirm-babel-evaluate nil))
    (org-html-publish-to-html plist filename pub-dir)))
#+end_src
**** Stylesheet / header
Might as well take advantage of my stylesheet:

#+begin_src emacs-lisp
(setq org-html-head \"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\"
href=\\\"http://sachachua.com/blog/wp-content/themes/sacha-v3/foundation/css/foundation.min.css\\\"></link>
<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"http://sachachua.com/org-export.css\\\"></link>
<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"http://sachachua.com/blog/wp-content/themes/sacha-v3/style.css\\\"></link>
<script src=\\\"http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js\\\"></script>\")
(setq org-html-htmlize-output-type 'css)
(setq org-src-fontify-natively t)
#+end_src
**** Footer

Make it easy to scroll to the top:

#+begin_src emacs-lisp
(setq org-html-preamble \"<a name=\\\"top\\\" id=\\\"top\\\"></a>\")
(setq org-html-postamble \"
<style type=\\\"text/css\\\">
.back-to-top {
    position: fixed;
    bottom: 2em;
    right: 0px;
    text-decoration: none;
    color: #000000;
    background-color: rgba(235, 235, 235, 0.80);
    font-size: 12px;
    padding: 1em;
    display: none;
}

.back-to-top:hover {    
    background-color: rgba(135, 135, 135, 0.50);
}
</style>

<div class=\\\"back-to-top\\\">
<a href=\\\"#top\\\">Back to top</a> | <a href=\\\"mailto:sacha@sachachua.com\\\">E-mail me</a>
</div>

<script type=\\\"text/javascript\\\">
    var offset = 220;
    var duration = 500;
    jQuery(window).scroll(function() {
        if (jQuery(this).scrollTop() > offset) {
            jQuery('.back-to-top').fadeIn(duration);
        } else {
            jQuery('.back-to-top').fadeOut(duration);
        }
    });
</script>\")
#+end_src

**** Copy region
Sometimes I want a region's HTML in my kill-ring/clipboard without any of the extra fluff:

#+begin_src emacs-lisp
  (defun sacha/org-copy-region-as-html (beg end &optional level)
    \"Make it easier to copy code for Wordpress posts and other things.\"
    (interactive \"r\\np\")
    (let ((org-export-html-preamble nil)
          (org-html-toplevel-hlevel (or level 3)))
      (kill-new
       (org-export-string-as (buffer-substring beg end) 'html t))))
#+end_src

Sometimes I want a subtree:

#+begin_src emacs-lisp
(defun sacha/org-copy-subtree-as-html ()
  (interactive)
  (sacha/org-copy-region-as-html
   (org-back-to-heading)
   (org-end-of-subtree)))
#+end_src
**** UTF-8 checkboxes

This snippet turns =- [X]= into ☑ and =- [ ]= into ☐, but leaves =[-]= alone. 
#+begin_src emacs-lisp
(setq org-html-checkbox-types 'unicode)
(setq org-html-checkbox-types
 '((unicode (on . \"<span class=\\\"task-done\\\">&#x2611;</span>\") 
            (off . \"<span class=\\\"task-todo\\\">&#x2610;</span>\") 
            (trans . \"<span class=\\\"task-in-progress\\\">[-]</span>\"))))
#+end_src

*** Structure templates

Org makes it easy to insert blocks by typing =<s[TAB]=, etc.
I hardly ever use LaTeX, but I insert a lot of Emacs Lisp blocks, so I
redefine =<l= to insert a Lisp block instead.

#+begin_src emacs-lisp
  (setq org-structure-template-alist 
        '((\"s\" \"#+begin_src ?\\n\\n#+end_src\" \"<src lang=\\\"?\\\">\\n\\n</src>\")
          (\"e\" \"#+begin_example\\n?\\n#+end_example\" \"<example>\\n?\\n</example>\")
          (\"q\" \"#+begin_quote\\n?\\n#+end_quote\" \"<quote>\\n?\\n</quote>\")
          (\"v\" \"#+BEGIN_VERSE\\n?\\n#+END_VERSE\" \"<verse>\\n?\\n</verse>\")
          (\"c\" \"#+BEGIN_COMMENT\\n?\\n#+END_COMMENT\")
          (\"l\" \"#+begin_src emacs-lisp\\n?\\n#+end_src\" \"<src lang=\\\"emacs-lisp\\\">\\n?\\n</src>\")
          (\"L\" \"#+latex: \" \"<literal style=\\\"latex\\\">?</literal>\")
          (\"h\" \"#+begin_html\\n?\\n#+end_html\" \"<literal style=\\\"html\\\">\\n?\\n</literal>\")
          (\"H\" \"#+html: \" \"<literal style=\\\"html\\\">?</literal>\")
          (\"a\" \"#+begin_ascii\\n?\\n#+end_ascii\")
          (\"A\" \"#+ascii: \")
          (\"i\" \"#+index: ?\" \"#+index: ?\")
          (\"I\" \"#+include %file ?\" \"<include file=%file markup=\\\"?\\\">\")))
#+end_src
*** Quick links
    #+begin_src emacs-lisp
    (setq org-link-abbrev-alist
      '((\"google\" . \"http://www.google.com/search?q=\")
	(\"gmap\" . \"http://maps.google.com/maps?q=%s\")
	(\"blog\" . \"http://sachachua.com/blog/p/\")))
#+end_src
*** Speed commands

These are great for quickly acting on tasks.

#+begin_src emacs-lisp
(setq org-use-effective-time t)
(setq org-use-speed-commands t)
(add-to-list 'org-speed-commands-user '(\"x\" org-todo \"DONE\"))
(add-to-list 'org-speed-commands-user '(\"y\" org-todo-yesterday \"DONE\"))
(add-to-list 'org-speed-commands-user '(\"!\" sacha/org-clock-in-and-track))
(add-to-list 'org-speed-commands-user '(\"s\" call-interactively 'org-schedule))
(add-to-list 'org-speed-commands-user '(\"i\" call-interactively 'org-clock-in))
(add-to-list 'org-speed-commands-user '(\"o\" call-interactively 'org-clock-out))
(bind-key \"!\" 'sacha/org-clock-in-and-track org-agenda-mode-map)
#+end_src

*** Attachments

Org lets you attach files to an Org file. Haven't gotten the hang of this yet, but looks interesting.

#+begin_src emacs-lisp
(setq org-attach-store-link-p 'attached)
(setq org-attach-auto-tag nil)
#+end_src

*** Counting

Good way to remind myself that I have lots of STARTED tasks.

#+begin_src emacs-lisp
(defun sacha/org-summarize-task-status ()
  \"Count number of tasks by status. 
Probably should make this a dblock someday.\"
  (interactive)
  (let (result)
    (org-map-entries
     (lambda ()
       (let ((todo (elt (org-heading-components) 2)))
         (if todo
             (if (assoc todo result)
                 (setcdr (assoc todo result)
                         (1+ (cdr (assoc todo result))))
               (setq result (cons (cons todo 1) result)))))))
    (message \"%s\" (mapconcat (lambda (x) (format \"%s: %d\" (car x) (cdr x)))
                             result \"\\n\"))))
#+end_src
*** Diagrams and graphics

Ooooh. Graphviz and Ditaa make it easier to create diagrams from Emacs. See [[http://sachachua.com/evil-plans]] for examples and source.

#+begin_src emacs-lisp
  (setq org-ditaa-jar-path \"C:/Sacha/Dropbox/bin/ditaa.jar\")
  (setq org-startup-with-inline-images t)
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)
     (ditaa . t) 
     (R . t)))
  (add-to-list 'org-src-lang-modes '(\"dot\" . graphviz-dot))
#+end_src
*** Presentations
#+begin_src emacs-lisp
;;(use-package ox-reveal)
#+end_src
*** Share my Emacs configuration

This code gets around the fact that my config is called Sacha.org, but
I want it to export as sacha-emacs.org in my Dropbox's public
directory. Although now that I'm shifting to Github Pages, maybe I
don't need this any more...

#+begin_src emacs-lisp
  (defun sacha/org-share-emacs ()
    \"Share my Emacs configuration.\"
    (interactive)
    (let* ((destination-dir \"~/Dropbox/Public/\")
           (destination-filename \"sacha-emacs.org\"))
      (save-restriction
        (save-excursion
          (widen)
          (write-region (point-min) (point-max) 
            (expand-file-name destination-filename destination-dir))
          (with-current-buffer (find-file-noselect (expand-file-name
                                                    destination-filename destination-dir))
            (org-babel-tangle-file buffer-file-name 
                                   (expand-file-name
                                    \"sacha-emacs.el\" destination-dir) \"emacs-lisp\")
            (org-html-export-to-html))))))
    #+end_src
*** Task dependencies

#+begin_src emacs-lisp
(setq org-enforce-todo-dependencies t)
(setq org-track-ordered-property-with-tag t)
#+end_src
** Coding
*** Tab width of 2 is compact and readable
#+begin_src emacs-lisp
    (setq-default tab-width 2)
#+end_src
*** New lines are always indented

I almost always want to go to the right indentation on the next line.
#+begin_src emacs-lisp
(global-set-key (kbd \"RET\") 'newline-and-indent)
#+end_src

*** Adapt to being on Windows

I'm on Windows, so I use Cygwin to add Unix-y tools to make my life easier. 
These config snippets seem to help too.
#+begin_src emacs-lisp
  (add-hook 'comint-output-filter-functions
      'shell-strip-ctrl-m nil t)
  (add-hook 'comint-output-filter-functions
      'comint-watch-for-password-prompt nil t)
#+end_src

*** Expand region

This is something I have to get the hang of too. It gradually expands the selection. Handy for Emacs Lisp.

#+begin_src emacs-lisp
  (sacha/package-install 'expand-region)
  (use-package expand-region
    :bind (\"C-=\" . er/expand-region))
#+end_src
*** Emacs Lisp
**** Edebug

Did you know edebug has a trace function? I didn't. Thanks, agumonkey!

#+begin_src emacs-lisp
(setq edebug-trace t)
#+end_src

While edebugging, use T to view a trace buffer (=*edebug-trace*=).
Emacs will quickly execute the rest of your code, printing out the
arguments and return values for each expression it evaluates.

**** Eldoc
Eldoc provides minibuffer hints when working with Emacs Lisp.
#+begin_src emacs-lisp
    (autoload 'turn-on-eldoc-mode \"eldoc\" nil t)
    (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+end_src
**** Refactoring  :drill:
     SCHEDULED: <2013-03-03 Sun>
     :PROPERTIES:
     :ID:       99ac7ddb-08ef-46c4-8fa8-8a45164f9ef4
     :DRILL_LAST_INTERVAL: 3.86
     :DRILL_REPEATS_SINCE_FAIL: 2
     :DRILL_TOTAL_REPEATS: 2
     :DRILL_FAILURE_COUNT: 1
     :DRILL_AVERAGE_QUALITY: 2.5
     :DRILL_EASE: 2.36
     :DRILL_LAST_QUALITY: 3
     :DRILL_LAST_REVIEWED: [2013-02-27 Wed 21:18]
     :END:

More things that I need to get used to...

#+begin_src emacs-lisp
;; C-c C-v l : elint current buffer in clean environment.
;; C-c C-v L : elint current buffer by multiple emacs binaries.
;;             See `erefactor-lint-emacsen'
;; C-c C-v r : Rename symbol in current buffer.
;;             Resolve `let' binding as long as i can.
;; C-c C-v R : Rename symbol in requiring modules and current buffer.
;; C-c C-v h : Highlight current symbol in this buffer
;;             and suppress `erefacthr-highlight-mode'.
;; C-c C-v d : Dehighlight all by above command.
;; C-c C-v c : Switch prefix bunch of symbols.
;;             ex: '(hoge-var hoge-func) -> '(foo-var foo-func)
;; C-c C-v ? : Display flymake elint warnings/errors

;;  (use-package erefactor
;;    :config
;;    (define-key emacs-lisp-mode-map \"\\C-c\\C-v\" erefactor-map))
#+end_src
**** Jumping to code

#+begin_src emacs-lisp
(define-key emacs-lisp-mode-map (kbd \"C-c .\") 'find-function-at-point)
#+end_src
*** Snippets
    #+begin_src emacs-lisp
;;      (use-package yasnippet-bundle
;;        :init
;;        (progn
;;          (yas/initialize)
;;          (yas/load-directory \"~/elisp/snippets\")
;;          (setq yas/key-syntaxes '(\"w_\" \"w_.\" \"^ \"))))
      ;;        (global-set-key (kbd \"C-c y\") (lambda () (interactive)
      ;;                                         (yas/load-directory \"~/elisp/snippets\")))
#+end_src
" 0 2 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 2 4 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 4 14 (fontified t face org-level-3) 14 21 (fontified t) 21 124 (fontified t mouse-face highlight face org-link htmlize-link (:uri "http://stackoverflow.com/questions/15011703/is-there-an-emacs-org-mode-command-to-jump-to-an-org-heading") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 124 125 (fontified t mouse-face highlight face org-link htmlize-link (:uri "http://stackoverflow.com/questions/15011703/is-there-an-emacs-org-mode-command-to-jump-to-an-org-heading") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 125 126 (fontified t) 126 148 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 148 149 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 149 219 (fontified t font-lock-fontified t font-lock-multiline t face nil) 219 226 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 226 228 (fontified t font-lock-fontified t font-lock-multiline t face nil) 228 233 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-constant-face) 233 247 (fontified t font-lock-fontified t font-lock-multiline t face nil) 247 252 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 252 273 (fontified t font-lock-fontified t font-lock-multiline t face nil) 273 280 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 280 298 (fontified t font-lock-fontified t font-lock-multiline t face nil) 298 301 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 301 336 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 336 385 (fontified t font-lock-fontified t font-lock-multiline t) 385 386 (fontified t font-lock-fontified t font-lock-multiline t) 386 395 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 395 396 (fontified t face org-block-end-line) 396 397 (fontified t) 397 399 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 399 401 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 401 444 (fontified t face org-level-3) 444 521 (fontified t) 521 551 (fontified t mouse-face highlight face org-link htmlize-link (:uri "http://sachachua.com/evil-plans") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 551 552 (fontified t mouse-face highlight face org-link htmlize-link (:uri "http://sachachua.com/evil-plans") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 552 554 (fontified t) 554 576 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 576 577 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 577 579 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 579 617 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 617 621 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 621 663 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 663 667 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 667 681 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 681 685 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 685 720 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 720 728 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 728 787 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 787 793 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 793 815 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 815 816 (fontified t font-lock-fontified t font-lock-multiline t face nil) 816 818 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 818 879 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 879 881 (fontified t font-lock-fontified t font-lock-multiline t face nil) 881 886 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 886 887 (fontified t font-lock-fontified t font-lock-multiline t face nil) 887 910 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-function-name-face) 910 924 (fontified t font-lock-fontified t font-lock-multiline t face nil) 924 1008 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-doc-face) 1008 1034 (fontified t font-lock-fontified t font-lock-multiline t face nil) 1034 1037 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 1037 1097 (fontified t font-lock-fontified t font-lock-multiline t face nil) 1097 1107 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 1107 1115 (fontified t font-lock-fontified t font-lock-multiline t face nil) 1115 1118 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 1118 1161 (fontified t font-lock-fontified t font-lock-multiline t face nil) 1161 1182 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 1182 1281 (fontified t font-lock-fontified t font-lock-multiline t face nil) 1281 1287 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 1287 1318 (fontified t font-lock-fontified t font-lock-multiline t face nil) 1318 1324 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 1324 1333 (fontified t font-lock-fontified t font-lock-multiline t) 1333 1334 (fontified t font-lock-fontified t font-lock-multiline t) 1334 1343 (fontified t font-lock-fontified t face org-block-end-line font-lock-multiline t) 1343 1344 (fontified t face org-block-end-line) 1344 1345 (fontified t) 1345 1347 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 1347 1349 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 1349 1361 (fontified t face org-level-3) 1361 1390 (fontified t) 1390 1400 (fontified t face (org-verbatim) font-lock-multiline t org-emphasis t) 1400 1432 (fontified t) 1432 1544 (fontified t) 1544 1566 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 1566 1567 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 1567 1589 (fontified t font-lock-fontified t font-lock-multiline t face nil) 1589 1601 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 1601 1634 (fontified t font-lock-fontified t font-lock-multiline t face nil) 1634 1660 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 1660 1661 (fontified t font-lock-fontified t font-lock-multiline t) 1661 1662 (fontified t font-lock-fontified t font-lock-multiline t) 1662 1671 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 1671 1672 (fontified t face org-block-end-line) 1672 1722 (fontified t) 1722 1744 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 1744 1745 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 1745 1746 (fontified t font-lock-fontified t font-lock-multiline t face nil) 1746 1751 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 1751 1752 (fontified t font-lock-fontified t font-lock-multiline t face nil) 1752 1767 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-function-name-face) 1767 1797 (fontified t font-lock-fontified t font-lock-multiline t face nil) 1797 1798 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 1798 1801 (fontified t keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: \")
  (yank)
  (insert \"" htmlize-link (:uri "\")
  (yank)
  (insert \"") font-lock-fontified t face font-lock-string-face) 1801 1822 (fontified t keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: \")
  (yank)
  (insert \"" htmlize-link (:uri "\")
  (yank)
  (insert \"") font-lock-fontified t face nil) 1822 1824 (fontified t keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: \")
  (yank)
  (insert \"" htmlize-link (:uri "\")
  (yank)
  (insert \"") font-lock-fontified t face font-lock-string-face) 1824 1825 (fontified t keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: \")
  (yank)
  (insert \"" htmlize-link (:uri "\")
  (yank)
  (insert \"") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-fontified t face font-lock-string-face) 1825 1828 (fontified t keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: \")
  (yank)
  (insert \"" htmlize-link (:uri "\")
  (yank)
  (insert \"") font-lock-fontified t face font-lock-string-face) 1828 1829 (fontified t keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: \")
  (yank)
  (insert \"" htmlize-link (:uri "\")
  (yank)
  (insert \"") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-fontified t face font-lock-string-face) 1829 1830 (fontified t keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: \")
  (yank)
  (insert \"" htmlize-link (:uri "\")
  (yank)
  (insert \"") font-lock-fontified t face font-lock-string-face) 1830 1831 (fontified t keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: \")
  (yank)
  (insert \"" htmlize-link (:uri "\")
  (yank)
  (insert \"") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-fontified t face font-lock-string-face) 1831 1832 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 1832 1856 (fontified t font-lock-fontified t font-lock-multiline t face nil) 1856 1862 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 1862 1881 (fontified t font-lock-fontified t font-lock-multiline t) 1881 1882 (fontified t font-lock-fontified t font-lock-multiline t) 1882 1891 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 1891 1892 (fontified t face org-block-end-line) 1892 1893 (fontified t) 1893 1896 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 1896 1898 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 1898 1907 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t face org-level-4) 1907 1920 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t) 1920 1933 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t face (org-verbatim) font-lock-multiline t org-emphasis t) 1933 1978 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t) 1978 2048 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t) 2048 2075 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 2075 2076 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 2076 2079 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2079 2085 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 2085 2086 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2086 2115 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-variable-name-face) 2115 2116 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2116 2117 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2117 2119 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 2119 2139 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2139 2149 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2149 2159 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2159 2173 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2173 2176 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2176 2184 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2184 2185 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2185 2225 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2225 2234 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2234 2235 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2235 2252 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-doc-face) 2252 2295 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2295 2298 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2298 2299 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2299 2306 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2306 2340 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2340 2366 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2366 2367 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2367 2374 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2374 2430 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2430 2433 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2433 2434 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2434 2449 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2449 2482 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2482 2507 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2507 2508 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2508 2515 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2515 2517 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2517 2571 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2571 2574 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2574 2575 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2575 2588 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2588 2621 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2621 2644 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2644 2645 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2645 2652 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2652 2708 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2708 2712 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2712 2713 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2713 2730 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2730 2763 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2763 2788 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2788 2789 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2789 2796 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2796 2809 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2809 2810 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2810 2812 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 2812 2846 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2846 2859 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2859 2863 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2863 2864 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2864 2879 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2879 2912 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2912 2935 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2935 2936 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2936 2943 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2943 2956 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 2956 2957 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2957 2959 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 2959 2993 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 2993 3006 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3006 3010 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3010 3011 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3011 3024 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3024 3057 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3057 3083 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3083 3084 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3084 3091 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3091 3104 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3104 3105 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3105 3107 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 3107 3141 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3141 3154 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3154 3157 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3157 3158 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3158 3170 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3170 3202 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3202 3228 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3228 3229 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3229 3242 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3242 3256 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3256 3259 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3259 3260 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3260 3276 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3276 3289 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3289 3293 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3293 3294 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3294 3300 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3300 3324 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3324 3343 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3343 3356 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3356 3448 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3448 3449 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3449 3466 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-builtin-face) 3466 3479 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3479 3483 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3483 3484 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3484 3495 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3495 3519 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3519 3538 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3538 3551 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3551 3611 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3611 3613 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 3613 3689 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3689 3690 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3690 3707 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-builtin-face) 3707 3724 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3724 3728 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3728 3729 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3729 3735 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3735 3759 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3759 3778 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3778 3791 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3791 3809 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3809 3811 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 3811 3880 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3880 3906 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3906 3909 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3909 3910 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3910 3916 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3916 3949 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3949 3971 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3971 3972 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3972 3979 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3979 3992 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 3992 3993 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 3993 3995 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 3995 4029 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4029 4031 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 4031 4056 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4056 4058 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 4058 4088 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4088 4090 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 4090 4107 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4107 4119 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4119 4128 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-builtin-face) 4128 4129 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4129 4142 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-builtin-face) 4142 4156 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4156 4159 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4159 4160 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4160 4169 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4169 4182 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4182 4207 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4207 4221 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4221 4222 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4222 4224 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 4224 4254 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4254 4268 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4268 4271 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4271 4278 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4278 4279 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4279 4309 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4309 4318 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4318 4332 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4332 4335 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4335 4336 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4336 4348 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4348 4370 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4370 4396 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4396 4397 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4397 4410 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4410 4424 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4424 4443 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4443 4456 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4456 4473 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-builtin-face) 4473 4487 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4487 4490 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4490 4491 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4491 4498 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4498 4532 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4532 4558 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4558 4572 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4572 4573 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4573 4575 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 4575 4586 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4586 4615 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face nil) 4615 4622 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 4622 4636 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t) 4636 4637 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t) 4637 4646 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 4646 4647 (effort "%^{effort|1:00|0:05|0:15|0:30|2:00|4:00}" effort-minutes 60 fontified t face org-block-end-line) 4647 4651 (fontified t face org-level-5 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 4651 4653 (fontified t face org-level-5 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 4653 4699 (fontified t face org-level-5) 4699 4718 (fontified t) 4718 4727 (fontified t face (org-verbatim) font-lock-multiline t org-emphasis t) 4727 5003 (fontified t) 5003 5025 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 5025 5026 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 5026 5029 (fontified t font-lock-fontified t font-lock-multiline t face nil) 5029 5034 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 5034 5035 (fontified t font-lock-fontified t font-lock-multiline t face nil) 5035 5068 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-function-name-face) 5068 5150 (fontified t font-lock-fontified t font-lock-multiline t face nil) 5150 5153 (fontified t font-lock-fontified t font-lock-multiline t face nil) 5153 5160 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 5160 5162 (fontified t font-lock-fontified t font-lock-multiline t face nil) 5162 5173 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-constant-face) 5173 5187 (fontified t font-lock-fontified t font-lock-multiline t face nil) 5187 5196 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 5196 5253 (fontified t font-lock-fontified t font-lock-multiline t) 5253 5254 (fontified t font-lock-fontified t font-lock-multiline t) 5254 5263 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 5263 5264 (fontified t face org-block-end-line) 5264 5265 (fontified t) 5265 5268 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 5268 5270 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 5270 5278 (fontified t face org-level-4) 5278 5280 (fontified t) 5280 5292 (fontified t face (org-verbatim) font-lock-multiline t org-emphasis t) 5292 5364 (fontified t) 5364 5390 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 5390 5391 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 5391 5627 (fontified t font-lock-fontified t font-lock-multiline t face nil) 5627 5636 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-builtin-face) 5636 5688 (fontified t font-lock-fontified t font-lock-multiline t) 5688 5689 (fontified t font-lock-fontified t font-lock-multiline t) 5689 5702 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 5702 5703 (fontified t face org-block-end-line) 5703 5708 (fontified t) 5708 5711 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 5711 5713 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 5713 5727 (fontified t face org-level-4) 5727 5781 (fontified t) 5781 5803 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 5803 5804 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 5804 5806 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 5806 5827 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 5827 5829 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 5829 5859 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 5859 5863 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 5863 5877 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 5877 5881 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 5881 5899 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 5899 5905 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 5905 5921 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 5921 5929 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 5929 5953 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 5953 5961 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 5961 5985 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 5985 5993 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 5993 5997 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 5997 5999 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 5999 6053 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 6053 6055 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 6055 6100 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 6100 6102 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 6102 6133 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 6133 6135 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 6135 6199 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 6199 6201 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 6201 6239 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 6239 6240 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 6240 6249 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 6249 6250 (fontified t face org-block-end-line) 6250 6251 (fontified t) 6251 6253 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 6253 6255 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 6255 6269 (fontified t face org-level-3) 6269 6270 (fontified t) 6270 6273 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 6273 6275 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 6275 6291 (fontified t face org-level-4) 6291 6292 (fontified t) 6292 6309 (fontified t face org-target) 6309 6418 (fontified t) 6418 6440 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 6440 6441 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 6441 6503 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6503 6512 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6512 6514 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6514 6516 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 6516 6528 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 6528 6539 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6539 6550 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6550 6552 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6552 6554 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 6554 6566 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 6566 6577 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6577 6589 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6589 6601 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6601 6616 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6616 6628 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6628 6640 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6640 6641 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6641 6644 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6644 6645 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6645 6655 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6655 6656 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6656 6671 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6671 6693 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6693 6708 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6708 6709 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6709 6723 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6723 6724 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6724 6737 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6737 6740 (fontified t font-lock-fontified t font-lock-multiline t) 6740 6741 (fontified t font-lock-fontified t font-lock-multiline t) 6741 6750 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 6750 6751 (fontified t face org-block-end-line) 6751 6752 (fontified t) 6752 6774 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 6774 6775 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 6775 6804 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6804 6813 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6813 6819 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6819 6823 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6823 6834 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-builtin-face) 6834 6835 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6835 6842 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6842 6843 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6843 6850 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-builtin-face) 6850 6867 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6867 6873 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6873 6877 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6877 6888 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-builtin-face) 6888 6889 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6889 6895 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6895 6896 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6896 6903 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-builtin-face) 6903 6920 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6920 6929 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6929 6933 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6933 6944 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-builtin-face) 6944 6945 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6945 6950 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6950 6951 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6951 6958 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-builtin-face) 6958 6975 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6975 6984 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 6984 6988 (fontified t font-lock-fontified t font-lock-multiline t face nil) 6988 6999 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-builtin-face) 6999 7000 (fontified t font-lock-fontified t font-lock-multiline t face nil) 7000 7006 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 7006 7007 (fontified t font-lock-fontified t font-lock-multiline t face nil) 7007 7014 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-builtin-face) 7014 7023 (fontified t font-lock-fontified t font-lock-multiline t) 7023 7024 (fontified t font-lock-fontified t font-lock-multiline t) 7024 7038 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 7038 7039 (fontified t face org-block-end-line) 7039 7040 (fontified t) 7040 7043 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 7043 7045 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 7045 7053 (fontified t face org-level-4) 7053 7086 (fontified t) 7086 7097 (fontified t face (org-verbatim) font-lock-multiline t org-emphasis t) 7097 7227 (fontified t) 7227 7254 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 7254 7255 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 7255 7304 (fontified t font-lock-fontified t font-lock-multiline t face nil) 7304 7313 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 7313 7315 (fontified t font-lock-fontified t font-lock-multiline t) 7315 7316 (fontified t font-lock-fontified t font-lock-multiline t) 7316 7330 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 7330 7331 (fontified t face org-block-end-line) 7331 7403 (fontified t) 7403 7425 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 7425 7426 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 7426 7468 (fontified t font-lock-fontified t font-lock-multiline t face nil) 7468 7471 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 7471 7538 (fontified t font-lock-fontified t font-lock-multiline t face nil) 7538 7541 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 7541 7550 (fontified t font-lock-fontified t font-lock-multiline t face nil) 7550 7553 (fontified t font-lock-fontified t font-lock-multiline t face nil) 7553 7558 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 7558 7559 (fontified t font-lock-fontified t font-lock-multiline t face nil) 7559 7587 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-function-name-face) 7587 7614 (fontified t font-lock-fontified t font-lock-multiline t face nil) 7614 7616 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 7616 7658 (fontified t font-lock-fontified t font-lock-multiline t face nil) 7658 7661 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 7661 7662 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 7662 7663 (fontified t font-lock-fontified t font-lock-multiline t face nil mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 7663 7985 (fontified t font-lock-fontified t font-lock-multiline t face nil) 7985 8004 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 8004 8061 (fontified t font-lock-fontified t font-lock-multiline t face nil) 8061 8064 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 8064 8135 (fontified t font-lock-fontified t font-lock-multiline t face nil) 8135 8138 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 8138 8160 (fontified t font-lock-fontified t font-lock-multiline t face nil) 8160 8163 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 8163 8228 (fontified t font-lock-fontified t font-lock-multiline t face nil) 8228 8231 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 8231 8287 (fontified t font-lock-fontified t font-lock-multiline t face nil) 8287 8290 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 8290 8321 (fontified t font-lock-fontified t font-lock-multiline t) 8321 8322 (fontified t font-lock-fontified t font-lock-multiline t) 8322 8331 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 8331 8332 (fontified t face org-block-end-line) 8332 8386 (fontified t) 8386 8389 (fontified t face (org-verbatim) font-lock-multiline t org-emphasis t) 8389 8419 (fontified t) 8419 8430 (fontified t face (org-verbatim) font-lock-multiline t org-emphasis t) 8430 8437 (fontified t) 8437 8440 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 8440 8442 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 8442 8473 (fontified t face org-level-4) 8473 8524 (fontified t) 8524 8551 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 8551 8552 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 8552 8589 (fontified t font-lock-fontified t font-lock-multiline t face nil) 8589 8596 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 8596 8641 (fontified t font-lock-fontified t font-lock-multiline t face nil) 8641 8648 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 8648 8693 (fontified t font-lock-fontified t font-lock-multiline t face nil) 8693 8703 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 8703 8747 (fontified t font-lock-fontified t font-lock-multiline t face nil) 8747 8757 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 8757 8802 (fontified t font-lock-fontified t font-lock-multiline t face nil) 8802 8812 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 8812 8856 (fontified t font-lock-fontified t font-lock-multiline t face nil) 8856 8865 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 8865 8872 (fontified t font-lock-fontified t font-lock-multiline t face nil) 8872 8909 (fontified t font-lock-fontified t font-lock-multiline t face nil) 8909 8917 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 8917 8961 (fontified t font-lock-fontified t font-lock-multiline t face nil) 8961 8971 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 8971 9015 (fontified t font-lock-fontified t font-lock-multiline t face nil) 9015 9026 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 9026 9070 (fontified t font-lock-fontified t font-lock-multiline t face nil) 9070 9082 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 9082 9126 (fontified t font-lock-fontified t font-lock-multiline t face nil) 9126 9137 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 9137 9181 (fontified t font-lock-fontified t font-lock-multiline t face nil) 9181 9193 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 9193 9201 (fontified t font-lock-fontified t font-lock-multiline t) 9201 9202 (fontified t font-lock-fontified t font-lock-multiline t) 9202 9216 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 9216 9217 (fontified t face org-block-end-line) 9217 9220 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 9220 9222 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 9222 9258 (fontified t face org-level-4) 9258 9319 (fontified t) 9319 9341 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 9341 9342 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 9342 9390 (fontified t font-lock-fontified t font-lock-multiline t face nil) 9390 9402 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 9402 9404 (fontified t font-lock-fontified t font-lock-multiline t face nil) 9404 9440 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 9440 9442 (fontified t font-lock-fontified t font-lock-multiline t) 9442 9443 (fontified t font-lock-fontified t font-lock-multiline t) 9443 9452 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 9452 9453 (fontified t face org-block-end-line) 9453 9459 (fontified t) 9459 9462 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 9462 9464 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 9464 9474 (fontified t face org-level-4) 9474 9476 (fontified t) 9476 9498 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 9498 9499 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 9499 9678 (fontified t font-lock-fontified t font-lock-multiline t face nil) 9678 9687 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 9687 9688 (fontified t font-lock-fontified t font-lock-multiline t face nil) 9688 9700 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-function-name-face) 9700 9724 (fontified t font-lock-fontified t font-lock-multiline t face nil) 9724 9728 (fontified t font-lock-fontified t font-lock-multiline t face nil) 9728 9759 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-doc-face) 9759 9765 (fontified t font-lock-fontified t font-lock-multiline t face nil) 9765 9779 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 9779 9787 (fontified t font-lock-fontified t font-lock-multiline t face nil) 9787 9792 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 9792 9794 (fontified t font-lock-fontified t font-lock-multiline t face nil) 9794 9798 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-constant-face) 9798 9808 (fontified t font-lock-fontified t font-lock-multiline t face nil) 9808 9812 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 9812 9868 (fontified t font-lock-fontified t font-lock-multiline t face nil) 9868 9871 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 9871 9872 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 9872 9873 (fontified t font-lock-fontified t font-lock-multiline t face nil mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 9873 10223 (fontified t font-lock-fontified t font-lock-multiline t face nil) 10223 10242 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 10242 10379 (fontified t font-lock-fontified t font-lock-multiline t face nil) 10379 10381 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 10381 10433 (fontified t font-lock-fontified t font-lock-multiline t face nil) 10433 10442 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 10442 10462 (fontified t font-lock-fontified t font-lock-multiline t face nil) 10462 10464 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 10464 10516 (fontified t font-lock-fontified t font-lock-multiline t face nil) 10516 10525 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 10525 10532 (fontified t font-lock-fontified t font-lock-multiline t) 10532 10533 (fontified t font-lock-fontified t font-lock-multiline t) 10533 10542 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 10542 10543 (fontified t face org-block-end-line) 10543 10595 (fontified t) 10595 10617 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 10617 10618 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 10618 10644 (fontified t font-lock-fontified t font-lock-multiline t face nil) 10644 10653 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 10653 10685 (fontified t font-lock-fontified t font-lock-multiline t) 10685 10686 (fontified t font-lock-fontified t font-lock-multiline t) 10686 10695 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 10695 10696 (fontified t face org-block-end-line) 10696 10697 (fontified t) 10697 10700 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 10700 10702 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 10702 10708 (fontified t face org-level-4) 10708 10898 (fontified t) 10898 10920 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 10920 10921 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 10921 11001 (fontified t font-lock-fontified t font-lock-multiline t) 11001 11002 (fontified t font-lock-fontified t font-lock-multiline t) 11002 11011 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 11011 11012 (fontified t face org-block-end-line) 11012 11114 (fontified t) 11114 11121 (fontified t face (org-verbatim) font-lock-multiline t org-emphasis t) 11121 11155 (fontified t) 11155 11156 (fontified t) 11156 11158 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 11158 11160 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 11160 11176 (fontified t face org-level-3) 11176 11243 (fontified t) 11243 11245 (fontified t invisible org-link keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: http://orgmode.org/worg/org-hacks.html" htmlize-link (:uri "http://orgmode.org/worg/org-hacks.html") face org-link) 11245 11284 (fontified t mouse-face highlight face org-link htmlize-link (:uri "http://orgmode.org/worg/org-hacks.html") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) invisible org-link font-lock-multiline t help-echo "LINK: http://orgmode.org/worg/org-hacks.html") 11284 11285 (fontified t mouse-face highlight face org-link htmlize-link (:uri "http://orgmode.org/worg/org-hacks.html") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) invisible org-link font-lock-multiline t help-echo "LINK: http://orgmode.org/worg/org-hacks.html" rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 11285 11287 (fontified t mouse-face highlight face org-link htmlize-link (:uri "http://orgmode.org/worg/org-hacks.html") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) font-lock-multiline t help-echo "LINK: http://orgmode.org/worg/org-hacks.html") 11287 11288 (fontified t mouse-face highlight face org-link htmlize-link (:uri "http://orgmode.org/worg/org-hacks.html") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-multiline t help-echo "LINK: http://orgmode.org/worg/org-hacks.html") 11288 11293 (fontified t keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: http://orgmode.org/worg/org-hacks.html" htmlize-link (:uri "http://orgmode.org/worg/org-hacks.html") face org-link) 11293 11294 (fontified t keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: http://orgmode.org/worg/org-hacks.html" htmlize-link (:uri "http://orgmode.org/worg/org-hacks.html") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link) 11294 11295 (fontified t invisible org-link keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: http://orgmode.org/worg/org-hacks.html" htmlize-link (:uri "http://orgmode.org/worg/org-hacks.html") face org-link) 11295 11296 (fontified t invisible org-link keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: http://orgmode.org/worg/org-hacks.html" htmlize-link (:uri "http://orgmode.org/worg/org-hacks.html") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link) 11296 11304 (fontified t) 11304 11326 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 11326 11327 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 11327 11404 (fontified t font-lock-fontified t font-lock-multiline t face nil) 11404 11409 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 11409 11410 (fontified t font-lock-fontified t font-lock-multiline t face nil) 11410 11435 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-function-name-face) 11435 11441 (fontified t font-lock-fontified t font-lock-multiline t face nil) 11441 11487 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-doc-face) 11487 11491 (fontified t font-lock-fontified t font-lock-multiline t face nil) 11491 11497 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 11497 11521 (fontified t font-lock-fontified t font-lock-multiline t face nil) 11521 11529 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 11529 11536 (fontified t font-lock-fontified t font-lock-multiline t face nil) 11536 11539 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 11539 11589 (fontified t font-lock-fontified t font-lock-multiline t face nil) 11589 11599 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 11599 11656 (fontified t font-lock-fontified t font-lock-multiline t face nil) 11656 11664 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 11664 11669 (fontified t font-lock-fontified t font-lock-multiline t face nil) 11669 11676 (fontified t font-lock-fontified t font-lock-multiline t face nil) 11676 11682 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 11682 11697 (fontified t font-lock-fontified t font-lock-multiline t face nil) 11697 11699 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 11699 11727 (fontified t font-lock-fontified t font-lock-multiline t face nil) 11727 11735 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 11735 11747 (fontified t font-lock-fontified t font-lock-multiline t) 11747 11748 (fontified t font-lock-fontified t font-lock-multiline t) 11748 11757 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 11757 11758 (fontified t face org-block-end-line) 11758 11759 (fontified t) 11759 11761 (fontified t font-lock-fontified t face font-lock-comment-face) 11761 11771 (fontified t face font-lock-comment-face font-lock-fontified t) 11771 11772 (fontified t) 11772 11774 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 11774 11776 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 11776 11836 (fontified t face org-level-3) 11836 12012 (fontified t) 12012 12034 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 12034 12035 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 12035 12038 (fontified t font-lock-fontified t font-lock-multiline t face nil) 12038 12044 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 12044 12045 (fontified t font-lock-fontified t font-lock-multiline t face nil) 12045 12073 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-variable-name-face) 12073 12078 (fontified t font-lock-fontified t font-lock-multiline t face nil) 12078 12144 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-doc-face) 12144 12149 (fontified t font-lock-fontified t font-lock-multiline t face nil) 12149 12158 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 12158 12159 (fontified t font-lock-fontified t font-lock-multiline t face nil) 12159 12186 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-function-name-face) 12186 12216 (fontified t font-lock-fontified t font-lock-multiline t face nil) 12216 12218 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 12218 12257 (fontified t font-lock-fontified t font-lock-multiline t face nil) 12257 12262 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 12262 12263 (fontified t font-lock-fontified t font-lock-multiline t face nil) 12263 12431 (fontified t font-lock-fontified t font-lock-multiline t face nil) 12431 12435 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 12435 12911 (fontified t font-lock-fontified t font-lock-multiline t face nil) 12911 12915 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 12915 12935 (fontified t font-lock-fontified t font-lock-multiline t) 12935 12936 (fontified t font-lock-fontified t font-lock-multiline t) 12936 12945 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 12945 12946 (fontified t face org-block-end-line) 12946 12947 (fontified t) 12947 12949 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 12949 12951 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 12951 12979 (fontified t face org-level-3) 12979 13096 (fontified t) 13096 13098 (fontified t invisible org-link keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month" htmlize-link (:uri "http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month") face org-link) 13098 13221 (fontified t mouse-face highlight face org-link htmlize-link (:uri "http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) invisible org-link font-lock-multiline t help-echo "LINK: http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month") 13221 13222 (fontified t mouse-face highlight face org-link htmlize-link (:uri "http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) invisible org-link font-lock-multiline t help-echo "LINK: http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month" rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 13222 13228 (fontified t mouse-face highlight face org-link htmlize-link (:uri "http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) font-lock-multiline t help-echo "LINK: http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month") 13228 13229 (fontified t mouse-face highlight face org-link htmlize-link (:uri "http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-multiline t help-echo "LINK: http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month") 13229 13255 (fontified t keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month" htmlize-link (:uri "http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month") face org-link) 13255 13256 (fontified t keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month" htmlize-link (:uri "http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link) 13256 13257 (fontified t invisible org-link keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month" htmlize-link (:uri "http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month") face org-link) 13257 13258 (fontified t invisible org-link keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight font-lock-multiline t help-echo "LINK: http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month" htmlize-link (:uri "http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link) 13258 13260 (fontified t) 13260 13282 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 13282 13283 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 13283 13286 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 13286 13300 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 13300 13364 (fontified t mouse-face highlight htmlize-link (:uri "https://raw.github.com/chenfengyuan/elisp/master/next-spec-day.el") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 13364 13365 (fontified t mouse-face highlight htmlize-link (:uri "https://raw.github.com/chenfengyuan/elisp/master/next-spec-day.el") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 13365 13366 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 13366 13367 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 13367 13405 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 13405 13406 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 13406 13415 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 13415 13416 (fontified t face org-block-end-line) 13416 13417 (fontified t) 13417 13419 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 13419 13421 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 13421 13431 (fontified t face org-level-3) 13431 13432 (fontified t) 13432 13435 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 13435 13437 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 13437 13456 (fontified t face org-level-4) 13456 13457 (fontified t) 13457 13573 (fontified t) 13573 13595 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 13595 13596 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 13596 13600 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 13600 13626 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 13626 13655 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 13655 13682 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 13682 13711 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 13711 13735 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 13735 13764 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 13764 13790 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 13790 13819 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 13819 13856 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 13856 13885 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 13885 13917 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 13917 13946 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 13946 13977 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 13977 14006 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 14006 14048 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 14048 14077 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 14077 14103 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 14103 14132 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 14132 14134 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 14134 14135 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 14135 14144 (fontified nil font-lock-fontified t font-lock-multiline t face org-block-end-line) 14144 14145 (fontified nil face org-block-end-line) 14145 65839 (fontified nil) 65839 65999 (fontified t) 65999 66008 (fontified t font-lock-fontified t face org-meta-line) 66008 66009 (fontified t) 66009 66012 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 66012 66014 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 66014 66029 (fontified t face org-level-4) 66029 66031 (fontified t) 66031 66053 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 66053 66054 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 66054 66091 (fontified t font-lock-fontified t font-lock-multiline t face nil) 66091 66098 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 66098 66124 (fontified t font-lock-fontified t font-lock-multiline t) 66124 66125 (fontified t font-lock-fontified t font-lock-multiline t) 66125 66134 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 66134 66135 (fontified t face org-block-end-line) 66135 66137 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 66137 66139 (fontified t face org-level-3 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 66139 66147 (fontified t face org-level-3) 66147 66148 (fontified t) 66148 66174 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 66174 66175 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 66175 66183 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 66183 66213 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 66213 66223 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 66223 66229 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 66229 66239 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 66239 66246 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 66246 66258 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 66258 66275 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 66275 66287 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 66287 66327 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 66327 66339 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 66339 66384 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 66384 66390 (fontified t font-lock-fontified t font-lock-multiline t face nil) 66390 66400 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 66400 66455 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 66455 66461 (fontified t font-lock-fontified t font-lock-multiline t face nil) 66461 66504 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 66504 66545 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 66545 66546 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 66546 66555 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 66555 66556 (fontified t face org-block-end-line)) "#+TITLE: Mark Harpster's Emacs configuration
#+OPTIONS: toc:4 h:4


* Configuration
** About this file
<<babel-init>>

Inspired by the [[http://eschulte.me/emacs24-starter-kit/#installation][Emacs Starter Kit]], I set up my configuration file
using Org-babel. Because my username is Sacha, I can save this as
Sacha.org in my =~/.emacs.d= directory to have it automatically load.
You could load it with =(org-babel-load-file \"/path/to/file\")=,
changing the path appropriately, but you'll probably want to tweak it
extensively first. 

This page: [[http://sachac.github.io/.emacs.d/Sacha.html][HTML]] - [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Org]] - [[https://dl.dropbox.com/u/3968124/sacha-emacs.el][.el]] - [[http://sachac.github.io/.emacs.d/][Github]] - also, http://sach.ac/dotemacs

To be precise, this is what's in my init.el:

#+begin_src emacs-lisp  :tangle no
;; This sets up the load path so that we can override it
(package-initialize nil)
;; Override the packages with the git version of Org and other packages
(add-to-list 'load-path \"~/elisp/org-mode/lisp\")
(add-to-list 'load-path \"~/elisp/org-mode/contrib/lisp\")
;;(add-to-list 'load-path \"~/Dropbox/2014/presentations/org-reveal\")
;; Load the rest of the packages
(package-initialize t)
(require 'org)
(require 'ob-tangle)
(org-babel-load-file (expand-file-name \"~/.emacs.d/mharp.org\"))
#+end_src

If you're new to Emacs Lisp, you probably don't want to copy and paste
large chunks of this code. Instead, copy small parts of it (always
making sure to copy a complete set of parentheses) into your
=*scratch*= buffer or some other buffer in =emacs-lisp-mode=. Use =M-x
eval-buffer= to evaluate the code and see if you like the way that
Emacs behaves. See [[https://www.gnu.org/software/emacs/manual/html_mono/eintr.html][An Introduction to Programming in Emacs Lisp]] for more details on Emacs Lisp. You can also find the manual by using =C-h i= (=info=) and choosing \"Emacs Lisp Intro\".

I've installed a lot of packages. See the [[*Add%20package%20sources][package sources]] section to
add the repositories to your configuration. When you see =use-package=
and a package name you might like, you can use =M-x package-install=
to install the package of that name. Note that use-package is itself
provided by a package, so you'll probably want to install that and
=bind-key=.

If you're viewing the Org file, you can open source code blocks (those are the ones in begin_src) in a separate buffer by moving your point inside them and typing C-c ' (=org-edit-special=). This opens another buffer in =emacs-lisp-mode=, so you can use =M-x eval-buffer= to load the changes. If you want to explore how functions work, use =M-x edebug-defun= to set up debugging for that function, and then call it. You can learn more about edebug in the [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html][Emacs Lisp]] manual.

I like using =(setq ...)= more than Customize because I can neatly organize my configuration that way. 

** Personal information

#+begin_src emacs-lisp
  (setq user-full-name \"Mark W Harpster\"
        user-mail-address \"mwharp@gmail.com\")
#+end_src

** Emacs initialization
*** Add my elisp directory and other files

Sometimes I load files outside the package system. As long as they're
in a directory in my =load-path=, Emacs can find them.

#+begin_src emacs-lisp
(add-to-list 'load-path \"~/.emacs.d\")
(add-to-list 'load-path \"~/elisp\")
;;(add-to-list 'load-path \"~/elisp/artbollocks-mode\")
(require 'use-package)
#+end_src

*** Load secrets

I keep slightly more sensitive information in a separate file so that I can easily publish my main configuration.

#+begin_src emacs-lisp
;;(load-file \"~/.emacs.secrets\")
#+end_src

*** Add package sources

#+begin_src emacs-lisp
(add-to-list 'package-archives '(\"org\" . \"http://orgmode.org/elpa/\") t)
(add-to-list 'package-archives '(\"melpa\" . \"http://melpa.milkbox.net/packages/\") t)
#+end_src

Use =M-x package-refresh-contents= to reload the list of packages
after adding these for the first time.

*** Byte-compile my init files to speed things up next time

I hardly ever use this because I don't care about my Emacs startup
speed. The trick to using Emacs is to not close it. I start Emacs when
my computer boots up. I suspend my computer when I go to sleep. Pretty
much the only time I shut down is when I need to update the system.

#+begin_src emacs-lisp
(defun sacha/byte-recompile ()
  (interactive)
  (byte-recompile-directory \"~/.emacs.d\" 0)
  (byte-recompile-directory \"~/elisp\" 0))
#+end_src

*** Install packages if necessary

ELPA makes it easy to install packages without tracking down all the
different websites. Let's define a function that makes it easy to
install packages. I don't actually use this a lot any more, but it can
be handy.

#+begin_src emacs-lisp
(defun sacha/package-install (package &optional repository)
  \"Install PACKAGE if it has not yet been installed.
If REPOSITORY is specified, use that.\"
  (unless (package-installed-p package)
    (let ((package-archives (if repository
                                (list (assoc repository package-archives))
                              package-archives)))
    (package-install package))))
#+end_src

** General configuration
*** Backups

This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in =~= that are cluttering up your directory lists. The following code stashes them all in =~/.emacs.d/backups=, where I can find them with =C-x C-f= (=find-file=) if I really need to.

#+begin_src emacs-lisp
(setq backup-directory-alist '((\".\" . \"~/.emacs.d/backups\")))
(set-background-color \"blue\")
#+end_src

Disk space is cheap. Save lots.

#+begin_src emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((\".*\" \"~/.emacs.d/auto-save-list\" t)))
#+end_src

*** History

From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+begin_src emacs-lisp
(setq savehist-file \"~/.emacs.d/savehist\")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+end_src

*** Windows configuration :drill:
    SCHEDULED: <2013-03-03 Sun>
    :PROPERTIES:
    :ID:       440c0b9a-9068-450b-89a3-a20c8ec1f447
    :DRILL_LAST_INTERVAL: 3.86
    :DRILL_REPEATS_SINCE_FAIL: 2
    :DRILL_TOTAL_REPEATS: 1
    :DRILL_FAILURE_COUNT: 0
    :DRILL_AVERAGE_QUALITY: 3.0
    :DRILL_EASE: 2.36
    :DRILL_LAST_QUALITY: 3
    :DRILL_LAST_REVIEWED: [2013-02-27 Wed 23:14]
    :END:

When you're starting out, tooltips, menus, and the tool bar can be very helpful. [[http://sachachua.com/blog/2014/03/emacs-basics-using-mouse/][(Emacs Basics: Using the Mouse]]). Eventually, you may want to reclaim that extra little bit of screenspace. The following code turns those things off when using a graphical Emacs.

#+begin_src emacs-lisp
(when window-system
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode t)
  (scroll-bar-mode t))
#+end_src
*** Winner mode - undo and redo window configuration

=winner-mode= lets you use =C-c <left>= and =C-c <right>= to switch between window configurations. This is handy when something has popped up a buffer that you want to look at briefly before returning to whatever you were working on. When you're done, press =C-c <left>=.

#+begin_src emacs-lisp
;;  (use-package winner
;;    :config (winner-mode 1))
#+end_src
*** Sentences end with a single space

In my world, sentences end with a single space. This makes
sentence navigation commands work for me.

#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

*** Helm - interactive completion

Helm makes it easy to complete various things. I find it to be easier
to configure than ido in order to get completion in as many places as
possible, although I prefer ido's way of switching buffers.

#+begin_src emacs-lisp
    (use-package helm
      :init
      (progn 
        (require 'helm-config) 
        (setq helm-candidate-number-limit 10)
        ;; From https://gist.github.com/antifuchs/9238468
        (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
              helm-input-idle-delay 0.01  ; this actually updates things
                                            ; reeeelatively quickly.
              helm-quick-update t
              helm-M-x-requires-pattern nil
              helm-ff-skip-boring-files t)
        (helm-mode))
      :config
      (progn
        ;; I don't like the way switch-to-buffer uses history, since
        ;; that confuses me when it comes to buffers I've already
        ;; killed. Let's use ido instead.
        (add-to-list 'helm-completing-read-handlers-alist '(switch-to-buffer . ido)))
      :bind ((\"C-c h\" . helm-mini)))
    (ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally
#+end_src
*** Mode line format

Display a more compact mode line

#+begin_src emacs-lisp
;;(use-package smart-mode-line
;;  :init
;;  (progn
;;  (setq-default
;;   mode-line-format 
;;   '(\"%e\"
;;     mode-line-front-space
;;     mode-line-mule-info
;;     mode-line-client
;;     mode-line-modified
;;     mode-line-remote
;;     mode-line-frame-identification
;;     mode-line-buffer-identification
;;     \"   \"
;;     mode-line-position
;;     (vc-mode vc-mode)
;;     \"  \"
;;     mode-line-modes
;;     mode-line-misc-info
;;     mode-line-end-spaces))))
#+end_src

Hide minor modes I care less about:

#+begin_src emacs-lisp
;;(require 'diminish)
;;(eval-after-load \"yasnippet\" '(diminish 'yas-minor-mode))
;;(eval-after-load \"undo-tree\" '(diminish 'undo-tree-mode))
;;(eval-after-load \"guide-key\" '(diminish 'guide-key-mode))
;;(eval-after-load \"smartparens\" '(diminish 'smartparens-mode))
;;(eval-after-load \"guide-key\" '(diminish 'guide-key-mode))
;;(eval-after-load \"eldoc\" '(diminish 'eldoc-mode))
;;(diminish 'visual-line-mode)
#+end_src

*** Change \"yes or no\" to \"y or n\"

Lazy people like me never want to type \"yes\" when \"y\" will suffice.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)   
#+end_src

*** Minibuffer editing - more space!

    Sometimes you want to be able to do fancy things with the text
    that you're entering into the minibuffer. Sometimes you just want
    to be able to read it, especially when it comes to lots of text.
    This binds =C-M-e= in a minibuffer) so that you can edit the
    contents of the minibuffer before submitting it.


;;  (use-package miniedit
;;    :commands minibuffer-edit
;;    :init (miniedit-install))

*** Set up debug on error

#+begin_src emacs-lisp
(setq debug-on-error t)
#+end_src

*** Set up a light-on-dark color scheme

I like light on dark because I find it to be more restful. The
color-theme in ELPA was a little odd, though, so we define some advice to make
it work. Some things still aren't quite right.

#+begin_src emacs-lisp

;;  (defadvice color-theme-alist (around sacha activate)
;;    (if (ad-get-arg 0)
;;        ad-do-it
;;      nil))
;;  (sacha/package-install 'color-theme)
;;  (defun sacha/setup-color-theme ()
;;    (interactive)
;;    (color-theme-solarized 'dark)
;;    (set-face-foreground 'secondary-selection \"darkblue\")
;;    (set-face-background 'secondary-selection \"lightblue\")
;;    (set-face-background 'font-lock-doc-face \"black\")
;;    (set-face-foreground 'font-lock-doc-face \"wheat\")
;;    (set-face-background 'font-lock-string-face \"black\")
;;    (set-face-foreground 'org-todo \"green\")
;;    (set-face-background 'org-todo \"black\"))
;;
;;  (use-package color-theme
;;    :init
;;    (sacha/setup-color-theme))
#+end_src

I sometimes need to switch to a lighter background for screenshots.
For that, I use =color-theme-vim=.

Some more tweaks to solarized:
#+begin_src emacs-lisp
;;  (custom-set-faces
;;   '(erc-input-face ((t (:foreground \"antique white\"))))
;;   '(helm-selection ((t (:background \"ForestGreen\" :foreground \"black\"))))
;;   '(org-agenda-clocking ((t (:inherit secondary-selection :foreground \"black\"))) t)
;;   '(org-agenda-done ((t (:foreground \"dim gray\" :strike-through nil))))
;;   '(org-done ((t (:foreground \"PaleGreen\" :weight normal :strike-through t))))
;;   '(org-clock-overlay ((t (:background \"SkyBlue4\" :foreground \"black\"))))
;;   '(org-headline-done ((((class color) (min-colors 16) (background dark)) (:foreground \"LightSalmon\" :strike-through t))))
;;   '(outline-1 ((t (:inherit font-lock-function-name-face :foreground \"cornflower blue\")))))
#+end_src

*** Undo tree mode - visualize your undos and branches

People often struggle with the Emacs undo model, where there's really no concept of \"redo\" - you simply undo the undo. 
# 
This lets you use =C-x u= (=undo-tree-visualize=) to visually walk through the changes you've made, undo back to a certain point (or redo), and go down different branches.

#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+end_src

*** Help - guide-key

It's hard to remember keyboard shortcuts. The =guide-key= package pops up help after a short delay.

#+begin_src emacs-lisp
;;(use-package guide-key
;;  :init
;;  (setq guide-key/guide-key-sequence '(\"C-x r\" \"C-x 4\" \"C-c\"))
;;  (guide-key-mode 1))  ; Enable guide-key-mode
#+end_src

*** UTF-8

From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src
*** Killing text

From https://github.com/itsjeyd/emacs-config/blob/emacs24/init.el

#+begin_src emacs-lisp
  (defadvice kill-region (before slick-cut activate compile)
    \"When called interactively with no active region, kill a single line instead.\"
    (interactive
      (if mark-active (list (region-beginning) (region-end))
        (list (line-beginning-position)
          (line-beginning-position 2)))))
#+end_src
** Navigation
*** Pop to mark

Handy way of getting back to previous places.

#+begin_src emacs-lisp
(bind-key \"C-x p\" 'pop-to-mark-command)
(setq set-mark-command-repeat-pop t)
(set-background-color \"pink\")
#+end_src
*** Text size

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font \"Lucida Console-12\") 
(bind-key \"C-+\" 'text-scale-increase)
(bind-key \"C--\" 'text-scale-decrease)
#+end_src

*** Helm-swoop - quickly finding lines

This promises to be a fast way to find things. Let's bind it to =Ctrl-Shift-S= to see if I can get used to that...

#+begin_src emacs-lisp
(use-package helm-swoop
 :bind ((\"C-S-s\" . helm-swoop)))
#+end_src

*** Windmove - switching between windows

Windmove lets you move between windows with something more natural than cycling through =C-x o= (=other-window=).
Windmove doesn't behave well with Org, so we need to use different keybindings.

#+begin_src emacs-lisp
  (use-package windmove
    :bind
    ((\"<f2> <right>\" . windmove-right)
     (\"<f2> <left>\" . windmove-left)
     (\"<f2> <up>\" . windmove-up)
    (\"<f2> <down>\" . windmove-down)))
#+end_src

*** Searching based on the current word

This lets me search up and down. I don't use this often, though.

#+begin_src emacs-lisp
  (defun sacha/search-word-backward ()
    \"Find the previous occurrence of the current word.\"
    (interactive)
    (let ((cur (point)))
      (skip-syntax-backward \"w_\")
      (goto-char
       (if (re-search-backward (concat \"\\\\_<\" (current-word) \"\\\\_>\") nil t)
           (match-beginning 0)
         cur))))
  
  (defun sacha/search-word-forward ()
    \"Find the next occurrence of the current word.\"
    (interactive)
    (let ((cur (point)))
      (skip-syntax-forward \"w_\")
      (goto-char
       (if (re-search-forward (concat \"\\\\_<\" (current-word) \"\\\\_>\") nil t)
           (match-beginning 0)
         cur))))
  (defadvice search-for-keyword (around sacha activate)
    \"Match in a case-insensitive way.\"
    (let ((case-fold-search t))
      ad-do-it))
  (global-set-key '[M-up] 'sacha/search-word-backward)
  (global-set-key '[M-down] 'sacha/search-word-forward)
#+end_src
*** Set up cygwin and bash

 Sets your shell to use cygwin's bash, if Emacs finds it's running
 under Windows and c:\\cygwin exists. Assumes that C:\\cygwin\\bin is
 not already in your Windows Path (it generally should not be).

#+begin_src emacs-lisp
(let* ((cygwin-root \"c:/cygwin\")
       (cygwin-bin (concat cygwin-root \"/bin\")))
  (when (and (eq 'windows-nt system-type)
  	     (file-readable-p cygwin-root))
    
    (setq exec-path (cons cygwin-bin exec-path))
    (setenv \"PATH\" (concat cygwin-bin \";\" (getenv \"PATH\")))
    
    ;; By default use the Windows HOME.
    ;; Otherwise, uncomment below to set a HOME
    ;;      (setenv \"HOME\" (concat cygwin-root \"/home/eric\"))
    
    ;; NT-emacs assumes a Windows shell. Change to bash.
    (setq shell-file-name \"bash\")
    (setenv \"SHELL\" shell-file-name) 
    (setq explicit-shell-file-name shell-file-name) 
    
    ;; This removes unsightly ^M characters that would otherwise
    ;; appear in the output of java applications.
    (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m))) 
#+end_src

*** start server

#+begin_src emacs-lisp
(server-start)
#+end_src

*** replace require

REPLACES ORIGINAL in `C source code' (dumped)
redefine require to leave a trace of packages being loaded
#+begin_src emacs-lisp
(if (not (fboundp 'orig-require))
    (fset 'orig-require (symbol-function 'require))
  (message \"The code to redefine `require' should not be loaded twice\"))

(defvar my/require-depth 0)

(defun require (feature &optional filename noerror)
  \"Leave a trace of packages being loaded.\"
  (cond ((member feature features)
 	 (message \"%sRequiring `%s' (already loaded)\"
 		  (concat (make-string (* 2 my/require-depth) ? ) \"+-> \")
 		  feature))))
 	(t
 	 (message \"%sRequiring `%s'\"
 		  (concat (make-string (* 2 my/require-depth) ? )
 			  \"+-> \")
 		  feature)
 	 (let ((my/require-depth (+ 1 my/require-depth)))
 	   (orig-require feature filename noerror))
 	 (message \"%sRequiring `%s'...done\")
 		  (concat (make-string (* 2 my/require-depth) ? )
 			  \"+-> \"))
#+end_src

*** Set up rectangle mode with cua

#+begin_src emacs-lisp
(setq cua-enable-cua-keys nil) ;; only rectangles
(cua-mode t)
#+end_src

*** Cursor stuff

#+begin_src emacs-lisp
;; Use a bar cursor when mark is active and a region exists.
(defun th-activate-mark-init ()
  (setq cursor-type 'bar))
(add-hook 'activate-mark-hook 'th-activate-mark-init)

(defun th-deactivate-mark-init ()
  (setq cursor-type 'box))
(add-hook 'deactivate-mark-hook 'th-deactivate-mark-init)
 
;; Use a red cursor in overwrite-mode
;;(defvar th--default-cursor-color \"black\")
(defadvice overwrite-mode (after th-overwrite-mode-change-cursor activate)
  \"Change cursor color in override-mode.\"
  (if overwrite-mode
      (progn
        (setq th--default-cursor-color
              (let ((f (face-attribute 'cursor :background)))
                (if (stringp f)
                    f
                  th--default-cursor-color)))
        (set-cursor-color \"red\"))
    (set-cursor-color th--default-cursor-color)))
#+end_src

*** Frequently-accessed files
Registers allow you to jump to a file or other location quickly. To
jump to a register, use =C-x r j= followed by the letter of the
register.

#+begin_src emacs-lisp :results silent
  (mapcar
   (lambda (r)
     (set-register (car r) (cons 'file (cdr r))))
   '((?i . \"~/.emacs.d/Sacha.org\")
     (?o . \"~/personal/organizer.org\")
     (?b . \"~/personal/business.org\")
     (?e . \"~/code/emacs-notes/tasks.org\")
     (?w . \"~/Dropbox/public/sharing/index.org\")
     (?W . \"~/Dropbox/public/sharing/blog.org\")
     (?g . \"~/sachac.github.io/evil-plans/index.org\")
     (?l . \"~/dropbox/public/sharing/learning.org\")))
#+end_src

*** Browse-kill-ring - see what you've cut so that you can paste it   :drill:
    SCHEDULED: <2013-03-03 Sun>
    :PROPERTIES:
    :ID:       508ef5ff-f338-4cd6-8201-9bc76fa432e8
    :DRILL_LAST_INTERVAL: 3.86
    :DRILL_REPEATS_SINCE_FAIL: 2
    :DRILL_TOTAL_REPEATS: 2
    :DRILL_FAILURE_COUNT: 1
    :DRILL_AVERAGE_QUALITY: 2.5
    :DRILL_EASE: 2.36
    :DRILL_LAST_QUALITY: 3
    :DRILL_LAST_REVIEWED: [2013-02-27 Wed 21:18]
    :END:

Make sense of the kill ring! This lets you list the contents of the
kill ring and paste a specific item. You can also manipulate your kill
ring contents.

If you're new to Emacs, you might not yet know about what the kill
ring is. It stores the items that you cut (or kill, in Emacs terms).
You're not limited to pasting just the most recent item - you can
paste the second-to-the-last item you cut, and so on. I remember to
use =C-y= and =M-y= when going backwards in the kill ring, but I never
quite remember how to go forward, so browse-kill-ring makes it easier.

#+begin_src emacs-lisp
;; (sacha/package-install 'browse-kill-ring)
;;  (use-package browse-kill-ring
;;    :init 
;;    (progn 
;;      (browse-kill-ring-default-keybindings) ;; M-y
;;      (setq browse-kill-ring-quit-action 'save-and-restore)))      
#+end_src

*** Key chords 
I'm on a Dvorak keyboard, so these might not work for you.
Experimenting with this. =key-chord= lets you define keyboard
shortcuts that use ordinary keys.

#+begin_src emacs-lisp
;;  (use-package key-chord
;;    :init
;;    (progn 
;;      (key-chord-mode 1)
;;      (key-chord-define-global \"cg\"     'undo)
;;      (key-chord-define-global \"yp\"     'other-window)))
#+end_src

*** Some unrelated little ones -- got org fatigue

#+begin_src emacs-lisp
(defalias 'list-buffers 'ibuffer)
(setq visible-bell t)
(desktop-save-mode 1)
(tooltip-mode 1)
(setq tooltip-use-echo-area t)
(setq delete-by-moving-to-trash t)
#+end_src

*** Smartscan

From https://github.com/itsjeyd/emacs-config/blob/emacs24/init.el

#+begin_src emacs-lisp
;;(use-package smartscan
;;  :init (global-smartscan-mode t))
#+end_src

*** escreen

#+begin_src emacs-lisp
(load \"escreen\")
(escreen-install)
#+end_src
*** w3m

#+begin_src emacs-lisp
(setq w3m-command \"c:/cygwin/bin/w3m.exe\")
#+end_src
*** Remind and remind.conf
*** Planner
*** Deft

http://jblevins.org/projects/deft
#+begin_src emacs-lisp

(when (require 'deft nil 'noerror) 
  (setq
   deft-extension \"org\"
   deft-directory \"~/Dropbox/deft/\"
   deft-text-mode 'org-mode)
  (global-set-key (kbd \"<f8>\") 'deft))
(setq deft-use-filename-as-title t)
(require 'deft)
(setq deft-use-filename-as-title t)
#+end_src

*** Dired

From http://www.masteringemacs.org/articles/2011/03/25/working-multiple-files-dired/

#+begin_src emacs-lisp
(require 'find-dired)
(setq find-ls-option '(\"-print0 | xargs -0 ls -ld\" . \"-ld\"))
#+end_src
** Reading

https://github.com/xahlee/xah_emacs_init/blob/master/xah_emacs_font.el
From Xah Lee:

#+begin_src emacs-lisp
(defun xah-toggle-margin-right ()
  \"Toggle the right margin between `fill-column' or window width.
This command is convenient when reading novel, documentation.\"
  (interactive)
  (if (eq (cdr (window-margins)) nil)
      (set-window-margins nil 0 (- (window-body-width) fill-column))
    (set-window-margins nil 0 0)))
(set-background-color \"yellow\")
#+end_src
** Writing
*** Avoiding weasel words
    #+begin_src emacs-lisp
;;      (use-package artbollocks-mode
;;        :init
;;        (progn
;;          (setq artbollocks-weasel-words-regex
;;                (concat \"\\\\b\" (regexp-opt
;;                               '(\"one of the\"
;;                                 \"should\"
;;                                 \"just\"
;;                                 \"sort of\"
;;                                 \"a lot\"
;;                                 \"probably\"
;;                                 \"maybe\"
;;                                 \"perhaps\"
;;                                 \"I think\"
;;                                 \"really\"
;;                                 \"pretty\"
;;                                 \"nice\"
;;                                 \"action\"
;;                                 \"utilize\"
;;                                 \"leverage\") t) \"\\\\b\"))
          ;; Don't show the art critic words, or at least until I figure
          ;; out my own jargon
;;          (setq artbollocks-jargon nil)))
#+end_src

*** Unfill paragraph

I unfill paragraphs a lot because Wordpress likes adding extra =<br>= tags if I don't. (I should probably just tweak my Wordpress installation.)

#+begin_src emacs-lisp
  (defun sacha/unfill-paragraph (&optional region)
    \"Takes a multi-line paragraph and makes it into a single line of text.\"
    (interactive (progn
                   (barf-if-buffer-read-only)
                   (list t)))
    (let ((fill-column (point-max)))
      (fill-paragraph nil region)))
(bind-key \"M-Q\" 'sacha/unfill-paragraph)
#+end_src

I never actually justify text, so I might as well change the way
=fill-paragraph= works. With the code below, =M-q= will fill the
paragraph normally, and =C-u M-q= will unfill it.

#+begin_src emacs-lisp
  (defun sacha/fill-or-unfill-paragraph (&optional unfill region)
    \"Fill paragraph (or REGION).
  With the prefix argument UNFILL, unfill it instead.\"
    (interactive (progn
                   (barf-if-buffer-read-only)
                   (list (if current-prefix-arg 'unfill) t)))
    (let ((fill-column (if unfill (point-max) fill-column)))
      (fill-paragraph nil region)))
(bind-key \"M-q\" 'sacha/fill-or-unfill-paragraph)
#+end_src

Also, =visual-line-mode= is so much better than =auto-fill-mode=. It doesn't actually break the text into multiple lines - it only looks that way.

#+begin_src emacs-lisp
(remove-hook 'text-mode-hook #'turn-on-auto-fill)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+end_src
*** Transpose

#+begin_src emacs-lisp
;; Transpose stuff with M-t
(bind-key \"M-t\" nil) ;; which used to be transpose-words
(bind-key \"M-t l\" 'transpose-lines)
(bind-key \"M-t w\" 'transpose-words)
(bind-key \"M-t t\" 'transpose-words)
(bind-key \"M-t M-t\" 'transpose-words)
(bind-key \"M-t s\" 'transpose-sexps)
#+end_src
** Org

I use [[http://www.orgmode.org][Org Mode]] to take notes, publish my blog, and do all sorts of
stuff.

*** My files

#<<org-files>>

Here are the Org files I use. I should probably organize them better. =)

| organizer.org        | My main Org file. Inbox for M-x org-capture, tasks, weekly reviews, etc.                          |
| business.org         | Business-related notes and TODOs                                                                  |
| people.org           | People-related tasks                                                                              |
| [[http://sachachua.com/evil-plans][evil-plans/index.org]] | High-level goals                                                                                  |
| [[http://sachachua.com/outline][sharing/index.org]]    | Things to write about                                                                             |
| decisions.org        | Pending, current, and reviewed decisions                                                          |
| [[http://sachachua.com/blog/index][blog.org]]             | Topic index for my blog                                                                           |
| [[http://sachachua.com/my-learning][learning.org]]         | Learning plan                                                                                     |
| outline.org          | Huge outline of notes by category                                                                 |
| tracking.org         | Temporary Org file for tracking various things                                                    |
| delegation.org       | Templates for assigning tasks - now using Google Docs instead                                     |
| books.org            | Huge file with book notes                                                                         |
| calendar.org         | Used to use this with ical2org, but have been having problems with ical2org lately; no longer use |
| ideal.org            | Planning ideal days                                                                               |
| archive.org          | Archived subtrees                                                                                 |
| latin.org            | Latin notes                                                                                       |
| 101things.org        | Old goals for 101 things in 1001 days                                                             |
| life.org             | Questions, processes, tools                                                                       |

*** Modules
Org has a whole bunch of optional modules. These are the ones I'm
currently experimenting with.
#+begin_src emacs-lisp
  (setq org-modules '(org-bbdb 
                      org-gnus
                      org-drill
                      org-info
                      org-habit
                      org-irc
                      org-mouse
                      org-annotate-file
                      org-eval
                      org-expiry
                      org-interactive-query
                      org-man
                      org-panel
                      org-screen
                      org-toc))
(org-load-modules-maybe t)
(setq org-expiry-inactive-timestamps t)
#+end_src

*** Keyboard shortcuts

    #+begin_src emacs-lisp
(defun reindent-whole-buffer ()
  \"Reindent the whole buffer.\"
  (interactive)
  (indent-region (point-min)
                 (point-max)))

(setq w32-pass-apps-to-system nil
      w32-apps-modifier 'super)
(setq <apps> 'super) ;; Menu key
(defun insert-date-stamp()
  (interactive)
  (insert (org-read-date)))
(set-background-color \"white\")
(global-set-key (kbd \"<f5> b\") 'shell-command)
(global-set-key (kbd \"<f5> s\") 'replace-string)
(global-set-key (kbd \"<f5> c\") 'org-w3m-copy-for-org-mode)
(global-set-key (kbd \"<f5> l\") 'getskd)
(global-set-key (kbd \"<f9>\") 'escreen-prefix)
(global-set-key (kbd \"s-c\") 'calendar)
(global-set-key (kbd \"s-d\") 'insert-date-stamp)
(global-set-key (kbd \"s-i\") 'imenu-anywhere)
(global-set-key (kbd \"s-t\") 'orgtbl-mode)
(global-set-key (kbd \"s-r\") 'revert-buffer)
(global-set-key (kbd \"s-s\") 'mwh-create-set)
(global-set-key (kbd \"s-q\") 'reindent-whole-buffer)
(global-set-key (kbd \"<f7> t\") 'planner-create-task-from-buffer)
(global-set-key (kbd \"<f7> r\") 'remember)
(global-set-key (kbd \"<f7> c\") 'remember-region)
(global-set-key (kbd \"<f7> n\") 'planner-create-note-from-task)

      (bind-key \"C-c r\" 'org-capture)
      (bind-key \"C-c a\" 'org-agenda)
      (bind-key \"C-c l\" 'org-store-link)
      (bind-key \"C-c L\" 'org-insert-link-global)
      (bind-key \"C-c O\" 'org-open-at-point-global)
;;      (bind-key \"<f9> <f9>\" 'org-agenda-list)
;;      (bind-key \"<f9> <f8>\" (lambda () (interactive) (org-capture nil \"r\")))
      (bind-key \"C-TAB\" 'org-cycle org-mode-map)
      (bind-key \"C-c v\" 'org-show-todo-tree org-mode-map)
      (bind-key \"C-c C-r\" 'org-refile org-mode-map)
;;      (bind-key \"C-c R\" 'org-reveal org-mode-map)
(set-background-color \"green\")
#+end_src

=append-next-kill= is more useful to me than =org-table-copy-region=.

#+begin_src emacs-lisp
  (eval-after-load 'org
    '(progn
       (bind-key \"s-k\" 'append-next-kill org-mode-map)))
#+end_src

I don't use the diary, but I do use the clock a lot.

#+begin_src emacs-lisp
  (use-package org-agenda
    :init (bind-key \"i\" 'org-agenda-clock-in org-agenda-mode-map))
#+end_src
    
*** Navigation

From http://stackoverflow.com/questions/15011703/is-there-an-emacs-org-mode-command-to-jump-to-an-org-heading
#+begin_src emacs-lisp
  (setq org-goto-interface 'outline
        org-goto-max-level 10)
  (require 'imenu)
  (bind-key \"M-o\" 'imenu)
  (bind-key \"C-c j\" 'org-clock-goto) ;; jump to current task from anywhere
  (setq org-cycle-include-plain-lists 'integrate)
#+end_src

*** Link Org subtrees and navigate between them
The following code makes it easier for me to link trees with entries, as in http://sachachua.com/evil-plans

#+begin_src emacs-lisp
(defun sacha/org-follow-entry-link ()
  \"Follow the defined link for this entry.\"
  (interactive)
  (if (org-entry-get (point) \"LINK\")
      (org-open-link-from-string (org-entry-get (point) \"LINK\"))
    (org-open-at-point)))

(bind-key \"C-c o\" 'sacha/org-follow-entry-link org-mode-map)

(defun sacha/org-link-projects (location)
  \"Add link properties between the current subtree and the one specified by LOCATION.\"
  (interactive
   (list (let ((org-refile-use-cache nil))
     (org-refile-get-location \"Location\"))))
  (let ((link1 (org-store-link nil)) link2)
    (save-window-excursion
      (org-refile 4 nil location)
      (setq link2 (org-store-link nil))
      (org-set-property \"LINK\" link1))
    (org-set-property \"LINK\" link2)))
#+end_src

*** Taking notes

    My org files are in my =personal= directory, which is actually a
    symlink to a directory in my Dropbox. That way, I can update my
    Org files from multiple computers.
    
#+begin_src emacs-lisp
  (setq org-directory \"~/personal\")
  (setq org-default-notes-file \"~/personal/organizer.org\")
#+end_src

This makes it easier to add links from outside.

#+begin_src emacs-lisp
(defun sacha/yank-more ()
  (interactive)
  (insert \"[[\")
  (yank)
  (insert \"][more]]\"))
(global-set-key (kbd \"<f6>\") 'sacha/yank-more)
#+end_src

**** Templates

     I use =org-capture= templates to quickly jot down tasks, ledger
     entries, notes, and other semi-structured pieces of information.
#+begin_src emacs-lisp     
  (defvar sacha/org-basic-task-template \"* TODO %^{Task}    
  SCHEDULED: %^t
  %?
  :PROPERTIES:
  :Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}
  :END:\" \"Basic task data\")
  (setq org-capture-templates
        `((\"t\" \"Tasks\" entry 
           (file+headline \"~/personal/organizer.org\" \"Tasks\")
           ,sacha/org-basic-task-template)
          (\"b\" \"Business task\" entry
           (file+headline \"~/personal/business.org\" \"Tasks\")
           ,sacha/org-basic-task-template)
          (\"p\" \"People task\" entry
           (file+headline \"~/personal/people.org\" \"Tasks\")
           ,sacha/org-basic-task-template)
          (\"db\" \"Done - Business\" entry
           (file+headline \"~/personal/business.org\" \"Tasks\")
           \"* DONE %^{Task}\\nSCHEDULED: %^t\\n%?\")
          (\"dp\" \"Done - People\" entry
           (file+headline \"~/personal/people.org\" \"Tasks\")
           \"* DONE %^{Task}\\nSCHEDULED: %^t\\n%?\")
          (\"dt\" \"Done - Task\" entry
           (file+headline \"~/personal/organizer.org\" \"Tasks\")
           \"* DONE %^{Task}\\nSCHEDULED: %^t\\n%?\")
          (\"q\" \"Quick note\" item
           (file+headline \"~/personal/organizer.org\" \"Quick notes\"))
          (\"l\" \"Ledger entries\")
          (\"lm\" \"MBNA\" plain
           (file \"~/personal/ledger\")
           \"%(org-read-date) %^{Payee}
    Liabilities:MBNA  
    Expenses:%^{Account}  $%^{Amount}
  \" :immediate-finish)
          (\"ln\" \"No Frills\" plain
           (file \"~/personal/ledger\")
           \"%(let ((org-read-date-prefer-future nil)) (org-read-date)) * No Frills
    Liabilities:MBNA  
    Assets:Wayne:Groceries  $%^{Amount}
  \" :immediate-finish)    
          (\"lc\" \"Cash\" plain
           (file \"~/personal/ledger\")
           \"%(org-read-date) * %^{Payee}
    Expenses:Cash 
    Expenses:%^{Account}  %^{Amount}
  \")             
          (\"b\" \"Book\" entry
           (file+datetree \"~/personal/books.org\" \"Inbox\")
           \"* %^{Title}  %^g
  %i
  ,*Author(s):* %^{Author} \\\\\\\\
  ,*ISBN:* %^{ISBN}

  %?

  ,*Review on:* %^t \\\\
  %a
  %U\"
           :clock-in :clock-resume)
           (\"c\" \"Contact\" entry (file \"~/personal/contacts.org\")
            \"* %(org-contacts-template-name)
  :PROPERTIES:
  :EMAIL: %(org-contacts-template-email)
  :END:\")
           (\"n\" \"Daily note\" table-line (file+olp \"~/personal/organizer.org\" \"Daily notes\")
            \"| %u | %^{Note} |\"
            :immediate-finish)
           (\"r\" \"Notes\" entry
            (file+datetree \"~/personal/organizer.org\")
            \"* %?\\n\\n%i\\n\"
            )))
  (bind-key \"C-M-r\" 'org-capture)
#+end_src
***** Allow refiling in the middle(ish) of a capture

This lets me use =C-c C-r= to refile a capture and then jump to the
new location. I wanted to be able to file tasks under projects so that
they could inherit the QUANTIFIED property that I use to track time
(and any Beeminder-related properties too), but I also wanted to be
able to clock in on them.

#+begin_src emacs-lisp
  (defun sacha/org-capture-refile-and-jump ()
    (interactive)
    (org-capture-refile)
    (org-refile-goto-last-stored))
  (require 'org-capture)
  (bind-key \"C-c C-r\" 'sacha/org-capture-refile-and-jump org-capture-mode-map)
#+end_src

**** Refiling

=org-refile= lets you organize notes by typing in the headline to file them under.

    #+begin_src emacs-lisp
      (setq org-reverse-note-order t)
      (setq org-refile-use-outline-path nil)
      (setq org-refile-allow-creating-parent-nodes 'confirm)
      (setq org-refile-use-cache nil)
      (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
      (setq org-blank-before-new-entry nil)
    #+end_src
    
**** Estimating WPM

     I'm curious about how fast I type some things.
#+begin_src emacs-lisp
;;(require 'org-clock)
;;(defun sacha/org-entry-wpm ()
;;  (interactive)
;;  (save-restriction
;;    (save-excursion
;;      (org-narrow-to-subtree)
;;      (goto-char (point-min))
;;      (let* ((words (count-words-region (point-min) (point-max)))
;;	     (minutes (org-clock-sum-current-item))
;;	     (wpm (/ words minutes)))
;;	(message \"WPM: %d (words: %d, minutes: %d)\" wpm words minutes)
;;	(kill-new (number-to-string wpm))))))
#+end_src

*** Managing tasks
**** Track TODO state
<<todo-keywords>>

The parentheses indicate keyboard shortcuts that I can use to set the task state. @ and ! toggle logging.

#+begin_src emacs-lisp
       (setq org-todo-keywords
        '((sequence
           \"TODO(t)\"  ; next action
           \"TOBLOG(b)\"  ; next action
           \"STARTED(s)\"
           \"WAITING(w@/!)\"
           \"SOMEDAY(.)\" \"|\" \"DONE(x!)\" \"CANCELLED(c@)\")
          (sequence \"TODELEGATE(-)\" \"DELEGATED(d)\" \"COMPLETE(x)\")))
#+end_src

#+begin_src emacs-lisp
(setq org-todo-keyword-faces
      '((\"TODO\" . (:foreground \"green\" :weight bold))
        (\"DONE\" . (:foreground \"cyan\" :weight bold))
        (\"WAITING\" . (:foreground \"red\" :weight bold))
        (\"SOMEDAY\" . (:foreground \"gray\" :weight bold))))
#+end_src     

**** Projects

Projects are headings with the =:project:= tag, so we generally don't
want that tag inherited, except when we display unscheduled tasks that
don't belong to any projects.

     #+begin_src emacs-lisp
       (setq org-tags-exclude-from-inheritance '(\"project\"))
     #+end_src

This code makes it easy for me to focus on one project and its tasks.

#+begin_src emacs-lisp
  (add-to-list 'org-speed-commands-user '(\"N\" org-narrow-to-subtree))
  (add-to-list 'org-speed-commands-user '(\"W\" widen))
  (defun sacha/org-agenda-for-subtree ()
    (interactive)
    (if (derived-mode-p 'org-agenda-mode)
      (let* ((marker (or (org-get-at-bol 'org-marker)
                         (org-agenda-error)))
             (hdmarker (or (org-get-at-bol 'org-hd-marker) marker))
             (pos (marker-position marker))
             (col (current-column))
             newhead)
        (org-with-remote-undo (marker-buffer marker)
          (with-current-buffer (marker-buffer marker)
            (widen)
            (let ((org-agenda-view-columns-initially t))
              (org-agenda nil \"t\" 'subtree)))))
      (let ((org-agenda-view-columns-initially t))
        (org-agenda nil \"t\" 'subtree))))
  (add-to-list 'org-speed-commands-user '(\"T\" sacha/org-agenda-for-subtree))
#+end_src

There's probably a proper way to do this, maybe with =<=. Oh, that would work nicely. =< C-c a t= too.

**** Tag tasks with GTD-ish contexts

This defines keyboard shortcuts for those, too.

     #+begin_src emacs-lisp
              (setq org-tag-alist '((\"@work\" . ?b) 
                                    (\"@home\" . ?h) 
                                    (\"@writing\" . ?w)
                                    (\"@errands\" . ?e) 
                                    (\"@drawing\" . ?d)
                                    (\"@coding\" . ?c)
                                    (\"@phone\" . ?p)
                                    (\"@reading\" . ?r)
                                    (\"@computer\" . ?l)
                                    (\"quantified\" . ?q)
                                    (\"lowenergy\" . ?0)
                                    (\"highenergy\" . ?1)))
     #+end_src
**** Enable filtering by effort estimates

That way, it's easy to see short tasks that I can finish.

#+begin_src emacs-lisp
  (add-to-list 'org-global-properties
        '(\"Effort_ALL\". \"0:05 0:15 0:30 1:00 2:00 3:00 4:00\"))
#+end_src
     
**** Track time

#+begin_src emacs-lisp
  (setq org-clock-idle-time nil)
  (setq org-log-done 'time)
  (setq org-clock-persist t)
  (org-clock-persistence-insinuate)
  (setq org-clock-report-include-clocking-task t)
  (defadvice org-clock-in (after sacha activate)
    \"Mark STARTED when clocked in.\"
    (save-excursion
      (catch 'exit
        (cond
         ((derived-mode-p 'org-agenda-mode)
          (let* ((marker (or (org-get-at-bol 'org-marker)
                             (org-agenda-error)))
                 (hdmarker (or (org-get-at-bol 'org-hd-marker) marker))
                 (pos (marker-position marker))
                 (col (current-column))
                 newhead)
            (org-with-remote-undo (marker-buffer marker)
              (with-current-buffer (marker-buffer marker)
                (widen)
                (goto-char pos)
                (org-back-to-heading t)
                (if (org-get-todo-state)
                    (org-todo \"STARTED\"))))))
         (t (if (org-get-todo-state)
                    (org-todo \"STARTED\")))))))
#+end_src
     
Too many clock entries clutter up a heading.

#+begin_src emacs-lisp
(setq org-log-into-drawer \"LOGBOOK\")
(setq org-clock-into-drawer 1)
#+end_src

**** Habits

     I like using org-habits to track consistency. My task names tend
     to be a bit long, though, so I've configured the graph column to
     show a little bit more to the right.
     
#+begin_src emacs-lisp
(setq org-habit-graph-column 80)
(setq org-habit-show-habits-only-for-today nil)
#+end_src

If you want to use habits, be sure to schedule your tasks and add a STYLE property with the value of =habit= to the tasks you want displayed.

*** Estimating tasks

From \"Add an effort estimate on the fly when clocking in\" on the
[[http://orgmode.org/worg/org-hacks.html][Org Hacks]] page:

#+begin_src emacs-lisp
(add-hook 'org-clock-in-prepare-hook
          'sacha/org-mode-ask-effort)

(defun sacha/org-mode-ask-effort ()
  \"Ask for an effort estimate when clocking in.\"
  (unless (org-entry-get (point) \"Effort\")
    (let ((effort
           (completing-read
            \"Effort: \"
            (org-entry-get-multivalued-property (point) \"Effort\"))))
      (unless (equal effort \"\")
        (org-set-property \"Effort\" effort)))))
#+end_src

# <<subset>>
*** Modifying org agenda so that I can display a subset of tasks

I want to create an agenda command that displays a list of tasks by
context. That way, I can quickly preview a bunch of contexts and
decide what I feel like doing the most.

#+begin_src emacs-lisp
  (defvar sacha/org-agenda-limit-items nil \"Number of items to show in agenda to-do views; nil if unlimited.\")
  (defadvice org-agenda-finalize-entries (around sacha activate)
    (if sacha/org-agenda-limit-items
        (progn
          (setq list (mapcar 'org-agenda-highlight-todo list))
          (setq ad-return-value
                (subseq list 0 sacha/org-agenda-limit-items))
          (when org-agenda-before-sorting-filter-function
            (setq list (delq nil (mapcar org-agenda-before-sorting-filter-function list))))
          (setq ad-return-value
                (mapconcat 'identity
                           (delq nil 
                                 (subseq
                                  (sort list 'org-entries-lessp)
                                  0
                                  sacha/org-agenda-limit-items))
                           \"\\n\")))
      ad-do-it))
#+end_src

*** Flexible scheduling of tasks

I (theoretically) want to be able to schedule tasks for dates like the first Saturday
of every month. Fortunately, [[http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month][someone else has figured that out!]]

#+begin_src emacs-lisp
;; Get this from https://raw.github.com/chenfengyuan/elisp/master/next-spec-day.el
;(load-file \"~/elisp/next-spec-day.el\")
#+end_src

*** Org agenda
**** Basic configuration
I have quite a few Org files, but I keep my agenda items and TODOs in
only a few of them them for faster scanning.

#+begin_src emacs-lisp
;;  (setq org-agenda-files '(
;;                           \"~/personal/organizer.org\"
;;                           \"~/personal/people.org\"
;;                           \"~/personal/business.org\"
;;                           \"~/Dropbox/public/sharing/index.org\"
;;                           \"~/dropbox/public/learning.org\"
;;                           \"~/code/emacs-notes/tasks.org\"
;;                           \"~/sachac.github.io/evil-plans/index.org\"
;;                           \"~/personal/routines.org\"
;;                           ))
#+end_src

I like looking at two days at a time when I plan using the Org
agenda. I want to see my log entries, but I don't want to see
scheduled items that I've finished. I like seeing a time grid so that
I can get a sense of how appointments are spread out.

#+begin_src emacs-lisp
  (setq org-agenda-span 2)
  (setq org-agenda-sticky nil)
  (setq org-agenda-show-log t)
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-time-grid
        '((daily today require-timed)
         \"----------------\"
         (800 1000 1200 1400 1600 1800)))
  (setq org-columns-default-format \"%50ITEM %12SCHEDULED %TODO %3PRIORITY %Effort{:} %TAGS\")
#+end_src

Some other keyboard shortcuts:

#+begin_src emacs-lisp
(bind-key \"Y\" 'org-agenda-todo-yesterday org-agenda-mode-map)
#+end_src

# <<project_subtasks>>
**** Starting my weeks on Saturday

I like looking at weekends as [[http://sachachua.com/blog/2010/11/week-beginnings/][week beginnings]] instead, so I want the
Org agenda to start on Saturdays.

#+begin_src emacs-lisp
;;(setq org-agenda-start-on-weekday 6)
#+end_src

**** Display projects with associated subtasks

I wanted a view that showed projects with a few subtasks underneath
them. Here's a sample of the output:

#+begin_example
Headlines with TAGS match: +PROJECT
Press `C-u r' to search again with new search string
  organizer:  Set up communication processes for Awesome Foundation Toronto
  organizer:  TODO Announce the next pitch night
  organizer:  TODO Follow up with the winner of the previous pitch night for any news to include in the updates

  organizer:  Tidy up the house so that I can find things quickly
  organizer:  TODO Inventory all the things in closets and boxes         :@home:
  organizer:  TODO Drop things off for donation                       :@errands:

  organizer:  Learn how to develop for Android devices
#+end_example

#+begin_src emacs-lisp  
  (defun sacha/org-agenda-project-agenda ()
    \"Return the project headline and up to `sacha/org-agenda-limit-items' tasks.\"
    (save-excursion
      (let* ((marker (org-agenda-new-marker))
             (heading
              (org-agenda-format-item \"\" (org-get-heading) (org-get-category) nil))
             (org-agenda-restrict t)
             (org-agenda-restrict-begin (point))
             (org-agenda-restrict-end (org-end-of-subtree 'invisible))
             ;; Find the TODO items in this subtree
             (list (org-agenda-get-day-entries (buffer-file-name) (calendar-current-date) :todo)))
        (org-add-props heading
            (list 'face 'defaults
                  'done-face 'org-agenda-done
                  'undone-face 'default
                  'mouse-face 'highlight
                  'org-not-done-regexp org-not-done-regexp
                  'org-todo-regexp org-todo-regexp
                  'org-complex-heading-regexp org-complex-heading-regexp
                  'help-echo
                  (format \"mouse-2 or RET jump to org file %s\"
                          (abbreviate-file-name
                           (or (buffer-file-name (buffer-base-buffer))
                               (buffer-name (buffer-base-buffer))))))
          'org-marker marker
          'org-hd-marker marker
          'org-category (org-get-category)
          'type \"tagsmatch\")
        (concat heading \"\\n\"
                (org-agenda-finalize-entries list)))))
          
    (defun sacha/org-agenda-projects-and-tasks (match)
      \"Show TODOs for all `org-agenda-files' headlines matching MATCH.\"
      (interactive \"MString: \")
      (let ((todo-only nil))
        (if org-agenda-overriding-arguments
            (setq todo-only (car org-agenda-overriding-arguments)
                  match (nth 1 org-agenda-overriding-arguments)))
        (let* ((org-tags-match-list-sublevels
                org-tags-match-list-sublevels)
               (completion-ignore-case t)
               rtn rtnall files file pos matcher
               buffer)
          (when (and (stringp match) (not (string-match \"\\\\S-\" match)))
            (setq match nil))
          (setq matcher (org-make-tags-matcher match)
                match (car matcher) matcher (cdr matcher))
          (catch 'exit
            (if org-agenda-sticky
                (setq org-agenda-buffer-name
                      (if (stringp match)
                          (format \"*Org Agenda(%s:%s)*\"
                                  (or org-keys (or (and todo-only \"M\") \"m\")) match)
                        (format \"*Org Agenda(%s)*\" (or (and todo-only \"M\") \"m\")))))
            (org-agenda-prepare (concat \"TAGS \" match))
            (org-compile-prefix-format 'tags)
            (org-set-sorting-strategy 'tags)
            (setq org-agenda-query-string match)
            (setq org-agenda-redo-command
                  (list 'org-tags-view `(quote ,todo-only)
                        (list 'if 'current-prefix-arg nil `(quote ,org-agenda-query-string))))
            (setq files (org-agenda-files nil 'ifmode)
                  rtnall nil)
            (while (setq file (pop files))
              (catch 'nextfile
                (org-check-agenda-file file)
                (setq buffer (if (file-exists-p file)
                                 (org-get-agenda-file-buffer file)
                               (error \"No such file %s\" file)))
                (if (not buffer)
                    ;; If file does not exist, error message to agenda
                    (setq rtn (list
                               (format \"ORG-AGENDA-ERROR: No such org-file %s\" file))
                          rtnall (append rtnall rtn))
                  (with-current-buffer buffer
                    (unless (derived-mode-p 'org-mode)
                      (error \"Agenda file %s is not in `org-mode'\" file))
                    (save-excursion
                      (save-restriction
                        (if org-agenda-restrict
                            (narrow-to-region org-agenda-restrict-begin
                                              org-agenda-restrict-end)
                          (widen))
                        (setq rtn (org-scan-tags 'sacha/org-agenda-project-agenda matcher todo-only))
                        (setq rtnall (append rtnall rtn))))))))
            (if org-agenda-overriding-header
                (insert (org-add-props (copy-sequence org-agenda-overriding-header)
                            nil 'face 'org-agenda-structure) \"\\n\")
              (insert \"Headlines with TAGS match: \")
              (add-text-properties (point-min) (1- (point))
                                   (list 'face 'org-agenda-structure
                                         'short-heading
                                         (concat \"Match: \" match)))
              (setq pos (point))
              (insert match \"\\n\")
              (add-text-properties pos (1- (point)) (list 'face 'org-warning))
              (setq pos (point))
              (unless org-agenda-multi
                (insert \"Press `C-u r' to search again with new search string\\n\"))
              (add-text-properties pos (1- (point)) (list 'face 'org-agenda-structure)))
            (org-agenda-mark-header-line (point-min))
            (when rtnall
              (insert (mapconcat 'identity rtnall \"\\n\") \"\"))
            (goto-char (point-min))
            (or org-agenda-multi (org-agenda-fit-window-to-buffer))
            (add-text-properties (point-min) (point-max)
                                 `(org-agenda-type tags
                                                   org-last-args (,todo-only ,match)
                                                   org-redo-cmd ,org-agenda-redo-command
                                                   org-series-cmd ,org-cmd))
            (org-agenda-finalize)
            (setq buffer-read-only t)))))
#+end_src

# <<agenda_commands>>

**** Org agenda custom commands

There are quite a few custom commands here, and I often forget to use
them. =) But it's good to define them, and over time, I'll get the
hang of using these more!

| Key         | Description                                                                                    |
| .           | What am I waiting for?                                                                         |
| T           | Not really an agenda command - shows the to-do tree in the current file                        |
| b           | Shows business-related tasks                                                                   |
| o           | Shows personal tasks and miscellaneous tasks (o: organizer)                                    |
| w           | Show all tasks for the upcoming week                                                           |
| W           | Show all tasks for the upcoming week, aside from the routine ones                              |
| g ...       | Show tasks by context: b - business; c - coding; w - writing; p - phone; d - drawing, h - home |
| 0           | Show common contexts with up to 3 tasks each, so that I can choose what I feel like working on |
| ) (shift-0) | Show common contexts with all the tasks associated with them                                   |
| 9           | Show common contexts with up to 3 unscheduled tasks each                                       |
| ( (shift-9) | Show common contexts with all the unscheduled tasks associated with them                       |
| d           | Timeline for today (agenda, clock summary)                                                     |
| u           | Unscheduled tasks to do if I have free time                                                    |
| U           | Unscheduled tasks that are not part of projects                                                |
| P           | Tasks by priority                                                                              |
| p           | My projects                                                                                    |
| 2           | Projects with tasks                                                                            |

#+begin_src emacs-lisp
    (defvar sacha/org-agenda-contexts
      '((tags-todo \"+@phone\")
        (tags-todo \"+@work\")
        (tags-todo \"+@drawing\")
        (tags-todo \"+@coding\")
        (tags-todo \"+@writing\")
        (tags-todo \"+@computer\")
        (tags-todo \"+@home\")
        (tags-todo \"+@errands\"))
      \"Usual list of contexts.\")
    (defun sacha/org-agenda-skip-scheduled ()
      (org-agenda-skip-entry-if 'scheduled 'deadline 'regexp \"\\n]+>\"))
    (setq org-agenda-custom-commands
          `((\"T\" todo-tree \"TODO\")
            (\"b\" todo \"\"
             ((org-agenda-files '(\"~/personal/business.org\"))))
            (\"o\" todo \"\"
             ((org-agenda-files '(\"~/personal/organizer.org\"))))
            (\"c\" todo \"\"
             ((org-agenda-prefix-format \"\")
              (org-agenda-cmp-user-defined 'sacha/org-sort-agenda-items-todo)
              (org-agenda-view-columns-initially t)
              ))
            ;; Weekly review
            (\"w\" \"Weekly review\" agenda \"\"
             ((org-agenda-span 7)
              (org-agenda-log-mode 1)))
            (\"W\" \"Weekly review sans routines\" agenda \"\" 
             ((org-agenda-span 7) 
              (org-agenda-log-mode 1)
              (org-agenda-tag-filter-preset '(\"-routine\"))))
            (\"2\" \"Bi-weekly review\" agenda \"\" ((org-agenda-span 14) (org-agenda-log-mode 1)))
            (\"gb\" \"Business\" todo \"\"  
             ((org-agenda-files '(\"~/personal/business.org\"))
              (org-agenda-view-columns-initially t)))
            (\"gc\" \"Coding\" tags-todo \"@coding\" 
             ((org-agenda-view-columns-initially t)))
            (\"gw\" \"Writing\" tags-todo \"@writing\"
             ((org-agenda-view-columns-initially t)))
            (\"gp\" \"Phone\" tags-todo \"@phone\"
             ((org-agenda-view-columns-initially t)))
            (\"gd\" \"Drawing\" tags-todo \"@drawing\"
             ((org-agenda-view-columns-initially t)))
            (\"gh\" \"Home\" tags-todo \"@home\"
             ((org-agenda-view-columns-initially t)))
            (\"ge\" \"Errands\" tags-todo \"@errands\"
             ((org-agenda-view-columns-initially t)))
            (\"0\" \"Top 3 by context\"
             ,sacha/org-agenda-contexts
             ((org-agenda-sorting-strategy '(priority-up effort-down))
              (sacha/org-agenda-limit-items 3)))
            (\")\" \"All by context\"
             ,sacha/org-agenda-contexts
             ((org-agenda-sorting-strategy '(priority-down effort-down))
              (sacha/org-agenda-limit-items nil)))
            (\"9\" \"Unscheduled top 3 by context\"
             ,sacha/org-agenda-contexts
             ((org-agenda-skip-function 'sacha/org-agenda-skip-scheduled)
              (org-agenda-sorting-strategy '(priority-down effort-down))
              (sacha/org-agenda-limit-items 3)))
            (\"(\" \"All unscheduled by context\"
             ,sacha/org-agenda-contexts
             ((org-agenda-skip-function 'sacha/org-agenda-skip-scheduled)
              (org-agenda-sorting-strategy '(priority-down effort-down))
              ))
            (\"d\" \"Timeline for today\" ((agenda \"\" ))
             ((org-agenda-ndays 1)
              (org-agenda-show-log t)
              (org-agenda-log-mode-items '(clock closed))
              (org-agenda-clockreport-mode t)
              (org-agenda-entry-types '())))
            (\".\" \"Waiting for\" todo \"WAITING\")
            (\"u\" \"Unscheduled tasks\" tags-todo \"-someday-TODO=\\\"SOMEDAY\\\"-TODO=\\\"DELEGATED\\\"-TODO=\\\"WAITING\\\"-project\"
             ((org-agenda-skip-function 'sacha/org-agenda-skip-scheduled)
              (org-agenda-view-columns-initially t)
              (org-tags-exclude-from-inheritance '(\"project\"))
              (org-agenda-overriding-header \"Unscheduled TODO entries: \")
              (org-columns-default-format \"%50ITEM %TODO %3PRIORITY %Effort{:} %TAGS\")
              (org-agenda-sorting-strategy '(todo-state-up priority-down effort-up tag-up category-keep))))
            (\"U\" \"Unscheduled tasks outside projects\" tags-todo \"-project\"
             ((org-agenda-skip-function 'sacha/org-agenda-skip-scheduled)
              (org-tags-exclude-from-inheritance nil)
              (org-agenda-view-columns-initially t)
              (org-agenda-overriding-header \"Unscheduled TODO entries outside projects: \")
              (org-agenda-sorting-strategy '(todo-state-up priority-down tag-up category-keep effort-down))))
            (\"P\" \"By priority\"
             ((tags-todo \"+PRIORITY=\\\"A\\\"\")
              (tags-todo \"+PRIORITY=\\\"B\\\"\")
              (tags-todo \"+PRIORITY=\\\"\\\"\")
              (tags-todo \"+PRIORITY=\\\"C\\\"\"))
             ((org-agenda-prefix-format \"%-10c %-10T %e \")
              (org-agenda-sorting-strategy '(priority-down tag-up category-keep effort-down))))
            (\"pp\" tags \"+project-someday-TODO=\\\"DONE\\\"\"
             ((org-tags-exclude-from-inheritance '(\"project\"))
              (org-agenda-sorting-strategy '(priority-down tag-up category-keep effort-down))))
            (\"p.\" tags \"+project-TODO=\\\"DONE\\\"\"
             ((org-tags-exclude-from-inheritance '(\"project\"))
              (org-agenda-sorting-strategy '(priority-down tag-up category-keep effort-down))))
            (\"S\" tags-todo \"TODO=\\\"STARTED\\\"\")
            (\"2\" \"List projects with tasks\" sacha/org-agenda-projects-and-tasks
             \"+PROJECT\"
               ((sacha/org-agenda-limit-items 3)))))
  (bind-key \"<apps> a\" 'org-agenda)
#+end_src
**** Make it easy to mark a task as done

Great for quickly going through the to-do list. Gets rid of one
extra keystroke. ;)

#+begin_src emacs-lisp
(defun sacha/org-agenda-done (&optional arg)
  \"Mark current TODO as done.
This changes the line at point, all other lines in the agenda referring to
the same tree node, and the headline of the tree node in the Org-mode file.\"
  (interactive \"P\")
  (org-agenda-todo \"DONE\"))
;; Override the key definition for org-exit
(define-key org-agenda-mode-map \"x\" 'sacha/org-agenda-done)
#+end_src

**** Make it easy to mark a task as done and create a follow-up task

#+begin_src emacs-lisp
  (defun sacha/org-agenda-mark-done-and-add-followup ()
    \"Mark the current TODO as done and add another task after it.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings.\"
    (interactive)
    (org-agenda-todo \"DONE\")
    (org-agenda-switch-to)
    (org-capture 0 \"t\"))
;; Override the key definition
(define-key org-agenda-mode-map \"X\" 'sacha/org-agenda-mark-done-and-add-followup)
#+end_src

**** Capture something based on the agenda

#+begin_src emacs-lisp
(defun sacha/org-agenda-new ()
  \"Create a new note or task at the current agenda item.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings.\"
  (interactive)
  (org-agenda-switch-to)
  (org-capture 0))
;; New key assignment
(define-key org-agenda-mode-map \"N\" 'sacha/org-agenda-new)
#+end_src

**** Sorting by date and priority

#+begin_src emacs-lisp
  (setq org-agenda-sorting-strategy
        '((agenda time-up priority-down tag-up effort-up category-keep)
          (todo user-defined-up todo-state-up priority-down effort-up)
          (tags user-defined-up)
          (search category-keep)))
  (setq org-agenda-cmp-user-defined 'sacha/org-sort-agenda-items-user-defined)    
  (require 'cl)
  (defun sacha/org-get-context (txt)
    \"Find the context.\"
    (car (member-if
          (lambda (item) (string-match \"@\" item))
          (get-text-property 1 'tags txt))))
  
  (defun sacha/org-compare-dates (a b)
    \"Return 1 if A should go after B, -1 if B should go after A, or 0 if a = b.\"
    (cond
     ((and (= a 0) (= b 0)) nil)
     ((= a 0) 1)
     ((= b 0) -1)
     ((> a b) 1)
     ((< a b) -1)
     (t nil)))
  
  (defun sacha/org-complete-cmp (a b)
    (let* ((state-a (or (get-text-property 1 'todo-state a) \"\"))
           (state-b (or (get-text-property 1 'todo-state b) \"\")))
      (or
       (if (member state-a org-done-keywords-for-agenda) 1)
       (if (member state-b org-done-keywords-for-agenda) -1))))
  
  (defun sacha/org-date-cmp (a b)
    (let* ((sched-a (or (get-text-property 1 'org-scheduled a) 0))
           (sched-b (or (get-text-property 1 'org-scheduled b) 0))
           (deadline-a (or (get-text-property 1 'org-deadline a) 0))
           (deadline-b (or (get-text-property 1 'org-deadline b) 0)))
      (or
       (sacha/org-compare-dates
        (sacha/org-min-date sched-a deadline-a)
        (sacha/org-min-date sched-b deadline-b)))))
  
  (defun sacha/org-min-date (a b)
    \"Return the smaller of A or B, except for 0.\"
    (funcall (if (and (> a 0) (> b 0)) 'min 'max) a b))
  
  (defun sacha/org-sort-agenda-items-user-defined (a b)
    ;; compare by deadline, then scheduled date; done tasks are listed at the very bottom
    (or
     (sacha/org-complete-cmp a b)
     (sacha/org-date-cmp a b)))
  
  (defun sacha/org-context-cmp (a b)
    \"Compare CONTEXT-A and CONTEXT-B.\"
    (let ((context-a (sacha/org-get-context a))
          (context-b (sacha/org-get-context b)))
      (cond
       ((null context-a) +1)
       ((null context-b) -1)
       ((string< context-a context-b) -1)
       ((string< context-b context-a) +1)
       (t nil))))
  
  (defun sacha/org-sort-agenda-items-todo (a b)
    (or
     (org-cmp-time a b)
     (sacha/org-complete-cmp a b)
     (sacha/org-context-cmp a b)
     (sacha/org-date-cmp a b)
     (org-cmp-todo-state a b)
     (org-cmp-priority a b)
     (org-cmp-effort a b)))
#+end_src
     
**** Preventing things from falling through the cracks
This helps me keep track of unscheduled tasks, because I sometimes
forget to assign tasks a date. I also want to keep track of stuck projects.
#+begin_src emacs-lisp
(defun sacha/org-agenda-list-unscheduled (&rest ignore)
  \"Create agenda view for tasks that are unscheduled and not done.\"
  (let* ((org-agenda-todo-ignore-with-date t)
	 (org-agenda-overriding-header \"List of unscheduled tasks: \"))
    (org-agenda-get-todos)))
(setq org-stuck-projects
      '(\"+PROJECT-MAYBE-DONE\"
        (\"TODO\")
        nil
        \"\\\\<IGNORE\\\\>\"))
#+end_src

*** Weekly review

<<weekly-review>>

:PROPERTIES:
:CUSTOM_ID: weekly-review
:END:

I regularly post [[http://sachachua.com/blog/category/weekly][weekly reviews]] to keep track of what I'm done, remind me to plan for the upcoming week, and list blog posts, sketches, and links. I 


I want to try out grouping tasks by topic first, then breaking it
down into previous/next week.

#+begin_src emacs-lisp
  (defvar sacha/weekly-review-line-regexp 
    \"^  \\\\([^:]+\\\\): +\\\\(Sched[^:]+: +\\\\)?TODO \\\\(.*?\\\\)\\\\(?:[      ]+\\\\(:[[:alnum:]_@#%:]+:\\\\)\\\\)?[        ]*$\"
    \"Regular expression matching lines to include.\")
  (defvar sacha/weekly-done-line-regexp 
    \"^  \\\\([^:]+\\\\): +.*?\\\\(?:Clocked\\\\|Closed\\\\):.*?\\\\(?:TODO\\\\|DONE\\\\) \\\\(.*?\\\\)\\\\(?:[       ]+\\\\(:[[:alnum:]_@#%:]+:\\\\)\\\\)?[        ]*$\"
    \"Regular expression matching lines to include as completed tasks.\")

  (defun sacha/quantified-get-hours (category time-summary)
    \"Return the number of hours based on the time summary.\"
    (if (stringp category)
        (if (assoc category time-summary) (/ (cdr (assoc category time-summary)) 3600.0) 0)
      (apply '+ (mapcar (lambda (x) (sacha/quantified-get-hours x time-summary)) category))))

  (defun sacha/org-summarize-focus-areas ()
    \"Summarize previous and upcoming tasks as a list.\"
    (interactive)
    (let ((base-date (apply 'encode-time (org-read-date-analyze \"-fri\" nil '(0 0 0))))
          (line-re sacha/weekly-review-line-regexp)
          (done-re sacha/weekly-done-line-regexp)
          business relationships life business-next relationships-next life-next string 
          start end time-summary biz-time)
      (setq start (format-time-string \"%Y-%m-%d\" (days-to-time (- (time-to-number-of-days base-date) 6))))
      (setq end (format-time-string \"%Y-%m-%d\" (days-to-time (1+ (time-to-number-of-days base-date)))))
      (setq time-summary (quantified-summarize-time start end))
      (setq biz-time (sacha/quantified-get-hours \"Business\" time-summary))
      (save-window-excursion
        (org-agenda nil \"w\")
        (setq string (buffer-string))
        (with-temp-buffer
          (insert string)
          (goto-char (point-min))
          (while (re-search-forward line-re nil t)
            (cond
             ((string= (match-string 1) \"routines\") nil) ; skip routine tasks
             ((or (string= (match-string 1) \"business\") (string= (match-string 1) \"tasks\"))
              (add-to-list 'business-next (concat \"  - [ ] \" (match-string 3))))
             ((string= (match-string 1) \"people\")
              (add-to-list 'relationships-next (concat \"  - [ ] \" (match-string 3))))
             (t (add-to-list 'life-next (concat \"  - [ ] \" (match-string 3))))))))
      (save-window-excursion
        (org-agenda nil \"w\")
        (org-agenda-later -1)
        (org-agenda-log-mode 16)
        (setq string (buffer-string))
        ;; Get any completed tasks from the current week as well
        (org-agenda-later 1)
        (org-agenda-log-mode 16)
        (setq string (concat string \"\\n\" (buffer-string)))
        (with-temp-buffer
          (insert string)
          (goto-char (point-min))
          (while (re-search-forward done-re nil t)
            (cond
             ((string= (match-string 1) \"routines\") nil) ; skip routine tasks
             ((or (string= (match-string 1) \"business\") (string= (match-string 1) \"tasks\"))
              (add-to-list 'business (concat \"  - [X] \" (match-string 2))))
             ((string= (match-string 1) \"people\")
              (add-to-list 'relationships (concat \"  - [X] \" (match-string 2))))
             (t (add-to-list 'life (concat \"  - [X] \" (match-string 2))))))))
      (setq string
            (concat
             (format \"- *Business* (%.1fh - %d%%)\\n\" biz-time (/ biz-time 1.68))
             (mapconcat 'identity (sort business 'string<) \"\\n\") \"\\n\"
             (mapconcat 'identity (sort business-next 'string<) \"\\n\")
             \"\\n\"
             (format \"  - *Earn* (%.1fh - %d%% of Business)\\n\"
                     (sacha/quantified-get-hours \"Business - Earn\" time-summary)
                     (/ (sacha/quantified-get-hours \"Business - Earn\" time-summary) (* 0.01 biz-time)))
             (format \"  - *Build* (%.1fh - %d%% of Business)\\n\"
                     (sacha/quantified-get-hours \"Business - Build\" time-summary)
                     (/ (sacha/quantified-get-hours \"Business - Build\" time-summary) (* 0.01 biz-time)))
             (format \"    - *Drawing* (%.1fh)\\n\"
                     (sacha/quantified-get-hours '(\"Business - Build - Drawing\"
                                                   \"Business - Build - Book review\")  time-summary))
             (format \"    - *Delegation* (%.1fh)\\n\"
                     (sacha/quantified-get-hours \"Business - Build - Delegation\" time-summary))
             (format \"    - *Packaging* (%.1fh)\\n\"
                     (sacha/quantified-get-hours \"Business - Build - Packaging\" time-summary))
             (format \"    - *Paperwork* (%.1fh)\\n\"
                     (sacha/quantified-get-hours \"Business - Build - Paperwork\"  time-summary))
             (format \"  - *Connect* (%.1fh - %d%% of Business)\\n\"
                     (sacha/quantified-get-hours \"Business - Connect\" time-summary)
                     (/ (sacha/quantified-get-hours \"Business - Connect\" time-summary) (* 0.01 biz-time)))
             (format \"- *Relationships* (%.1fh - %d%%)\\n\"
                     (sacha/quantified-get-hours '(\"Discretionary - Social\"
                                                   \"Discretionary - Family\") time-summary)
                     (/ (sacha/quantified-get-hours '(\"Discretionary - Social\"
                                                      \"Discretionary - Family\") time-summary) 1.68))
             (mapconcat 'identity (sort relationships 'string<) \"\\n\") \"\\n\"
             (mapconcat 'identity (sort relationships-next 'string<) \"\\n\")
             \"\\n\"
             (format \"- *Discretionary - Productive* (%.1fh - %d%%)\\n\"
                     (sacha/quantified-get-hours \"Discretionary - Productive\" time-summary)
                     (/ (sacha/quantified-get-hours \"Discretionary - Productive\" time-summary) 1.68))
             (mapconcat 'identity (sort life 'string<) \"\\n\") \"\\n\"
             (mapconcat 'identity (sort life-next 'string<) \"\\n\") \"\\n\"
             (format \"  - *Writing* (%.1fh)\\n\"
                     (sacha/quantified-get-hours \"Discretionary - Productive - Writing\" time-summary))
             (format \"- *Discretionary - Play* (%.1fh - %d%%)\\n\"
                     (sacha/quantified-get-hours \"Discretionary - Play\" time-summary)
                     (/ (sacha/quantified-get-hours \"Discretionary - Play\" time-summary) 1.68))
                                          ;                 (format \"- *Discretionary - Travel* (%.1fh - %d%%)\\n\"
                                          ;                         (sacha/quantified-get-hours \"Discretionary - Travel\" time-summary)
                                          ;                         (/ (sacha/quantified-get-hours \"Discretionary - Travel\" time-summary) 1.68))
             (format \"- *Personal routines* (%.1fh - %d%%)\\n\"
                     (sacha/quantified-get-hours \"Personal\" time-summary)
                     (/ (sacha/quantified-get-hours \"Personal\" time-summary) 1.68))
             (format \"- *Unpaid work* (%.1fh - %d%%)\\n\"
                     (sacha/quantified-get-hours \"Unpaid work\" time-summary)
                     (/ (sacha/quantified-get-hours \"Unpaid work\" time-summary) 1.68))
             (format \"- *Sleep* (%.1fh - %d%% - average of %.1f per day)\\n\"
                     (sacha/quantified-get-hours \"Sleep\" time-summary)
                     (/ (sacha/quantified-get-hours \"Sleep\" time-summary) 1.68)
                     (/ (sacha/quantified-get-hours \"Sleep\" time-summary) 7)
                     )))
      (if (called-interactively-p 'any)
          (insert string)
        string)))
#+end_src

I use this to put together a quick summary of how I spent my time.

The following code makes it easy to add a line:

#+begin_src emacs-lisp
(defun sacha/org-add-line-item-task (task)
  (interactive \"MTask: \")
  (org-insert-heading)
  (insert \"[ ] \" task)
  (let ((org-capture-entry '(\"t\" \"Tasks\" entry
                             (file+headline \"~/personal/organizer.org\" \"Tasks\")
                             \"\")))
    (org-capture nil \"t\")
    (insert \"TODO \" task \"\\nSCHEDULED: <\" (org-read-date) \">\")))
(define-key org-mode-map (kbd \"C-c t\") 'sacha/org-add-line-item-task)
#+end_src

Now we put it all together...

#+begin_src emacs-lisp
;;  (defun sacha/org-prepare-weekly-review ()
;;    \"Prepare weekly review template.\"
;;    (interactive)
;;    (let ((base-date (apply 'encode-time (org-read-date-analyze \"-fri\" nil '(0 0 0))))
;;          start end)
;;      (setq start (format-time-string \"%Y-%m-%d\" (days-to-time (- (time-to-number-of-days base-date) 6))))
;;      (setq end (format-time-string \"%Y-%m-%d\" (days-to-time (1+ (time-to-number-of-days base-date)))))
;;        (insert
;;         (concat
;;          \"*** Weekly review: Week ending \" (format-time-string \"%B %e, %Y\" base-date) \"  :weekly:\\n\"
;;          \"*Blog posts*\\n\\n\"
;;          \"*Sketches*\\n\\n\" 
;;          (sacha/flickr-export-and-extract start end) \"\\n\"
;;          \"*Link round-up*\\n\\n\"
;;          (sacha/evernote-export-and-extract start end)
;;          \"\\n\\n*Focus areas and time review*\\n\\n\"
;;          (sacha/org-summarize-focus-areas)
;;          \"\\n\"))))
#+end_src
**** Flickr extract

#+begin_src emacs-lisp
;;  (defun sacha/flickr-extract-links-for-review (filename start end)
;;    \"Extract Flickr titles and URLs from FILENAME from START to END.
;;       The file should be a CSV downloaded by the Flickr metadata downloader.
;;       Start date and end date should be strings in the form yyyy-mm-dd.\"
;;    (interactive (list (read-file-name \"File: \")
;;                            (org-read-date)
;;                            (org-read-date)))
;;         (require 'csv)
;;         (let (list)
;;           (with-temp-buffer
;;             (insert-file-contents filename)
;;             (goto-char (point-min))
;;             (setq list
;;                   (mapconcat
;;                    (lambda (x) (concat \"- [[\" (car x) \"][\" (cdr x) \"]]\"))
;;                    (sort
;;                     (delq nil
;;                           (mapcar (lambda (x)
;;                                     (let ((title (cdr (assoc \"FileName\" x))))
;;                                       (if (and (not (string< title start))
;;                                                (string< title end))
;;                                           (cons (cdr (assoc \"URL\" x)) title))))
;;                                   (csv-parse-buffer t)))
;;                     (lambda (a b) (string<  (cdr a) (cdr b))))
;;                    \"\\n\"))
;;             (setq list
;;                   (replace-regexp-in-string \"\\\\([0-9]+\\\\)-\\\\([0-9]+\\\\)-\\\\([0-9]+\\\\)\"
;;                                             \"\\\\1.\\\\2.\\\\3\" list))
;;             (setq list
;;                   (replace-regexp-in-string \"\\\\[\\\"\" \"[\" list))
;;             (setq list
;;                   (replace-regexp-in-string \"\\\"
\\\\]\" \"]\" list)))
;;           (if (called-interactively-p 'any)
;;               (insert list)
;;             list)))
;;       
;;       (defun sacha/flickr-export-and-extract (start end)
;;         \"Download Flickr metadata and extract the relevant part.\"
;;         (shell-command \"c:/sacha/dropbox/bin/flickr.bat\")
;;         (sacha/flickr-extract-links-for-review \"c:/sacha/dropbox/bin/flickr_metadata.csv\" start end))
#+end_src

**** Link-related convenience functions

#+begin_src emacs-lisp
  (defun kensanata/resolve-redirect (url)
    \"Resolve shortened URL by launching `curl --head' and parsing the result.\"
    (let* ((curl (shell-command-to-string
                  (format \"curl --silent --head %s\" url)))
           (location (when (and (string-match \"^HTTP/1\\.1 301\" curl)
                                (string-match \"^Location: \\\\(.*\\\\)\" curl))
                       (match-string 1 curl))))
      (or location url)))
  
  (defun sacha/resolve-urls-in-region (beg end)
    \"Expand URLs between BEG and END.\"
    (interactive \"r\")
    (save-excursion
      (save-restriction
        (narrow-to-region beg end)
        (goto-char (point-min))
        (while (re-search-forward org-bracket-link-regexp nil t)
          (replace-match (save-match-data (kensanata/resolve-redirect
                                           (match-string 1))) t t nil 1))
        (goto-char (point-min))
        (while (re-search-forward org-link-re-with-space nil t)
          (replace-match (save-match-data (kensanata/resolve-redirect
                                           (match-string 0))) t t nil)))))
  
  (defun sacha/open-urls-in-region (beg end)
    \"Open URLs between BEG and END.\"
    (interactive \"r\")
    (save-excursion
      (save-restriction
        (narrow-to-region beg end)
        (goto-char (point-min))
        (while (re-search-forward org-plain-link-re nil t)
          (org-open-at-point)))))
#+end_src

**** Evernote-related extract
#+begin_src emacs-lisp
    (defun sacha/evernote-export-and-extract (start-date end-date)
      \"Extract notes created on or after START-DATE and before END-DATE.\"
      (let ((filename \"c:/sacha/tmp/Evernote.enex\"))
        (call-process 
         \"c:/Program Files (x86)/Evernote/Evernote/enscript.exe\"
         nil t t
         \"exportNotes\"
         \"/q\" (concat
               \" tag:roundup\"
               \" created:\" (replace-regexp-in-string \"-\" \"\" start-date)
               \" -created:\" (replace-regexp-in-string \"-\" \"\" end-date))
         \"/f\" filename)
        (sacha/evernote-extract-links-for-review filename)))
    
    (defun sacha/evernote-extract-links-for-review (filename)
      \"Extract note names and URLs from FILENAME.
         The file should be an ENEX export.\"
      (interactive (list (read-file-name \"File: \")
                         (org-read-date)
                         (org-read-date)))
      (let (list)
        (with-temp-buffer
          (insert-file-contents filename)
          (goto-char (point-min))
          (while (re-search-forward \"<title>\\\\(.+?\\\\)</title>\\\\(.*?\\n\\\\)*?.*?href=\\\"\\\\(.*?\\\\)\\\"\" nil t)
            (setq list
                  (cons
                   (cons
                    (match-string-no-properties 1)
                    (match-string-no-properties 3)) list))))
        (setq list
              (mapconcat (lambda (x)
                           (concat \"- [[\"
                                   (kensanata/resolve-redirect (cdr x))
                                   \"][\" (car x) \"]]: \")) list \"\\n\"))
              (if (called-interactively-p 'any)
                  (insert list)
                list)))
#+end_src
*** Moving lines around

This makes it easier to reorganize lines in my weekly review.
#+begin_src emacs-lisp
  (defun sacha/org-move-line-to-destination ()
    \"Moves the current list item to <<destination>> in the current buffer.\"
    (interactive)
    (save-window-excursion
      (save-excursion
        (let ((string
               (buffer-substring-no-properties
                (line-beginning-position) (line-end-position))))
          (delete-region (line-beginning-position) (1+ (line-end-position)))
          (goto-char (point-min))
          (re-search-forward \"<<destination>>\" nil t)
          (insert \"\\n\" (make-string (- (match-beginning 0) (line-beginning-position)) ?\\ ) (s-trim string))))))
  (bind-key \"C-c d\" 'sacha/org-move-line-to-destination org-mode-map)
#+end_src

*** Monthly reviews

<<monthly-reviews>>

I want to be able to see what I worked on in a month so that I can write my [[http://sachachua.com/blog/category/monthly][monthly reviews]]. This code makes it easy to display a month's clocked tasks and time. I haven't been particularly thorough in tracking time before, but now that I have a shortcut that logs in Quantified Awesome as well as in Org, I should end up clocking more.

#+begin_src emacs-lisp
  (defun sacha/org-review-month (start-date)
    \"Review the month's clocked tasks and time.\"
    (interactive (list (org-read-date)))
    ;; Set to the beginning of the month
    (setq start-date (concat (substring start-date 0 8) \"01\"))
    (let ((org-agenda-show-log t)
          (org-agenda-start-with-log-mode t)
          (org-agenda-start-with-clockreport-mode t)
          (org-agenda-clockreport-parameter-plist '(:link t :maxlevel 3)))
      (org-agenda-list nil start-date 'month)))
#+end_src

*** Viewing, navigating, and editing the Org tree

    I often cut and paste subtrees. This makes it easier to cut
    something and paste it elsewhere in the hierarchy.
    #+begin_src emacs-lisp
      (eval-after-load 'org
        '(progn
           (bind-key \"C-c k\" 'org-cut-subtree org-mode-map)
           (setq org-yank-adjusted-subtrees t)))
#+end_src
*** Fix timestamps in Flickr links

Photosync (for syncing with Flickr) can't deal with periods in filenames. Org gets confused with dashes in timestamps that are in link text. Solution? Save files with dashes, then use a little code to replace dashes in the region.

#+begin_src emacs-lisp
(defun sacha/fix-flickr-list (beg end)
  (interactive \"r\")
  (save-excursion (save-restriction
    (narrow-to-region beg end)
    (goto-char (point-min))
    (while (re-search-forward \"\\\\([0-9]+\\\\)-\\\\([0-9]+\\\\)-\\\\([0-9]+\\\\)\" nil t)
      (replace-match (concat (match-string 1) \".\" (match-string 2) \".\" (match-string 3)) nil t)))))
#+end_src
*** Organize my blog index

#+begin_src emacs-lisp
  (defun sacha/org-file-blog-index-entries (beg end location)
    \"Copy entries into blog.org.\"
    (interactive
     (list
      (if (region-active-p) (point) (line-beginning-position))
      (if (region-active-p) (mark) (1+ (line-end-position)))
      (let ((org-refile-targets
             '((\"~/Dropbox/Public/sharing/blog.org\" . (:maxlevel . 3)))))
        (org-refile-get-location \"Location\"))))
    (let ((s
           (replace-regexp-in-string
            \"^ +- \"
            \"- [X] \"
            (buffer-substring-no-properties beg end))))
      (save-window-excursion
        (save-excursion
          (find-file (nth 1 location))
          (save-excursion
            (save-restriction
              (widen)
              (goto-char (nth 3 location))
              (looking-at org-outline-regexp)
              (forward-line 1)
              (insert s)
              (org-update-statistics-cookies nil)))))))
  (bind-key \"C-c f\" 'sacha/org-file-blog-index-entries org-mode-map)
#+end_src

*** Publishing
Timestamps and section numbers make my published files look more
complicated than they are. Let's turn them off by default.

#+begin_src emacs-lisp
(setq org-export-with-section-numbers nil)
(setq org-html-include-timestamps nil)
#+end_src

Some code for Emacs chats:


This makes it easier to publish my public Dropbox files:

#+begin_src emacs-lisp
    (setq sacha/emacs-notes-directory \"c:/sacha/code/emacs-notes\")
    (setq org-publish-project-alist
          '((\"public\"
             :base-directory \"c:/sacha/Dropbox/public\"
             :publishing-directory \"c:/sacha/Dropbox/public\"
             :publishing-function sacha/org-html-publish-to-html-trustingly
             )
            (\"sharing\"
             :base-directory \"c:/sacha/Dropbox/public/sharing\"
             :publishing-directory \"c:/sacha/Dropbox/public/sharing\"
             :publishing-function sacha/org-html-publish-to-html-trustingly
             )
            (\"emacs-config\"
             :base-directory \"c:/sacha/.emacs.d\"
             :publishing-directory \"c:/sacha/.emacs.d\"
             :publishing-function sacha/org-html-publish-to-html-trustingly
             )))
#+end_src

I want to easily publish some files. If a file is in a publishing project, publish it.

#+begin_src emacs-lisp
  (defun sacha/org-publish-maybe ()
    (interactive)
    (save-excursion
      (when (org-publish-get-project-from-filename
             (buffer-file-name (buffer-base-buffer)) 'up)
        (org-publish-current-file))))
  (bind-key \"C-c C-p C-p\" 'sacha/org-publish-maybe org-mode-map)
#+end_src
**** Org2blog

I use org2blog to post to my blog, which is Wordpress-based. I used to
use punchagan's org2blog, but there's a completely different one in
ELPA, so I figured I'd give that a try.

#+begin_src emacs-lisp
(sacha/package-install 'org2blog)
(require 'org2blog-autoloads)
(setq org-export-with-toc nil)
(setq org-export-htmlize-output-type 'css)
(defadvice org2blog/wp-post-buffer (around sacha activate)
  (let ((org-confirm-babel-evaluate nil))
    ad-do-it))
#+end_src

**** Publish without prompting

I want to be able to export without having to say yes to code blocks all the time.

#+begin_src emacs-lisp
(defun sacha/org-html-export-trustingly ()
  (interactive)
  (let ((org-confirm-babel-evaluate nil))
    (org-html-export-to-html)))

(defun sacha/org-html-publish-to-html-trustingly (plist filename pub-dir)
  (let ((org-confirm-babel-evaluate nil))
    (org-html-publish-to-html plist filename pub-dir)))
#+end_src
**** Stylesheet / header
Might as well take advantage of my stylesheet:

#+begin_src emacs-lisp
(setq org-html-head \"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\"
href=\\\"http://sachachua.com/blog/wp-content/themes/sacha-v3/foundation/css/foundation.min.css\\\"></link>
<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"http://sachachua.com/org-export.css\\\"></link>
<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"http://sachachua.com/blog/wp-content/themes/sacha-v3/style.css\\\"></link>
<script src=\\\"http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js\\\"></script>\")
(setq org-html-htmlize-output-type 'css)
(setq org-src-fontify-natively t)
#+end_src
**** Footer

Make it easy to scroll to the top:

#+begin_src emacs-lisp
(setq org-html-preamble \"<a name=\\\"top\\\" id=\\\"top\\\"></a>\")
(setq org-html-postamble \"
<style type=\\\"text/css\\\">
.back-to-top {
    position: fixed;
    bottom: 2em;
    right: 0px;
    text-decoration: none;
    color: #000000;
    background-color: rgba(235, 235, 235, 0.80);
    font-size: 12px;
    padding: 1em;
    display: none;
}

.back-to-top:hover {    
    background-color: rgba(135, 135, 135, 0.50);
}
</style>

<div class=\\\"back-to-top\\\">
<a href=\\\"#top\\\">Back to top</a> | <a href=\\\"mailto:sacha@sachachua.com\\\">E-mail me</a>
</div>

<script type=\\\"text/javascript\\\">
    var offset = 220;
    var duration = 500;
    jQuery(window).scroll(function() {
        if (jQuery(this).scrollTop() > offset) {
            jQuery('.back-to-top').fadeIn(duration);
        } else {
            jQuery('.back-to-top').fadeOut(duration);
        }
    });
</script>\")
#+end_src

**** Copy region
Sometimes I want a region's HTML in my kill-ring/clipboard without any of the extra fluff:

#+begin_src emacs-lisp
  (defun sacha/org-copy-region-as-html (beg end &optional level)
    \"Make it easier to copy code for Wordpress posts and other things.\"
    (interactive \"r\\np\")
    (let ((org-export-html-preamble nil)
          (org-html-toplevel-hlevel (or level 3)))
      (kill-new
       (org-export-string-as (buffer-substring beg end) 'html t))))
#+end_src

Sometimes I want a subtree:

#+begin_src emacs-lisp
(defun sacha/org-copy-subtree-as-html ()
  (interactive)
  (sacha/org-copy-region-as-html
   (org-back-to-heading)
   (org-end-of-subtree)))
#+end_src
**** UTF-8 checkboxes

This snippet turns =- [X]= into ☑ and =- [ ]= into ☐, but leaves =[-]= alone. 
#+begin_src emacs-lisp
(setq org-html-checkbox-types 'unicode)
(setq org-html-checkbox-types
 '((unicode (on . \"<span class=\\\"task-done\\\">&#x2611;</span>\") 
            (off . \"<span class=\\\"task-todo\\\">&#x2610;</span>\") 
            (trans . \"<span class=\\\"task-in-progress\\\">[-]</span>\"))))
#+end_src

*** Structure templates

Org makes it easy to insert blocks by typing =<s[TAB]=, etc.
I hardly ever use LaTeX, but I insert a lot of Emacs Lisp blocks, so I
redefine =<l= to insert a Lisp block instead.

#+begin_src emacs-lisp
  (setq org-structure-template-alist 
        '((\"s\" \"#+begin_src ?\\n\\n#+end_src\" \"<src lang=\\\"?\\\">\\n\\n</src>\")
          (\"e\" \"#+begin_example\\n?\\n#+end_example\" \"<example>\\n?\\n</example>\")
          (\"q\" \"#+begin_quote\\n?\\n#+end_quote\" \"<quote>\\n?\\n</quote>\")
          (\"v\" \"#+BEGIN_VERSE\\n?\\n#+END_VERSE\" \"<verse>\\n?\\n</verse>\")
          (\"c\" \"#+BEGIN_COMMENT\\n?\\n#+END_COMMENT\")
          (\"l\" \"#+begin_src emacs-lisp\\n?\\n#+end_src\" \"<src lang=\\\"emacs-lisp\\\">\\n?\\n</src>\")
          (\"L\" \"#+latex: \" \"<literal style=\\\"latex\\\">?</literal>\")
          (\"h\" \"#+begin_html\\n?\\n#+end_html\" \"<literal style=\\\"html\\\">\\n?\\n</literal>\")
          (\"H\" \"#+html: \" \"<literal style=\\\"html\\\">?</literal>\")
          (\"a\" \"#+begin_ascii\\n?\\n#+end_ascii\")
          (\"A\" \"#+ascii: \")
          (\"i\" \"#+index: ?\" \"#+index: ?\")
          (\"I\" \"#+include %file ?\" \"<include file=%file markup=\\\"?\\\">\")))
#+end_src
*** Quick links
    #+begin_src emacs-lisp
    (setq org-link-abbrev-alist
      '((\"google\" . \"http://www.google.com/search?q=\")
	(\"gmap\" . \"http://maps.google.com/maps?q=%s\")
	(\"blog\" . \"http://sachachua.com/blog/p/\")))
#+end_src
*** Speed commands

These are great for quickly acting on tasks.

#+begin_src emacs-lisp
(setq org-use-effective-time t)
(setq org-use-speed-commands t)
(add-to-list 'org-speed-commands-user '(\"x\" org-todo \"DONE\"))
(add-to-list 'org-speed-commands-user '(\"y\" org-todo-yesterday \"DONE\"))
(add-to-list 'org-speed-commands-user '(\"!\" sacha/org-clock-in-and-track))
(add-to-list 'org-speed-commands-user '(\"s\" call-interactively 'org-schedule))
(add-to-list 'org-speed-commands-user '(\"i\" call-interactively 'org-clock-in))
(add-to-list 'org-speed-commands-user '(\"o\" call-interactively 'org-clock-out))
(bind-key \"!\" 'sacha/org-clock-in-and-track org-agenda-mode-map)
#+end_src

*** Attachments

Org lets you attach files to an Org file. Haven't gotten the hang of this yet, but looks interesting.

#+begin_src emacs-lisp
(setq org-attach-store-link-p 'attached)
(setq org-attach-auto-tag nil)
#+end_src

*** Counting

Good way to remind myself that I have lots of STARTED tasks.

#+begin_src emacs-lisp
(defun sacha/org-summarize-task-status ()
  \"Count number of tasks by status. 
Probably should make this a dblock someday.\"
  (interactive)
  (let (result)
    (org-map-entries
     (lambda ()
       (let ((todo (elt (org-heading-components) 2)))
         (if todo
             (if (assoc todo result)
                 (setcdr (assoc todo result)
                         (1+ (cdr (assoc todo result))))
               (setq result (cons (cons todo 1) result)))))))
    (message \"%s\" (mapconcat (lambda (x) (format \"%s: %d\" (car x) (cdr x)))
                             result \"\\n\"))))
#+end_src
*** Diagrams and graphics

Ooooh. Graphviz and Ditaa make it easier to create diagrams from Emacs. See [[http://sachachua.com/evil-plans]] for examples and source.

#+begin_src emacs-lisp
  (setq org-ditaa-jar-path \"C:/Sacha/Dropbox/bin/ditaa.jar\")
  (setq org-startup-with-inline-images t)
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)
     (ditaa . t) 
     (R . t)))
  (add-to-list 'org-src-lang-modes '(\"dot\" . graphviz-dot))
#+end_src
*** Presentations
#+begin_src emacs-lisp
;;(use-package ox-reveal)
#+end_src
*** Share my Emacs configuration

This code gets around the fact that my config is called Sacha.org, but
I want it to export as sacha-emacs.org in my Dropbox's public
directory. Although now that I'm shifting to Github Pages, maybe I
don't need this any more...

#+begin_src emacs-lisp
  (defun sacha/org-share-emacs ()
    \"Share my Emacs configuration.\"
    (interactive)
    (let* ((destination-dir \"~/Dropbox/Public/\")
           (destination-filename \"sacha-emacs.org\"))
      (save-restriction
        (save-excursion
          (widen)
          (write-region (point-min) (point-max) 
            (expand-file-name destination-filename destination-dir))
          (with-current-buffer (find-file-noselect (expand-file-name
                                                    destination-filename destination-dir))
            (org-babel-tangle-file buffer-file-name 
                                   (expand-file-name
                                    \"sacha-emacs.el\" destination-dir) \"emacs-lisp\")
            (org-html-export-to-html))))))
    #+end_src
*** Task dependencies

#+begin_src emacs-lisp
(setq org-enforce-todo-dependencies t)
(setq org-track-ordered-property-with-tag t)
#+end_src
** Coding
*** Tab width of 2 is compact and readable
#+begin_src emacs-lisp
    (setq-default tab-width 2)
#+end_src
*** New lines are always indented

I almost always want to go to the right indentation on the next line.
#+begin_src emacs-lisp
(global-set-key (kbd \"RET\") 'newline-and-indent)
#+end_src

*** Adapt to being on Windows

I'm on Windows, so I use Cygwin to add Unix-y tools to make my life easier. 
These config snippets seem to help too.
#+begin_src emacs-lisp
  (add-hook 'comint-output-filter-functions
      'shell-strip-ctrl-m nil t)
  (add-hook 'comint-output-filter-functions
      'comint-watch-for-password-prompt nil t)
#+end_src

*** Expand region

This is something I have to get the hang of too. It gradually expands the selection. Handy for Emacs Lisp.

#+begin_src emacs-lisp
  (sacha/package-install 'expand-region)
  (use-package expand-region
    :bind (\"C-=\" . er/expand-region))
#+end_src
*** Emacs Lisp
**** Edebug

Did you know edebug has a trace function? I didn't. Thanks, agumonkey!

#+begin_src emacs-lisp
(setq edebug-trace t)
#+end_src

While edebugging, use T to view a trace buffer (=*edebug-trace*=).
Emacs will quickly execute the rest of your code, printing out the
arguments and return values for each expression it evaluates.

**** Eldoc
Eldoc provides minibuffer hints when working with Emacs Lisp.
#+begin_src emacs-lisp
    (autoload 'turn-on-eldoc-mode \"eldoc\" nil t)
    (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+end_src
**** Refactoring  :drill:
     SCHEDULED: <2013-03-03 Sun>
     :PROPERTIES:
     :ID:       99ac7ddb-08ef-46c4-8fa8-8a45164f9ef4
     :DRILL_LAST_INTERVAL: 3.86
     :DRILL_REPEATS_SINCE_FAIL: 2
     :DRILL_TOTAL_REPEATS: 2
     :DRILL_FAILURE_COUNT: 1
     :DRILL_AVERAGE_QUALITY: 2.5
     :DRILL_EASE: 2.36
     :DRILL_LAST_QUALITY: 3
     :DRILL_LAST_REVIEWED: [2013-02-27 Wed 21:18]
     :END:

More things that I need to get used to...

#+begin_src emacs-lisp
;; C-c C-v l : elint current buffer in clean environment.
;; C-c C-v L : elint current buffer by multiple emacs binaries.
;;             See `erefactor-lint-emacsen'
;; C-c C-v r : Rename symbol in current buffer.
;;             Resolve `let' binding as long as i can.
;; C-c C-v R : Rename symbol in requiring modules and current buffer.
;; C-c C-v h : Highlight current symbol in this buffer
;;             and suppress `erefacthr-highlight-mode'.
;; C-c C-v d : Dehighlight all by above command.
;; C-c C-v c : Switch prefix bunch of symbols.
;;             ex: '(hoge-var hoge-func) -> '(foo-var foo-func)
;; C-c C-v ? : Display flymake elint warnings/errors

;;  (use-package erefactor
;;    :config
;;    (define-key emacs-lisp-mode-map \"\\C-c\\C-v\" erefactor-map))
#+end_src
**** Jumping to code

#+begin_src emacs-lisp
(define-key emacs-lisp-mode-map (kbd \"C-c .\") 'find-function-at-point)
#+end_src
*** Snippets
    #+begin_src emacs-lisp
;;      (use-package yasnippet-bundle
;;        :init
;;        (progn
;;          (yas/initialize)
;;          (yas/load-directory \"~/elisp/snippets\")
;;          (setq yas/key-syntaxes '(\"w_\" \"w_.\" \"^ \"))))
      ;;        (global-set-key (kbd \"C-c y\") (lambda () (interactive)
      ;;                                         (yas/load-directory \"~/elisp/snippets\")))
#+end_src
*** Show column number

I sometimes need to know where I am in a line. 
#+begin_src emacs-lisp
(column-number-mode 1)
(set-background-color \"red\")
#+end_src

*** Don't show whitespace in diff, but show context
    #+begin_src emacs-lisp
    (setq vc-diff-switches '(\"-b\" \"-B\" \"-u\"))
(load-theme 'wombat t)
#+end_src
" #(";; ;; REPLACES ORIGINAL in `C source code' (dumped)
;; ;; redefine require to leave a trace of packages being loaded
" 0 3 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-delimiter-face) 3 51 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-comment-face) 51 52 (fontified t font-lock-fontified t font-lock-multiline t face nil) 52 55 (face font-lock-comment-delimiter-face font-lock-multiline t font-lock-fontified t fontified t) 55 116 (face font-lock-comment-face font-lock-multiline t font-lock-fontified t fontified t) 116 117 (fontified t font-lock-fontified t font-lock-multiline t face nil)) #("(if (not (fboundp 'orig-require))
    (fset 'orig-require (symbol-function 'require))
  (message \"The code to redefine `require' should not be loaded twice\"))

(defvar my/require-depth 0)

(defun require (feature &optional filename noerror)
  \"Leave a trace of packages being loaded.\"
  (cond ((member feature features)
 	 (message \"%sRequiring `%s' (already loaded)\"
 		  (concat (make-string (* 2 my/require-depth) ? ) \"+-> \")
 		  feature))))
 	(t
 	 (message \"%sRequiring `%s'\"
 		  (concat (make-string (* 2 my/require-depth) ? )
 			  \"+-> \")
 		  feature)
 	 (let ((my/require-depth (+ 1 my/require-depth)))
 	   (orig-require feature filename noerror))
 	 (message \"%sRequiring `%s'...done\")
 		  (concat (make-string (* 2 my/require-depth) ? )
 			  \"+-> \"))
" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face nil) 1 3 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 3 33 (fontified t font-lock-fontified t font-lock-multiline t face nil) 33 34 (fontified t font-lock-fontified t font-lock-multiline t face nil) 34 85 (face nil font-lock-multiline t font-lock-fontified t fontified t) 85 86 (fontified t font-lock-fontified t font-lock-multiline t face nil) 86 97 (face nil font-lock-multiline t font-lock-fontified t fontified t) 97 120 (face font-lock-string-face font-lock-multiline t font-lock-fontified t fontified t) 120 127 (face (font-lock-constant-face font-lock-string-face) font-lock-multiline t font-lock-fontified t fontified t) 127 156 (face font-lock-string-face font-lock-multiline t font-lock-fontified t fontified t) 156 158 (face nil font-lock-multiline t font-lock-fontified t fontified t) 158 159 (fontified t font-lock-fontified t font-lock-multiline t face nil) 159 160 (face nil font-lock-multiline t font-lock-fontified t fontified t) 160 161 (fontified t font-lock-fontified t font-lock-multiline t face nil) 161 167 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 167 168 (fontified t font-lock-fontified t font-lock-multiline t face nil) 168 184 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-variable-name-face) 184 187 (fontified t font-lock-fontified t font-lock-multiline t face nil) 187 188 (face nil font-lock-multiline t font-lock-fontified t fontified t) 188 189 (fontified t font-lock-fontified t font-lock-multiline t face nil) 189 190 (face nil font-lock-multiline t font-lock-fontified t fontified t) 190 195 (face font-lock-keyword-face font-lock-multiline t font-lock-fontified t fontified t) 195 196 (face nil font-lock-multiline t font-lock-fontified t fontified t) 196 203 (face font-lock-function-name-face font-lock-multiline t font-lock-fontified t fontified t) 203 213 (face nil font-lock-multiline t font-lock-fontified t fontified t) 213 222 (face font-lock-type-face font-lock-multiline t font-lock-fontified t fontified t) 222 240 (face nil font-lock-multiline t font-lock-fontified t fontified t) 240 241 (fontified t font-lock-fontified t font-lock-multiline t face nil) 241 243 (face nil font-lock-multiline t font-lock-fontified t fontified t) 243 284 (face font-lock-string-face font-lock-multiline t font-lock-fontified t fontified t) 284 285 (fontified t font-lock-fontified t font-lock-multiline t face nil) 285 288 (face nil font-lock-multiline t font-lock-fontified t fontified t) 288 292 (face font-lock-keyword-face font-lock-multiline t font-lock-fontified t fontified t) 292 319 (face nil font-lock-multiline t font-lock-fontified t fontified t) 319 320 (fontified t font-lock-fontified t font-lock-multiline t face nil) 320 332 (face nil font-lock-multiline t font-lock-fontified t fontified t) 332 346 (face font-lock-string-face font-lock-multiline t font-lock-fontified t fontified t) 346 348 (face (font-lock-constant-face font-lock-string-face) font-lock-multiline t font-lock-fontified t fontified t) 348 367 (face font-lock-string-face font-lock-multiline t font-lock-fontified t fontified t) 367 368 (fontified t font-lock-fontified t font-lock-multiline t face nil) 368 421 (face nil font-lock-multiline t font-lock-fontified t fontified t) 421 427 (face font-lock-string-face font-lock-multiline t font-lock-fontified t fontified t) 427 428 (face nil font-lock-multiline t font-lock-fontified t fontified t) 428 429 (fontified t font-lock-fontified t font-lock-multiline t face nil) 429 445 (face nil font-lock-multiline t font-lock-fontified t fontified t) 445 446 (fontified t font-lock-fontified t font-lock-multiline t face nil) 446 450 (face nil font-lock-multiline t font-lock-fontified t fontified t) 450 451 (fontified t font-lock-fontified t font-lock-multiline t face nil) 451 463 (face nil font-lock-multiline t font-lock-fontified t fontified t) 463 477 (face font-lock-string-face font-lock-multiline t font-lock-fontified t fontified t) 477 479 (face (font-lock-constant-face font-lock-string-face) font-lock-multiline t font-lock-fontified t fontified t) 479 481 (face font-lock-string-face font-lock-multiline t font-lock-fontified t fontified t) 481 482 (fontified t font-lock-fontified t font-lock-multiline t face nil) 482 534 (face nil font-lock-multiline t font-lock-fontified t fontified t) 534 535 (fontified t font-lock-fontified t font-lock-multiline t face nil) 535 541 (face nil font-lock-multiline t font-lock-fontified t fontified t) 541 547 (face font-lock-string-face font-lock-multiline t font-lock-fontified t fontified t) 547 548 (face nil font-lock-multiline t font-lock-fontified t fontified t) 548 549 (fontified t font-lock-fontified t font-lock-multiline t face nil) 549 562 (face nil font-lock-multiline t font-lock-fontified t fontified t) 562 563 (fontified t font-lock-fontified t font-lock-multiline t face nil) 563 567 (face nil font-lock-multiline t font-lock-fontified t fontified t) 567 570 (face font-lock-keyword-face font-lock-multiline t font-lock-fontified t fontified t) 570 614 (face nil font-lock-multiline t font-lock-fontified t fontified t) 614 615 (fontified t font-lock-fontified t font-lock-multiline t face nil) 615 660 (face nil font-lock-multiline t font-lock-fontified t fontified t) 660 661 (fontified t font-lock-fontified t font-lock-multiline t face nil) 661 673 (face nil font-lock-multiline t font-lock-fontified t fontified t) 673 687 (face font-lock-string-face font-lock-multiline t font-lock-fontified t fontified t) 687 689 (face (font-lock-constant-face font-lock-string-face) font-lock-multiline t font-lock-fontified t fontified t) 689 698 (face font-lock-string-face font-lock-multiline t font-lock-fontified t fontified t) 698 699 (face nil font-lock-multiline t font-lock-fontified t fontified t) 699 700 (fontified t font-lock-fontified t font-lock-multiline t face nil) 700 752 (face nil font-lock-multiline t font-lock-fontified t fontified t) 752 753 (fontified t font-lock-fontified t font-lock-multiline t face nil) 753 759 (face nil font-lock-multiline t font-lock-fontified t fontified t) 759 765 (face font-lock-string-face font-lock-multiline t font-lock-fontified t fontified t) 765 767 (font-lock-multiline t font-lock-fontified t fontified t) 767 768 (fontified t font-lock-fontified t font-lock-multiline t)) ";; ;; REPLACES ORIGINAL in `C source code' (dumped)
;; ;; redefine require to leave a trace of packages being loaded
;; (if (not (fboundp 'orig-require))
;;     (fset 'orig-require (symbol-function 'require))
;;   (message \"The code to redefine `require' should not be loaded twice\"))
;;
;; (defvar my-require-depth 0)
;;
;; (defun require (feature &optional file)
;;   \"Leave a trace of packages being loaded.\"
;;   (cond ((member feature features)
;;          (message \"%sRequiring `%s' (already loaded)\"
;;                   (concat (make-string (* 2 my-require-depth) ?-) \"> \")
;;                   feature)
;;          (sit-for 0))
;;         (t
;;          (message \"%sRequiring `%s'\"
;;                   (concat (make-string (* 2 my-require-depth) ?-) \"> \")
;;                   feature)
;;          (sit-for 0)
;;          (let ((my-require-depth (+ 1 my-require-depth)))
;;            (cond (file
;;                   (orig-require feature file))
;;                  (t
;;                   (orig-require feature))))
;;          (message \"%sRequiring `%s'...done\"
;;                   (concat (make-string (* 2 my-require-depth) ?-) \"> \")
;;                   feature)
;;          (sit-for 0))))" #("(defun require (feature &optional filename noerror)
  \"Leave a trace of packages being loaded.\"
  (cond ((member feature features)
	 (message \"%sRequiring `%s' (already loaded)\"
		  (concat (make-string (* 2 my/require-depth) ? )
			  \"+-> \")
		  feature))
	(t
	 (message \"%sRequiring `%s'\"
		  (concat (make-string (* 2 my/require-depth) ? )
			  \"+-> \")
		  feature)
	 (let ((my/require-depth (+ 1 my/require-depth)))
	   (orig-require feature filename noerror))
	 (message \"%sRequiring `%s'...done\"
		  (concat (make-string (* 2 my/require-depth) ? )
			  \"+-> \")
" 0 1 (face nil font-lock-multiline t font-lock-fontified t fontified t) 1 6 (face font-lock-keyword-face font-lock-multiline t font-lock-fontified t fontified t) 6 7 (face nil font-lock-multiline t font-lock-fontified t fontified t) 7 14 (face font-lock-function-name-face font-lock-multiline t font-lock-fontified t fontified t) 14 24 (face nil font-lock-multiline t font-lock-fontified t fontified t) 24 33 (face font-lock-type-face font-lock-multiline t font-lock-fontified t fontified t) 33 51 (face nil font-lock-multiline t font-lock-fontified t fontified t) 51 52 (face nil font-lock-multiline t font-lock-fontified t fontified t) 52 54 (fontified t font-lock-fontified t font-lock-multiline t face nil) 54 95 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 95 96 (face nil font-lock-multiline t font-lock-fontified t fontified t) 96 99 (fontified t font-lock-fontified t font-lock-multiline t face nil) 99 103 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-keyword-face) 103 130 (fontified t font-lock-fontified t font-lock-multiline t face nil) 130 131 (face nil font-lock-multiline t font-lock-fontified t fontified t) 131 142 (fontified t font-lock-fontified t font-lock-multiline t face nil) 142 156 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 156 158 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face font-lock-string-face)) 158 177 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 177 178 (face nil font-lock-multiline t font-lock-fontified t fontified t) 178 229 (fontified t font-lock-fontified t font-lock-multiline t face nil) 229 230 (face nil font-lock-multiline t font-lock-fontified t fontified t) 230 235 (fontified t font-lock-fontified t font-lock-multiline t face nil) 235 241 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 241 242 (fontified t font-lock-fontified t font-lock-multiline t face nil) 242 243 (face nil font-lock-multiline t font-lock-fontified t fontified t) 243 256 (fontified t font-lock-fontified t font-lock-multiline t face nil) 256 257 (face nil font-lock-multiline t font-lock-fontified t fontified t) 257 260 (fontified t font-lock-fontified t font-lock-multiline t face nil) 260 261 (face nil font-lock-multiline t font-lock-fontified t fontified t) 261 272 (fontified t font-lock-fontified t font-lock-multiline t face nil) 272 286 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 286 288 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face font-lock-string-face)) 288 290 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 290 291 (face nil font-lock-multiline t font-lock-fontified t fontified t) 291 342 (fontified t font-lock-fontified t font-lock-multiline t face nil) 342 343 (face nil font-lock-multiline t font-lock-fontified t fontified t) 343 348 (fontified t font-lock-fontified t font-lock-multiline t face nil) 348 354 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 354 355 (fontified t font-lock-fontified t font-lock-multiline t face nil) 355 356 (face nil font-lock-multiline t font-lock-fontified t fontified t) 356 368 (fontified t font-lock-fontified t font-lock-multiline t face nil) 368 369 (face nil font-lock-multiline t font-lock-fontified t fontified t) 369 372 (fontified t font-lock-fontified t font-lock-multiline t org-emphasis t face nil) 372 375 (fontified t font-lock-fontified t font-lock-multiline t org-emphasis t face font-lock-keyword-face) 375 397 (fontified t font-lock-fontified t font-lock-multiline t org-emphasis t face nil) 397 419 (fontified t font-lock-fontified t font-lock-multiline t face nil) 419 420 (face nil font-lock-multiline t font-lock-fontified t fontified t) 420 464 (fontified t font-lock-fontified t font-lock-multiline t face nil) 464 465 (face nil font-lock-multiline t font-lock-fontified t fontified t) 465 476 (fontified t font-lock-fontified t font-lock-multiline t face nil) 476 490 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 490 492 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face font-lock-string-face)) 492 501 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 501 502 (face nil font-lock-multiline t font-lock-fontified t fontified t) 502 553 (fontified t font-lock-fontified t font-lock-multiline t face nil) 553 554 (face nil font-lock-multiline t font-lock-fontified t fontified t) 554 559 (fontified t font-lock-fontified t font-lock-multiline t face nil) 559 565 (fontified t font-lock-fontified t font-lock-multiline t face font-lock-string-face) 565 566 (fontified t font-lock-fontified t font-lock-multiline t) 566 567 (font-lock-multiline t font-lock-fontified t fontified t)) #("(defun require (feature &optional filename noerror)
  \"Leave a trace of packages being loaded.\"
  (cond ((member feature features)
 	 (message \"%sRequiring `%s' (already loaded)\"
 		  (concat (make-string (* 2 my/require-depth) ? ) \"+-> \")
 		  feature))))
 	(t
 	 (message \"%sRequiring `%s'\"
 		  (concat (make-string (* 2 my/require-depth) ? )
 			  \"+-> \")
 		  feature)
 	 (let ((my/require-depth (+ 1 my/require-depth)))
 	   (orig-require feature filename noerror))
 	 (message \"%sRequiring `%s'...done\")
 		  (concat (make-string (* 2 my/require-depth) ? )
 			  \"+-> \"))" 0 1 (fontified t) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 14 (fontified t face font-lock-function-name-face) 14 24 (fontified t) 24 33 (fontified t face font-lock-type-face) 33 52 (fontified t) 52 54 (fontified t) 54 95 (fontified t face font-lock-doc-face) 95 96 (fontified t) 96 98 (fontified t) 98 99 (fontified t) 99 103 (fontified t face font-lock-keyword-face) 103 131 (fontified t) 131 132 (fontified t) 132 143 (fontified t) 143 157 (fontified t face font-lock-string-face) 157 159 (fontified t face (font-lock-constant-face font-lock-string-face)) 159 178 (fontified t face font-lock-string-face) 178 179 (fontified t) 179 180 (fontified t) 180 231 (fontified t) 231 232 (fontified t) 232 238 (fontified t face font-lock-string-face) 238 240 (fontified t) 240 241 (fontified t) 241 257 (fontified t) 257 258 (fontified t) 258 262 (fontified t) 262 263 (fontified t) 263 274 (fontified t) 274 288 (fontified t face font-lock-string-face) 288 290 (fontified t face (font-lock-constant-face font-lock-string-face)) 290 292 (fontified t face font-lock-string-face) 292 293 (fontified t) 293 294 (fontified t) 294 346 (fontified t) 346 347 (fontified t) 347 352 (fontified t) 352 358 (fontified t face font-lock-string-face) 358 360 (fontified t) 360 361 (fontified t) 361 374 (fontified t) 374 375 (fontified t) 375 378 (fontified t) 378 381 (fontified t face font-lock-keyword-face) 381 426 (fontified t) 426 427 (fontified t) 427 472 (fontified t) 472 473 (fontified t) 473 484 (fontified t) 484 498 (fontified t face font-lock-string-face) 498 500 (fontified t face (font-lock-constant-face font-lock-string-face)) 500 509 (fontified t face font-lock-string-face) 509 510 (fontified t) 510 511 (fontified t) 511 512 (fontified t) 512 564 (fontified t) 564 565 (fontified t) 565 570 (fontified t) 570 576 (fontified t face font-lock-string-face) 576 578 (fontified t)) ";; ;; REPLACES ORIGINAL in `C source code' (dumped)
;; ;; redefine require to leave a trace of packages being loaded
;; (if (not (fboundp 'orig-require))
;;     (fset 'orig-require (symbol-function 'require))
;;   (message \"The code to redefine `require' should not be loaded twice\"))
;;
;; (defvar my-require-depth 0)
;;
;; (defun require (feature &optional file)
;;   \"Leave a trace of packages being loaded.\"
;;   (cond ((member feature features)
;;          (message \"%sRequiring `%s' (already loaded)\"
;;                   (concat (make-string (* 2 my-require-depth) ?-) \"> \")
;;                   feature)
;;          (sit-for 0))
;;         (t
;;          (message \"%sRequiring `%s'\"
;;                   (concat (make-string (* 2 my-require-depth) ?-) \"> \")
;;                   feature)
;;          (sit-for 0)
;;          (let ((my-require-depth (+ 1 my-require-depth)))
;;            (cond (file
;;                   (orig-require feature file))
;;                  (t
;;                   (orig-require feature))))
;;          (message \"%sRequiring `%s'...done\"
;;                   (concat (make-string (* 2 my-require-depth) ?-) \"> \")
;;                   feature)
;;          (sit-for 0))))
" #("redefine require to leave a trace of packages being loaded" 0 58 (fontified t)) #("http://mwolson.org/static/doc/erc.html
http://puntoblogspot.blogspot.com/2009/10/how-i-use-emacs-irc-or-erc-for-dummies.html
http://emacs-fu.blogspot.com/2009/06/erc-emacs-irc-client.html
http://emacs-fu.blogspot.com/2008/12/running-console-programs-inside-emacs.html
http://blog.revolutionanalytics.com/2014/03/emacs-ess-and-r-for-zombies.html
" 0 37 (keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) face org-link mouse-face highlight htmlize-link (:uri "http://mwolson.org/static/doc/erc.html") fontified t) 37 38 (keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) face org-link mouse-face highlight rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) htmlize-link (:uri "http://mwolson.org/static/doc/erc.html") fontified t) 38 39 (fontified t) 39 123 (keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) face org-link mouse-face highlight htmlize-link (:uri "http://puntoblogspot.blogspot.com/2009/10/how-i-use-emacs-irc-or-erc-for-dummies.html") fontified t) 123 124 (keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) face org-link mouse-face highlight rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) htmlize-link (:uri "http://puntoblogspot.blogspot.com/2009/10/how-i-use-emacs-irc-or-erc-for-dummies.html") fontified t) 124 125 (fontified t) 125 186 (fontified t htmlize-link (:uri "http://emacs-fu.blogspot.com/2009/06/erc-emacs-irc-client.html") mouse-face highlight face org-link keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 186 187 (fontified t htmlize-link (:uri "http://emacs-fu.blogspot.com/2009/06/erc-emacs-irc-client.html") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) mouse-face highlight face org-link keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 187 188 (fontified t) 188 266 (keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) face org-link mouse-face highlight htmlize-link (:uri "http://emacs-fu.blogspot.com/2008/12/running-console-programs-inside-emacs.html") fontified t) 266 267 (keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) face org-link mouse-face highlight rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) htmlize-link (:uri "http://emacs-fu.blogspot.com/2008/12/running-console-programs-inside-emacs.html") fontified t) 267 268 (fontified t) 268 343 (fontified t htmlize-link (:uri "http://blog.revolutionanalytics.com/2014/03/emacs-ess-and-r-for-zombies.html") mouse-face highlight face org-link keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 343 344 (fontified t htmlize-link (:uri "http://blog.revolutionanalytics.com/2014/03/emacs-ess-and-r-for-zombies.html") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) mouse-face highlight face org-link keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 344 345 (fontified t)) #("https://github.com/mickeynp/discover.el
http://www.masteringemacs.org/articles/2013/12/21/discoverel-discover-emacs-context-menus/
" 0 38 (fontified t htmlize-link (:uri "https://github.com/mickeynp/discover.el") mouse-face highlight face org-link keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 38 39 (fontified t htmlize-link (:uri "https://github.com/mickeynp/discover.el") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) mouse-face highlight face org-link keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 39 40 (fontified t) 40 129 (keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) face org-link mouse-face highlight htmlize-link (:uri "http://www.masteringemacs.org/articles/2013/12/21/discoverel-discover-emacs-context-menus/") fontified t) 129 130 (keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) face org-link mouse-face highlight rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) htmlize-link (:uri "http://www.masteringemacs.org/articles/2013/12/21/discoverel-discover-emacs-context-menus/") fontified t) 130 131 (fontified t)) #("http://www.reddit.com/r/emacs/comments/28g8b9/make_more_use_of_rare_keys/ciao4ah
" 0 79 (fontified t mouse-face highlight face org-link htmlize-link (:uri "http://www.reddit.com/r/emacs/comments/28g8b9/make_more_use_of_rare_keys/ciao4ah") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 79 80 (fontified t mouse-face highlight face org-link htmlize-link (:uri "http://www.reddit.com/r/emacs/comments/28g8b9/make_more_use_of_rare_keys/ciao4ah") keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 80 81 (fontified t)) "http://lifehacker.com/eight-terminal-utilities-every-os-x-command-line-user-s-1593793109?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+lifehacker%2Ffull+%28Lifehacker%29
http://lifehacker.com/the-best-spotify-tips-and-tricks-you-re-probably-not-us-1594729019
http://www.techspot.com/guides/835-linux-command-line-basics/
http://www.emacswiki.org/emacs/DeskTop
http://tuhdo.github.io/emacs-tutor.html#sec-7-27
https://github.com/pashinin/workgroups2
http://www.artofmanliness.com/2014/06/20/the-art-of-grilling-how-to-grill-vegetables-video/
http://makezine.com/projects/make-27/wood-gas-camp-stove/
http://blogs.scientificamerican.com/dog-spies/2014/06/22/is-dog-training-scientific/
http://www.withings.com/activite/en-US
http://www.bbc.com/sport/football/world-cup/2014/schedule/group-stage
http://www.snappower.com/pages/about-guidelights
http://www.reddit.com/r/emacs/comments/28g8b9/make_more_use_of_rare_keys/ciao4ah
http://stackoverflow.com/questions/17496021/emacs-quicker-bookmark-jump
https://github.com/mickeynp/discover.el
http://www.masteringemacs.org/articles/2013/12/21/discoverel-discover-emacs-context-menus/
https://github.com/larstvei/dot-emacs
https://github.com/grettke/home
http://hints.macworld.com/search.php?query=10.6&keyType=all&type=all&mode=search&order=hits&direction=desc&results=50&page=2
http://tuhdo.github.io/emacs-tutor.html
http://www.cockos.com/licecap/
http://irreal.org/blog/?p=2756
http://sachachua.com/blog/2014/06/read-lisp-tweak-emacs-beginner-24-understand-emacs-lisp-code/
https://github.com/itsjeyd/emacs-config/blob/emacs24/init.el
http://www.emacswiki.org/emacs/AutoInstall
http://mwolson.org/static/doc/erc.html
http://puntoblogspot.blogspot.com/2009/10/how-i-use-emacs-irc-or-erc-for-dummies.html
http://emacs-fu.blogspot.com/2009/06/erc-emacs-irc-client.html
http://emacs-fu.blogspot.com/2008/12/running-console-programs-inside-emacs.html
http://blog.revolutionanalytics.com/2014/03/emacs-ess-and-r-for-zombies.html
http://vgoulet.act.ulaval.ca/en/emacs
http://www.dslreports.com/r0/download/2065743~8951f1dcab65bbc80a582e4c7a3d9279/atspecs.jpg
https://public.alliedpilots.org/APA/LinkClick.aspx?fileticket=cEGr-Si_SyE%3d&tabid=173&mid=3135
http://orgmode.org/worg/dev/org-build-system.html
http://orgmode.org/worg/org-hacks.html
http://www.alfabb.com/bb/forums/alfa-romeo-cars-sale-wanted/319329-1994-164ls-needs-home-2.html
http://www.xoring.com/
http://www.gardenersnet.com/flower/hyacinthbean.htm
http://nomnompaleo.com/post/15661311142/brussels-sprouts-chips
http://southernfood.about.com/od/pastarecipes/r/Orecchiette-With-Chard.htm
http://www.cleaneatingmag.com/recipes/hot-sour-swiss-chard/
http://www.epicurious.com/recipes/food/views/Sauteed-Swiss-Chard-with-Onions-240560
http://chowhound.chow.com/topics/534101
http://www.food.com/recipe/chard-onion-gruy-re-panade-bread-casserole-368749
"))
(setq search-ring '("git" "org-mode" "kill" "kb" "dired" "'cl" "ucid" "kbd" "requir" "auto-i" "cyg" "set-b" "/" "(t " "backg" "green"))
(setq regexp-search-ring '("SKD [0-9][0-9]" "S" "SKD [0-9][0-9]" "music" "SKD [0-9][0-9]"))
